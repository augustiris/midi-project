
swen-340-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08005c78  08005c78  00015c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006274  08006274  00027ed4  2**0
                  CONTENTS
  4 .ARM          00000000  08006274  08006274  00027ed4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006274  08006274  00027ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007ed4  20000000  0800627c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f38  20007ed4  0800e150  00027ed4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008e0c  0800e150  00028e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027ed4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027f04  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007654  00000000  00000000  00027f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002278  00000000  00000000  0002f59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00031818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c4  00000000  00000000  00032058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a6b  00000000  00000000  0003261c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9dc  00000000  00000000  00036087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7921  00000000  00000000  00042a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d38  00000000  00000000  0013a384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007ed4 	.word	0x20007ed4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c60 	.word	0x08005c60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007ed8 	.word	0x20007ed8
 80001cc:	08005c60 	.word	0x08005c60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <EXTI9_5_IRQHandler>:

/*
 * Handler for S1. Covers functionality for various button presses
 * when in manual mode.
 */
void EXTI9_5_IRQHandler(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	if(getMode() == MANUAL){
 8000bce:	f000 f85d 	bl	8000c8c <getMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d147      	bne.n	8000c68 <EXTI9_5_IRQHandler+0xa0>
		curr_event = getCount(); // Get time in microseconds
 8000bd8:	f001 f92a 	bl	8001e30 <getCount>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <EXTI9_5_IRQHandler+0xb0>)
 8000be0:	6013      	str	r3, [r2, #0]

		if(isUpS1()){ // The button has been released.
 8000be2:	f001 f967 	bl	8001eb4 <isUpS1>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d039      	beq.n	8000c60 <EXTI9_5_IRQHandler+0x98>
			if(isStartOfPeriod){ // This is the first button press of the period of 1 second.
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <EXTI9_5_IRQHandler+0xb4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <EXTI9_5_IRQHandler+0x38>
				togglePlayPause();
 8000bf4:	f000 f8a6 	bl	8000d44 <togglePlayPause>
				isStartOfPeriod = 0;
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <EXTI9_5_IRQHandler+0xb4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e012      	b.n	8000c26 <EXTI9_5_IRQHandler+0x5e>
				// printf("%s\n\r", "First press");
			}
			else{ // This is the second button press of the period of 1 second.
				if(curr_event - lastEventTime >= 1000000){ // 1 button event in 1 second
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <EXTI9_5_IRQHandler+0xb0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <EXTI9_5_IRQHandler+0xb8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <EXTI9_5_IRQHandler+0xbc>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d902      	bls.n	8000c16 <EXTI9_5_IRQHandler+0x4e>
					// printf("%s\n\r", "2 slow");
					togglePlayPause();
 8000c10:	f000 f898 	bl	8000d44 <togglePlayPause>
 8000c14:	e004      	b.n	8000c20 <EXTI9_5_IRQHandler+0x58>
				}
				else{ // 2 button events in 1 second
					// printf("%s\n\r", "2 fast");
					LED_Off(D7); // Override last button presses.
 8000c16:	2008      	movs	r0, #8
 8000c18:	f000 fac4 	bl	80011a4 <LED_Off>
					next();
 8000c1c:	f000 f908 	bl	8000e30 <next>
				}
				isStartOfPeriod = 1;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <EXTI9_5_IRQHandler+0xb4>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
			}
			lastEventTime = curr_event; // Update last event to current one.
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <EXTI9_5_IRQHandler+0xb0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <EXTI9_5_IRQHandler+0xb8>)
 8000c2c:	6013      	str	r3, [r2, #0]

			uint32_t timeHeld = curr_event - lastTimeDown;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <EXTI9_5_IRQHandler+0xb0>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <EXTI9_5_IRQHandler+0xc0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	607b      	str	r3, [r7, #4]
			if((timeHeld >= 1000000) && (lastTimeDown != 0)){ // If held for a second or longer and is not first btn press.
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <EXTI9_5_IRQHandler+0xbc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d912      	bls.n	8000c68 <EXTI9_5_IRQHandler+0xa0>
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <EXTI9_5_IRQHandler+0xc0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00e      	beq.n	8000c68 <EXTI9_5_IRQHandler+0xa0>
				// printf("%s\n\r", "1 held");
				setMusicState(FINISHED); // Turn off LED
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f842 	bl	8000cd4 <setMusicState>
				isStartOfPeriod = 1; // Reset start of period.
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <EXTI9_5_IRQHandler+0xb4>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
				lastEventTime = curr_event; // Update last event to current one.
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <EXTI9_5_IRQHandler+0xb0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <EXTI9_5_IRQHandler+0xb8>)
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e003      	b.n	8000c68 <EXTI9_5_IRQHandler+0xa0>
			}

		}
		else{ // The button is down
			lastTimeDown = curr_event;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <EXTI9_5_IRQHandler+0xb0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <EXTI9_5_IRQHandler+0xc0>)
 8000c66:	6013      	str	r3, [r2, #0]
		}
	}

	HAL_GPIO_EXTI_IRQHandler(S1_Pin); // Clear interrupt
 8000c68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c6c:	f002 f928 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20007ef0 	.word	0x20007ef0
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20007ef4 	.word	0x20007ef4
 8000c84:	000f423f 	.word	0x000f423f
 8000c88:	20007ef8 	.word	0x20007ef8

08000c8c <getMode>:
static uint8_t CURRENT_SONG = 0; // This is the index of the current song from songs[] in song.c.
static menu_mode ACTIVE_MODE = REMOTE; // The current mode of the menu.
static led_state LED_STATE = OFF; // The current status of the LED.
static music_state MUSIC_STATE = OFF; // The current status of the sound.

menu_mode getMode(){
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	return ACTIVE_MODE;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <getMode+0x14>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20007efd 	.word	0x20007efd

08000ca4 <getCurrentSong>:

uint8_t getCurrentSong(){
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	return CURRENT_SONG;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <getCurrentSong+0x14>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20007efc 	.word	0x20007efc

08000cbc <getMusicState>:

void setLEDState(led_state state){
	LED_STATE = state;
}

music_state getMusicState(){
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	return MUSIC_STATE;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <getMusicState+0x14>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20007efe 	.word	0x20007efe

08000cd4 <setMusicState>:

void setMusicState(music_state state){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	MUSIC_STATE = state;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <setMusicState+0x1c>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	7013      	strb	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	20007efe 	.word	0x20007efe

08000cf4 <EXTI15_10_IRQHandler>:

/*
 * Handler for the Blue Button. Pressing it toggles modes.
 */
void EXTI15_10_IRQHandler(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	if(handleBtn(B1_Pin) && isUpB1()){ // Check for bounce
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f001 f8fc 	bl	8001ef8 <handleBtn>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d015      	beq.n	8000d32 <EXTI15_10_IRQHandler+0x3e>
 8000d06:	f001 f8e5 	bl	8001ed4 <isUpB1>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d010      	beq.n	8000d32 <EXTI15_10_IRQHandler+0x3e>
		ACTIVE_MODE = !ACTIVE_MODE; // Toggle modes
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <EXTI15_10_IRQHandler+0x4c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bf0c      	ite	eq
 8000d18:	2301      	moveq	r3, #1
 8000d1a:	2300      	movne	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <EXTI15_10_IRQHandler+0x4c>)
 8000d22:	701a      	strb	r2, [r3, #0]
		stop(); // Turn off LED
 8000d24:	f000 f864 	bl	8000df0 <stop>
		setMusicState(FINISHED);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ffd3 	bl	8000cd4 <setMusicState>
		start_menu();
 8000d2e:	f000 f899 	bl	8000e64 <start_menu>
	}
	HAL_GPIO_EXTI_IRQHandler(B1_Pin); // Clear interrupt
 8000d32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d36:	f002 f8c3 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20007efd 	.word	0x20007efd

08000d44 <togglePlayPause>:

/*
 * Toggles PLAYING and PAUSED music state.
 */
void togglePlayPause(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	if(MUSIC_STATE == PLAYING){
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <togglePlayPause+0x24>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d106      	bne.n	8000d5e <togglePlayPause+0x1a>
		printf("LED Flashing\n\r");
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <togglePlayPause+0x28>)
 8000d52:	f000 ff47 	bl	8001be4 <printf>
		MUSIC_STATE = PAUSED;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <togglePlayPause+0x24>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	701a      	strb	r2, [r3, #0]
	}
	else{
		MUSIC_STATE = PLAYING;
	}
}
 8000d5c:	e002      	b.n	8000d64 <togglePlayPause+0x20>
		MUSIC_STATE = PLAYING;
 8000d5e:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <togglePlayPause+0x24>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20007efe 	.word	0x20007efe
 8000d6c:	08005c78 	.word	0x08005c78

08000d70 <play>:

/*
 * This function turns the LED on.
 */
void play(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	LED_On(D7); // Turns the LED on.
 8000d74:	2008      	movs	r0, #8
 8000d76:	f000 f9ff 	bl	8001178 <LED_On>
	song_init(); // Initalizes all song info to 0.
 8000d7a:	f001 fac3 	bl	8002304 <song_init>
	parseSong(CURRENT_SONG); // Parses MIDI file for song info.
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <play+0x6c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 faf2 	bl	800236c <parseSong>
	playNotes();
 8000d88:	f000 fcfc 	bl	8001784 <playNotes>

	switch (MUSIC_STATE){
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <play+0x70>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d019      	beq.n	8000dc8 <play+0x58>
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	dc1e      	bgt.n	8000dd6 <play+0x66>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <play+0x44>
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d11a      	bne.n	8000dd6 <play+0x66>
			case PLAYING:{
				printf("Song #%d Finished.\n\r", CURRENT_SONG);
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <play+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <play+0x74>)
 8000da8:	f000 ff1c 	bl	8001be4 <printf>
				setMusicState(FINISHED);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff91 	bl	8000cd4 <setMusicState>
				break;
 8000db2:	e010      	b.n	8000dd6 <play+0x66>
			}
			case FINISHED:{
				printf("Song #%d Stopped.\n\r", CURRENT_SONG);
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <play+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <play+0x78>)
 8000dbc:	f000 ff12 	bl	8001be4 <printf>
				setMusicState(FINISHED);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff87 	bl	8000cd4 <setMusicState>
				break;
 8000dc6:	e006      	b.n	8000dd6 <play+0x66>
			}
			case PAUSED:{
				printf("Song #%d Paused. Use PLAY/PAUSE to continue.\n\r", CURRENT_SONG);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <play+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <play+0x7c>)
 8000dd0:	f000 ff08 	bl	8001be4 <printf>
				break;
 8000dd4:	bf00      	nop
			}
	}

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20007efc 	.word	0x20007efc
 8000de0:	20007efe 	.word	0x20007efe
 8000de4:	08005c88 	.word	0x08005c88
 8000de8:	08005ca0 	.word	0x08005ca0
 8000dec:	08005cb4 	.word	0x08005cb4

08000df0 <stop>:

/*
 * This function turns the LED off.
 */
void stop(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	LED_Off(D7);
 8000df4:	2008      	movs	r0, #8
 8000df6:	f000 f9d5 	bl	80011a4 <LED_Off>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <pause>:

/*
 * This function makes the LED flash once every second.
 */
void pause(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	if((getCount() % TICKS_IN_SECOND) == 0)
 8000e04:	f001 f814 	bl	8001e30 <getCount>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <pause+0x28>)
 8000e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e10:	0c9b      	lsrs	r3, r3, #18
 8000e12:	4906      	ldr	r1, [pc, #24]	; (8000e2c <pause+0x2c>)
 8000e14:	fb01 f303 	mul.w	r3, r1, r3
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <pause+0x24>
		LED_Toggle(D7);
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f000 f9d7 	bl	80011d2 <LED_Toggle>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	000f4240 	.word	0x000f4240

08000e30 <next>:

/*
 * This function prints the next song and moves to the next song in the list.
 */
void next(){
 8000e30:	b598      	push	{r3, r4, r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	CURRENT_SONG = CURRENT_SONG == (get_num_songs() - 1) ? 0 : CURRENT_SONG + 1; // Move to the next song.
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <next+0x30>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461c      	mov	r4, r3
 8000e3a:	f000 fd13 	bl	8001864 <get_num_songs>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	3b01      	subs	r3, #1
 8000e42:	429c      	cmp	r4, r3
 8000e44:	d004      	beq.n	8000e50 <next+0x20>
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <next+0x30>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	e000      	b.n	8000e52 <next+0x22>
 8000e50:	2300      	movs	r3, #0
 8000e52:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <next+0x30>)
 8000e54:	7013      	strb	r3, [r2, #0]
	printSong();
 8000e56:	f001 f9f7 	bl	8002248 <printSong>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd98      	pop	{r3, r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20007efc 	.word	0x20007efc

08000e64 <start_menu>:


void start_menu(){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	if(ACTIVE_MODE == REMOTE)
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <start_menu+0x18>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <start_menu+0x10>
		printPrompt();
 8000e70:	f001 f950 	bl	8002114 <printPrompt>

	printMode();
 8000e74:	f001 f936 	bl	80020e4 <printMode>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20007efd 	.word	0x20007efd

08000e80 <run_menu>:

/*
 * This function has an infinite loop which calls the correct method depending on which state the music is in.
 */
void run_menu() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	start_menu();
 8000e84:	f7ff ffee 	bl	8000e64 <start_menu>

	while(1){
		switch (MUSIC_STATE){
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <run_menu+0x30>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d00b      	beq.n	8000ea8 <run_menu+0x28>
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	dcf9      	bgt.n	8000e88 <run_menu+0x8>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <run_menu+0x22>
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d1f5      	bne.n	8000e88 <run_menu+0x8>
				case PLAYING:{
					play();
 8000e9c:	f7ff ff68 	bl	8000d70 <play>
					break;
 8000ea0:	e005      	b.n	8000eae <run_menu+0x2e>
				}
				case FINISHED:{
					stop();
 8000ea2:	f7ff ffa5 	bl	8000df0 <stop>
					break;
 8000ea6:	e002      	b.n	8000eae <run_menu+0x2e>
				}
				case PAUSED:{
					pause();
 8000ea8:	f7ff ffaa 	bl	8000e00 <pause>
					break;
 8000eac:	bf00      	nop
		switch (MUSIC_STATE){
 8000eae:	e7eb      	b.n	8000e88 <run_menu+0x8>
 8000eb0:	20007efe 	.word	0x20007efe

08000eb4 <USART2_IRQHandler>:
};

/*
 * Whenever a key is pressed check for valid commands.
 */
void USART2_IRQHandler(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	getCmd();
 8000eb8:	f000 f802 	bl	8000ec0 <getCmd>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <getCmd>:
 * This function gets the next line of user input and
 * looks for valid commands. It calls the correct helper
 * function for when commands are found and if invalid
 * input is entered.
 */
char* getCmd(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	// If in MANUAL mode readline() without echo.
	char* line = (getMode() == MANUAL) ? strupr(readline(0)) : strupr(readline(1));
 8000ec6:	f7ff fee1 	bl	8000c8c <getMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d108      	bne.n	8000ee2 <getCmd+0x22>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 fb17 	bl	8001504 <readline>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fdbd 	bl	8003a58 <strupr>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	e007      	b.n	8000ef2 <getCmd+0x32>
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 fb0e 	bl	8001504 <readline>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fdb4 	bl	8003a58 <strupr>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	607b      	str	r3, [r7, #4]

	if(getMode() == REMOTE && (line != 0)){ // Only attempt to execute cmd if in REMOTE mode and a valid line is entered.
 8000ef4:	f7ff feca 	bl	8000c8c <getMode>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d14c      	bne.n	8000f98 <getCmd+0xd8>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d049      	beq.n	8000f98 <getCmd+0xd8>
		if(strcmp(USER_CMD.help, line) == 0){
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <getCmd+0xe4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff f960 	bl	80001d0 <strcmp>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <getCmd+0x5c>
			printPrompt();
 8000f16:	f001 f8fd 	bl	8002114 <printPrompt>
 8000f1a:	e03d      	b.n	8000f98 <getCmd+0xd8>
		}
		else if(strcmp(USER_CMD.next, line) == 0){
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <getCmd+0xe4>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f954 	bl	80001d0 <strcmp>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <getCmd+0x74>
			next();
 8000f2e:	f7ff ff7f 	bl	8000e30 <next>
 8000f32:	e031      	b.n	8000f98 <getCmd+0xd8>
		}
		else if(strcmp(USER_CMD.play, line) == 0){
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <getCmd+0xe4>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f948 	bl	80001d0 <strcmp>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d106      	bne.n	8000f54 <getCmd+0x94>
			printf("LED On\n\r");
 8000f46:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <getCmd+0xe8>)
 8000f48:	f000 fe4c 	bl	8001be4 <printf>
			setMusicState(PLAYING);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fec1 	bl	8000cd4 <setMusicState>
 8000f52:	e021      	b.n	8000f98 <getCmd+0xd8>
		}
		else if(strcmp(USER_CMD.pause, line) == 0){
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <getCmd+0xe4>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f938 	bl	80001d0 <strcmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <getCmd+0xb4>
			printf("LED Flashing\n\r");
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <getCmd+0xec>)
 8000f68:	f000 fe3c 	bl	8001be4 <printf>
			setMusicState(PAUSED);
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f7ff feb1 	bl	8000cd4 <setMusicState>
 8000f72:	e011      	b.n	8000f98 <getCmd+0xd8>
		}
		else if(strcmp(USER_CMD.stop, line) == 0){
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <getCmd+0xe4>)
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f928 	bl	80001d0 <strcmp>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <getCmd+0xd4>
			printf("LED Off\n\r");
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <getCmd+0xf0>)
 8000f88:	f000 fe2c 	bl	8001be4 <printf>
			setMusicState(FINISHED);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fea1 	bl	8000cd4 <setMusicState>
 8000f92:	e001      	b.n	8000f98 <getCmd+0xd8>
		}
		else{
			printInvalidCmd();
 8000f94:	f001 f8e8 	bl	8002168 <printInvalidCmd>
		}
	}
	return line;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	08005d0c 	.word	0x08005d0c
 8000fac:	08005d18 	.word	0x08005d18
 8000fb0:	08005d28 	.word	0x08005d28

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <GPIO_Init+0xc4>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <GPIO_Init+0xc4>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <GPIO_Init+0xc4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <GPIO_Init+0xc4>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <GPIO_Init+0xc4>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <GPIO_Init+0xc4>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <GPIO_Init+0xc4>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <GPIO_Init+0xc4>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <GPIO_Init+0xc4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <GPIO_Init+0xc4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <GPIO_Init+0xc4>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <GPIO_Init+0xc4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800106c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001070:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <GPIO_Init+0xc8>)
 800107e:	f001 fd5d 	bl	8002b3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8001082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001086:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001088:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800108c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108e:	2302      	movs	r3, #2
 8001090:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f001 fd4e 	bl	8002b3c <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a0:	2028      	movs	r0, #40	; 0x28
 80010a2:	f7ff ff87 	bl	8000fb4 <__NVIC_EnableIRQ>

	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_5_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a6:	2017      	movs	r0, #23
 80010a8:	f7ff ff84 	bl	8000fb4 <__NVIC_EnableIRQ>

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000800 	.word	0x48000800

080010bc <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <LED_Init+0xb8>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <LED_Init+0xb8>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 80010d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2103      	movs	r1, #3
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80010e8:	4013      	ands	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 80010ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8001104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2103      	movs	r1, #3
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800111a:	4013      	ands	r3, r2
 800111c:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 800111e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2103      	movs	r1, #3
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8001136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800114a:	4013      	ands	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 800114e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2103      	movs	r1, #3
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001164:	4013      	ands	r3, r2
 8001166:	60cb      	str	r3, [r1, #12]
	
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000

08001178 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(uint8_t pin){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 8001182:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001194:	4313      	orrs	r3, r2
 8001196:	614b      	str	r3, [r1, #20]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 80011ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80011c2:	4013      	ands	r3, r2
 80011c4:	614b      	str	r3, [r1, #20]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//**************unit8_t pin***************************************************************************
void LED_Toggle(uint8_t pin){
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR ^= (1UL<<pin);
 80011dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80011ee:	4053      	eors	r3, r2
 80011f0:	614b      	str	r3, [r1, #20]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <__NVIC_EnableIRQ>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <UART2_Init>:
#define RX_PIN 3

static char buffer [128]; // This is a buffer for storing user input.
static int buffer_count = 0; // This is the current index of the most recently entered char in buffer.

void UART2_Init(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <UART2_Init+0x44>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <UART2_Init+0x44>)
 8001246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124a:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <UART2_Init+0x44>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <UART2_Init+0x44>)
 8001254:	f023 030c 	bic.w	r3, r3, #12
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <UART2_Init+0x44>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <UART2_Init+0x44>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 800126c:	f000 f80c 	bl	8001288 <UART2_GPIO_Init>
	USART_Init(USART2);
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <UART2_Init+0x48>)
 8001272:	f000 f851 	bl	8001318 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
 8001276:	2026      	movs	r0, #38	; 0x26
 8001278:	f7ff ffc2 	bl	8001200 <__NVIC_EnableIRQ>

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	40004400 	.word	0x40004400

08001288 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <UART2_GPIO_Init+0x8c>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	4a20      	ldr	r2, [pc, #128]	; (8001314 <UART2_GPIO_Init+0x8c>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8001298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80012a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80012b6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80012b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80012c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012d2:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80012d6:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80012d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012e2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80012e6:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80012e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012f6:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80012f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001302:	f023 030c 	bic.w	r3, r3, #12
 8001306:	6053      	str	r3, [r2, #4]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 0201 	bic.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f242 028d 	movw	r2, #8333	; 0x208d
 8001356:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f043 020c 	orr.w	r2, r3, #12
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <USART_Init+0x10c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d129      	bne.n	80013c0 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f043 0220 	orr.w	r2, r3, #32
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 0210 	bic.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 0201 	bic.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <USART_Init+0x110>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d111      	bne.n	80013ec <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <USART_Init+0x114>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <USART_Init+0x114>)
 80013da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013de:	6093      	str	r3, [r2, #8]
		// USARTx->CR1 |= (1 << 5); // RXNE interrupt enable
		USARTx->CR1 |= USART_CR1_RXNEIE; // RXNE interrupt enable
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	601a      	str	r2, [r3, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80013f8:	bf00      	nop
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f9      	beq.n	80013fa <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8001406:	bf00      	nop
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f9      	beq.n	8001408 <USART_Init+0xf0>

}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40004c00 	.word	0x40004c00
 8001428:	40004400 	.word	0x40004400
 800142c:	40013800 	.word	0x40013800

08001430 <USART_Read_Nonblocking>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	if ((USARTx->ISR & USART_ISR_RXNE))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <USART_Read_Nonblocking+0x1e>
		return ((uint8_t)(USARTx->RDR & 0xFF));;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001448:	b29b      	uxth	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	e000      	b.n	8001450 <USART_Read_Nonblocking+0x20>
	return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <USART_Write>:

uint8_t USART2_Read (USART_TypeDef * USARTx) {
	return ((uint8_t)(USARTx->RDR & 0xFF));
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e014      	b.n	8001498 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 800146e:	bf00      	nop
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f9      	beq.n	8001470 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 800148a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800148e:	f000 f819 	bl	80014c4 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8e6      	bhi.n	800146e <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80014a0:	bf00      	nop
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f9      	beq.n	80014a2 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	61da      	str	r2, [r3, #28]
}   
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2264      	movs	r2, #100	; 0x64
 80014d0:	fb03 f202 	mul.w	r2, r3, r2
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <USART_Delay+0x3c>)
 80014d6:	fba3 1302 	umull	r1, r3, r3, r2
 80014da:	1ad2      	subs	r2, r2, r3
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	4413      	add	r3, r2
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80014e4:	bf00      	nop
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f9      	bne.n	80014e6 <USART_Delay+0x22>
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	24924925 	.word	0x24924925

08001504 <readline>:
/*
 * This function reads a line of user input.
 * Returns the line (ending in '\r') as a char*
 * or 0 if  one is not found.
 */
char* readline (int isEchoing) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	uint8_t byte = USART_Read_Nonblocking (USART2); // Reads the next byte
 800150c:	482d      	ldr	r0, [pc, #180]	; (80015c4 <readline+0xc0>)
 800150e:	f7ff ff8f 	bl	8001430 <USART_Read_Nonblocking>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
	if(byte && isEchoing){ // If the byte exists
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d04e      	beq.n	80015ba <readline+0xb6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d04b      	beq.n	80015ba <readline+0xb6>
		if(byte == '\b'){ // If the byte is a backspace
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d125      	bne.n	8001574 <readline+0x70>
			unsigned char space = ' ';
 8001528:	2320      	movs	r3, #32
 800152a:	73bb      	strb	r3, [r7, #14]
			USART_Write(USART2, &byte, 1); // Move the cursor back one
 800152c:	f107 030f 	add.w	r3, r7, #15
 8001530:	2201      	movs	r2, #1
 8001532:	4619      	mov	r1, r3
 8001534:	4823      	ldr	r0, [pc, #140]	; (80015c4 <readline+0xc0>)
 8001536:	f7ff ff91 	bl	800145c <USART_Write>
			USART_Write(USART2, &space, 1); // Overwrite the last char with a space (moves the cursor forward one)
 800153a:	f107 030e 	add.w	r3, r7, #14
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	4820      	ldr	r0, [pc, #128]	; (80015c4 <readline+0xc0>)
 8001544:	f7ff ff8a 	bl	800145c <USART_Write>
			USART_Write(USART2, &byte, 1); // Move the the cursor back again
 8001548:	f107 030f 	add.w	r3, r7, #15
 800154c:	2201      	movs	r2, #1
 800154e:	4619      	mov	r1, r3
 8001550:	481c      	ldr	r0, [pc, #112]	; (80015c4 <readline+0xc0>)
 8001552:	f7ff ff83 	bl	800145c <USART_Write>
			if(buffer_count > 0){
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <readline+0xc4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dd2d      	ble.n	80015ba <readline+0xb6>
				buffer_count--;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <readline+0xc4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3b01      	subs	r3, #1
 8001564:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <readline+0xc4>)
 8001566:	6013      	str	r3, [r2, #0]
				buffer[buffer_count] = 0;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <readline+0xc4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <readline+0xc8>)
 800156e:	2100      	movs	r1, #0
 8001570:	54d1      	strb	r1, [r2, r3]
 8001572:	e022      	b.n	80015ba <readline+0xb6>
			}
		}
		else{
			USART_Write(USART2, &byte, 1); // Echo the char
 8001574:	f107 030f 	add.w	r3, r7, #15
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <readline+0xc0>)
 800157e:	f7ff ff6d 	bl	800145c <USART_Write>
			buffer[buffer_count] = (char)byte; // Add char to buffer
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <readline+0xc4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	7bf9      	ldrb	r1, [r7, #15]
 8001588:	4a10      	ldr	r2, [pc, #64]	; (80015cc <readline+0xc8>)
 800158a:	54d1      	strb	r1, [r2, r3]
			if(byte == '\r'){ // Signal that a line has been entered.
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b0d      	cmp	r3, #13
 8001590:	d10e      	bne.n	80015b0 <readline+0xac>
				USART_Write(USART2, (unsigned char*)"\n", 1);
 8001592:	2201      	movs	r2, #1
 8001594:	490e      	ldr	r1, [pc, #56]	; (80015d0 <readline+0xcc>)
 8001596:	480b      	ldr	r0, [pc, #44]	; (80015c4 <readline+0xc0>)
 8001598:	f7ff ff60 	bl	800145c <USART_Write>
				buffer[buffer_count] = 0; // Reset buffer
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <readline+0xc4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <readline+0xc8>)
 80015a2:	2100      	movs	r1, #0
 80015a4:	54d1      	strb	r1, [r2, r3]
				buffer_count = 0;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <readline+0xc4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
				return buffer;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <readline+0xc8>)
 80015ae:	e005      	b.n	80015bc <readline+0xb8>
			}
			buffer_count++;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <readline+0xc4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <readline+0xc4>)
 80015b8:	6013      	str	r3, [r2, #0]
		}
	}
	return 0;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40004400 	.word	0x40004400
 80015c8:	20007f80 	.word	0x20007f80
 80015cc:	20007f00 	.word	0x20007f00
 80015d0:	08005d34 	.word	0x08005d34

080015d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a15      	ldr	r2, [pc, #84]	; (8001648 <HAL_DAC_MspInit+0x74>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d124      	bne.n	8001640 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_DAC_MspInit+0x78>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_DAC_MspInit+0x78>)
 80015fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001600:	6593      	str	r3, [r2, #88]	; 0x58
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_DAC_MspInit+0x78>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_DAC_MspInit+0x78>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_DAC_MspInit+0x78>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_DAC_MspInit+0x78>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001626:	2310      	movs	r3, #16
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f001 fa7e 	bl	8002b3c <HAL_GPIO_Init>
  }

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40007400 	.word	0x40007400
 800164c:	40021000 	.word	0x40021000

08001650 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2224      	movs	r2, #36	; 0x24
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f002 f9df 	bl	8003a20 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <DAC_Init+0x5c>)
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <DAC_Init+0x60>)
 8001666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <DAC_Init+0x5c>)
 800166a:	f001 f8b9 	bl	80027e0 <HAL_DAC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <DAC_Init+0x28>
  {
    Error_Handler();
 8001674:	f000 fbe8 	bl	8001e48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <DAC_Init+0x5c>)
 8001694:	f001 f938 	bl	8002908 <HAL_DAC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <DAC_Init+0x52>
  {
    Error_Handler();
 800169e:	f000 fbd3 	bl	8001e48 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20007f84 	.word	0x20007f84
 80016b0:	40007400 	.word	0x40007400

080016b4 <DAC_Start>:

void DAC_Start () {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 80016b8:	2100      	movs	r1, #0
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DAC_Start+0x10>)
 80016bc:	f001 f8b2 	bl	8002824 <HAL_DAC_Start>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20007f84 	.word	0x20007f84

080016c8 <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <DAC_Set_Value+0x1c>)
 80016d8:	f001 f8f1 	bl	80028be <HAL_DAC_SetValue>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20007f84 	.word	0x20007f84

080016e8 <main>:
#include "menu.h"
#include "dac.h"
#include "tone.h"
#include <util/parser.h>

int main(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 80016ec:	f000 f960 	bl	80019b0 <System_Clock_Init>
	LED_Init(D7);
 80016f0:	2008      	movs	r0, #8
 80016f2:	f7ff fce3 	bl	80010bc <LED_Init>
	UART2_Init();
 80016f6:	f7ff fda1 	bl	800123c <UART2_Init>
	init_systick();
 80016fa:	f000 fbad 	bl	8001e58 <init_systick>
	GPIO_Init();
 80016fe:	f7ff fc77 	bl	8000ff0 <GPIO_Init>
	DAC_Init();
 8001702:	f7ff ffa5 	bl	8001650 <DAC_Init>
	DAC_Start();
 8001706:	f7ff ffd5 	bl	80016b4 <DAC_Start>

	// demo code
	run_menu();
 800170a:	f7ff fbb9 	bl	8000e80 <run_menu>
 800170e:	2300      	movs	r3, #0

}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}

08001714 <getHeader>:

/*
 * Given the start of a song returns a header struct with the song's
 * length, format, tracks, and division.
 */
header* getHeader(uint8_t song_number){
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
	header* ptr_head;
	// Assign ptr_head to the start of the song
	ptr_head = (header*) get_song(song_number).p_song;
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f884 	bl	8001834 <get_song>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	61fb      	str	r3, [r7, #28]

	char buff[5];
	strncpy(buff, ptr_head->type, sizeof (char[4]));
 8001730:	69f9      	ldr	r1, [r7, #28]
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2204      	movs	r2, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f002 f979 	bl	8003a30 <strncpy>
	buff[sizeof (ptr_head->type)] = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	743b      	strb	r3, [r7, #16]

	return ptr_head;
 8001742:	69fb      	ldr	r3, [r7, #28]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <getTracks>:

uint16_t getFormat(header* header){
	return convert_to_uint16((uint8_t*)&header->format);
}

uint16_t getTracks(header* header){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	return convert_to_uint16((uint8_t*)&header->tracks);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	330a      	adds	r3, #10
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fc2b 	bl	8001fb4 <convert_to_uint16>
 800175e:	4603      	mov	r3, r0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <getDivision>:

uint16_t getDivision(header* header){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	return convert_to_uint16((uint8_t*)&header->division);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	330c      	adds	r3, #12
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fc1d 	bl	8001fb4 <convert_to_uint16>
 800177a:	4603      	mov	r3, r0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <playNotes>:
#include "menu.h"

/**
 * Plays all the note events in the MIDI file.
 */
void playNotes(){
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
	int num_notes = getNumNotes(); // The total number of note events.
 800178a:	f000 fdaf 	bl	80022ec <getNumNotes>
 800178e:	60f8      	str	r0, [r7, #12]
	uint32_t* timing = getTiming(); // An array of the delays between each note event.
 8001790:	f000 fd8e 	bl	80022b0 <getTiming>
 8001794:	60b8      	str	r0, [r7, #8]
	int current_note = 0; // The index of the current note event.
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
	uint32_t lastEventTime = 0; // The system time of the last time a note event was executed.
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]

	while(current_note < num_notes && getMusicState() == PLAYING){
 800179e:	e016      	b.n	80017ce <playNotes+0x4a>
		uint32_t curr_time = getCount(); // Current system time.
 80017a0:	f000 fb46 	bl	8001e30 <getCount>
 80017a4:	6078      	str	r0, [r7, #4]
		if(timing[current_note] < (curr_time - lastEventTime)){ // If the delay for the current note event has been reached.
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	4413      	add	r3, r2
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1acb      	subs	r3, r1, r3
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d207      	bcs.n	80017ca <playNotes+0x46>
			useCurrentNote(current_note); // Add the note to tones.
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f000 f814 	bl	80017e8 <useCurrentNote>
			current_note++; // Move to the next note event.
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
			lastEventTime = curr_time; // Update last event time.
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	613b      	str	r3, [r7, #16]
		}
		play_tones(); // Play the tones.
 80017ca:	f000 f8cd 	bl	8001968 <play_tones>
	while(current_note < num_notes && getMusicState() == PLAYING){
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	da04      	bge.n	80017e0 <playNotes+0x5c>
 80017d6:	f7ff fa71 	bl	8000cbc <getMusicState>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d0df      	beq.n	80017a0 <playNotes+0x1c>
	}
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <useCurrentNote>:

/**
 * Given a note event, if note ON add to tones, else if note OFF remove from tones.
 */
void useCurrentNote(int note_num){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	tone_info* note_info = getSongInfo();
 80017f0:	f000 fd68 	bl	80022c4 <getSongInfo>
 80017f4:	60f8      	str	r0, [r7, #12]
	int* note_on_event = getNoteOnEvent();
 80017f6:	f000 fd6f 	bl	80022d8 <getNoteOnEvent>
 80017fa:	60b8      	str	r0, [r7, #8]

	if(note_on_event[note_num]){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <useCurrentNote+0x34>
		add_tone(note_info[note_num]); // Add tone
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001816:	f000 f87b 	bl	8001910 <add_tone>
	}
	else{
		remove_tone(note_info[note_num]); // Remove note
	}
}
 800181a:	e007      	b.n	800182c <useCurrentNote+0x44>
		remove_tone(note_info[note_num]); // Remove note
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001828:	f000 f888 	bl	800193c <remove_tone>
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8001834:	b490      	push	{r4, r7}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <get_song+0x2c>)
 8001846:	460c      	mov	r4, r1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001850:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bc90      	pop	{r4, r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20007abc 	.word	0x20007abc

08001864 <get_num_songs>:

int get_num_songs() {
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	return sizeof(songs) / sizeof(songs[0]);
 8001868:	2305      	movs	r3, #5
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <hertz_to_duration>:
static tone_info tones[MAX_TONES] = {{0,0}};

uint32_t get_tick_speed ();

// Convert from hertz to ticks
uint32_t hertz_to_duration (float hertz) {
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t tick_speed = TICK_SPEED; // This is a hack, you'll fix it later
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <hertz_to_duration+0x58>)
 8001880:	60fb      	str	r3, [r7, #12]
	if (hertz == 0)
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	eef5 7a40 	vcmp.f32	s15, #0.0
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d101      	bne.n	8001894 <hertz_to_duration+0x20>
		return 0;
 8001890:	2300      	movs	r3, #0
 8001892:	e014      	b.n	80018be <hertz_to_duration+0x4a>
	float duration = 1 / hertz;
 8001894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001898:	ed97 7a01 	vldr	s14, [r7, #4]
 800189c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a0:	edc7 7a02 	vstr	s15, [r7, #8]
	return (uint32_t) (duration * tick_speed);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	ee17 3a90 	vmov	r3, s15
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	000f4240 	.word	0x000f4240

080018d0 <key_to_duration>:

// Convert from key to ticks
uint32_t key_to_duration (uint8_t key) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	uint32_t hertz = notes[key];
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <key_to_duration+0x3c>)
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ea:	ee17 3a90 	vmov	r3, s15
 80018ee:	60fb      	str	r3, [r7, #12]
	return hertz_to_duration (hertz);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fa:	eeb0 0a67 	vmov.f32	s0, s15
 80018fe:	f7ff ffb9 	bl	8001874 <hertz_to_duration>
 8001902:	4603      	mov	r3, r0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20007ae4 	.word	0x20007ae4

08001910 <add_tone>:

// Add a tone to the tones array
uint8_t add_tone (tone_info info) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	463b      	mov	r3, r7
 8001918:	e883 0003 	stmia.w	r3, {r0, r1}
	tones [0]= info;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <add_tone+0x28>)
 800191e:	461a      	mov	r2, r3
 8001920:	463b      	mov	r3, r7
 8001922:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001926:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20007f98 	.word	0x20007f98

0800193c <remove_tone>:

// Remove a tone from the tones array
uint8_t remove_tone (tone_info info) {
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	463b      	mov	r3, r7
 8001944:	e883 0003 	stmia.w	r3, {r0, r1}
	tones [0].duration = info.duration;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4a06      	ldr	r2, [pc, #24]	; (8001964 <remove_tone+0x28>)
 800194c:	6013      	str	r3, [r2, #0]
	tones [0].power = 0;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <remove_tone+0x28>)
 8001950:	2200      	movs	r2, #0
 8001952:	809a      	strh	r2, [r3, #4]
	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20007f98 	.word	0x20007f98

08001968 <play_tones>:

// Play any tones in the array
void play_tones () {
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	if((getCount() % tones[0].duration) < (tones[0].duration >> 1)){
 800196c:	f000 fa60 	bl	8001e30 <getCount>
 8001970:	4602      	mov	r2, r0
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <play_tones+0x44>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fbb2 f1f3 	udiv	r1, r2, r3
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <play_tones+0x44>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	085b      	lsrs	r3, r3, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d20a      	bcs.n	80019a0 <play_tones+0x38>
		DAC_Set_Value(tones[0].power * FREQUENCY_SCALAR);
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <play_tones+0x44>)
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	461a      	mov	r2, r3
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe95 	bl	80016c8 <DAC_Set_Value>
	}
	else{
		DAC_Set_Value (0);
	}
}
 800199e:	e002      	b.n	80019a6 <play_tones+0x3e>
		DAC_Set_Value (0);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fe91 	bl	80016c8 <DAC_Set_Value>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20007f98 	.word	0x20007f98

080019b0 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80019b6:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <System_Clock_Init+0x1b4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <System_Clock_Init+0x1b4>)
 80019bc:	f023 0307 	bic.w	r3, r3, #7
 80019c0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80019c2:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <System_Clock_Init+0x1b4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <System_Clock_Init+0x1b4>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80019ce:	4b66      	ldr	r3, [pc, #408]	; (8001b68 <System_Clock_Init+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <System_Clock_Init+0x1b8>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80019da:	bf00      	nop
 80019dc:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <System_Clock_Init+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f9      	beq.n	80019dc <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80019e8:	2310      	movs	r3, #16
 80019ea:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80019ec:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <System_Clock_Init+0x1b8>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <System_Clock_Init+0x1b8>)
 80019f2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80019f6:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80019f8:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <System_Clock_Init+0x1b8>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	061b      	lsls	r3, r3, #24
 8001a00:	4959      	ldr	r1, [pc, #356]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8001a06:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a10:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8001a12:	bf00      	nop
 8001a14:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a20:	d0f8      	beq.n	8001a14 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a28:	f023 0303 	bic.w	r3, r3, #3
 8001a2c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8001a2e:	4b4e      	ldr	r3, [pc, #312]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a44:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001a48:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a52:	4a45      	ldr	r2, [pc, #276]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4a42      	ldr	r2, [pc, #264]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001a64:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8001a66:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4a3f      	ldr	r2, [pc, #252]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a70:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8001a7e:	bf00      	nop
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f9      	beq.n	8001a80 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a35      	ldr	r2, [pc, #212]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001a9e:	f043 0303 	orr.w	r3, r3, #3
 8001aa2:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8001aa4:	bf00      	nop
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d1f9      	bne.n	8001aa6 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001ab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001abc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001ac4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001ad0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ad4:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001adc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ae0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 8001ae2:	bf00      	nop
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001af0:	d0f8      	beq.n	8001ae4 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001afc:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b04:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8001b08:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b2c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8001b2e:	bf00      	nop
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f9      	beq.n	8001b30 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b44:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <System_Clock_Init+0x1b8>)
 8001b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b56:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000

08001b6c <print_string>:
#include <stdarg.h>
#include <string.h>

static char buffer [128];

static void print_string(const char* string, int len){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	USART_Write (USART2, (unsigned char*)string, len);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <print_string+0x20>)
 8001b7e:	f7ff fc6d 	bl	800145c <USART_Write>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400

08001b90 <puts>:
//	uint8_ptr[0] = string;
//	uint8_ptr[1] = 0;
//	USART_Write (USART2, uint8_ptr, len);
}

int puts (const char* string){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	int len = strlen(string);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fb79 	bl	8000290 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	60fb      	str	r3, [r7, #12]
	print_string(string, len);
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe1 	bl	8001b6c <print_string>
	// print_string("\r\n", 2);
	return len;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <putchar>:

int	putchar (int character){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	char char_array[2];
	char* char_ptr = char_array;
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	60fb      	str	r3, [r7, #12]
	char_ptr[0] = (char)character;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	701a      	strb	r2, [r3, #0]
	char_ptr[1] = '\0';
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
	return puts(char_ptr);
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff ffdc 	bl	8001b90 <puts>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <printf>:

int printf (const char* format, ...){
 8001be4:	b40f      	push	{r0, r1, r2, r3}
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0

	va_list aptr;
	int ret;

	va_start(aptr, format);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	603b      	str	r3, [r7, #0]
	ret = vsprintf(buffer, format, aptr);
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	6939      	ldr	r1, [r7, #16]
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <printf+0x34>)
 8001bf8:	f001 ff08 	bl	8003a0c <vsiprintf>
 8001bfc:	6078      	str	r0, [r7, #4]
	va_end(aptr);

	print_string (buffer, ret);
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <printf+0x34>)
 8001c02:	f7ff ffb3 	bl	8001b6c <print_string>

	return(ret);
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c12:	b004      	add	sp, #16
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20007fa0 	.word	0x20007fa0

08001c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
	return 1;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_kill>:

int _kill(int pid, int sig)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c36:	f001 ff6b 	bl	8003b10 <__errno>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2216      	movs	r2, #22
 8001c3e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_exit>:

void _exit (int status)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ffe7 	bl	8001c2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c5e:	e7fe      	b.n	8001c5e <_exit+0x12>

08001c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e00a      	b.n	8001c88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c72:	f3af 8000 	nop.w
 8001c76:	4601      	mov	r1, r0
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	60ba      	str	r2, [r7, #8]
 8001c7e:	b2ca      	uxtb	r2, r1
 8001c80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf0      	blt.n	8001c72 <_read+0x12>
	}

return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e009      	b.n	8001cc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbf1      	blt.n	8001cac <_write+0x12>
	}
	return len;
 8001cc8:	687b      	ldr	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_close>:

int _close(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cfa:	605a      	str	r2, [r3, #4]
	return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_isatty>:

int _isatty(int file)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
	return 1;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <_sbrk+0x5c>)
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <_sbrk+0x60>)
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <_sbrk+0x64>)
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <_sbrk+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d207      	bcs.n	8001d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d6c:	f001 fed0 	bl	8003b10 <__errno>
 8001d70:	4603      	mov	r3, r0
 8001d72:	220c      	movs	r2, #12
 8001d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	e009      	b.n	8001d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <_sbrk+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20018000 	.word	0x20018000
 8001d9c:	00000400 	.word	0x00000400
 8001da0:	20008020 	.word	0x20008020
 8001da4:	20008e10 	.word	0x20008e10

08001da8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <SystemInit+0x64>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <SystemInit+0x64>)
 8001db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <SystemInit+0x68>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <SystemInit+0x68>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <SystemInit+0x68>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <SystemInit+0x68>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <SystemInit+0x68>)
 8001dd4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001dd8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <SystemInit+0x68>)
 8001de0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001de4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <SystemInit+0x68>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <SystemInit+0x68>)
 8001dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <SystemInit+0x68>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SystemInit+0x64>)
 8001dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	40021000 	.word	0x40021000

08001e14 <SysTick_Handler>:

static struct systick* SYST_TICK = (struct systick*)0xE000E010;

static uint32_t count = 0;

void SysTick_Handler(){
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
	count++;
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Handler+0x18>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <SysTick_Handler+0x18>)
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	20008024 	.word	0x20008024

08001e30 <getCount>:

uint32_t getCount(){
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	return count;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <getCount+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20008024 	.word	0x20008024

08001e48 <Error_Handler>:

void Error_Handler(){}
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <init_systick>:

// This function is to Initialize SysTick registers
// Use the SysTick global structure pointer to do the following in this
// exact order with separate lines for each step:
void init_systick()
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	// Disable SysTick by clearing the CTRL (CSR) register.
	SYST_TICK->CSR &= ~(1 << 0); // Disable
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <init_systick+0x58>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <init_systick+0x58>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer (.1 seconds).
	// SYST_TICK->RVR = 7999999;
	// SYST_TICK->RVR = 79; // Set timer to 1 usec
	//	SYST_TICK->RVR = 79999; // Set timer to 1 ms
	SYST_TICK->RVR = 79;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <init_systick+0x58>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	224f      	movs	r2, #79	; 0x4f
 8001e72:	605a      	str	r2, [r3, #4]

	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	SYST_TICK->CSR |= (1 << 2);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <init_systick+0x58>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <init_systick+0x58>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0204 	orr.w	r2, r2, #4
 8001e82:	601a      	str	r2, [r3, #0]

	SYST_TICK->CSR |= (1 << 1); // Enable interrupts
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <init_systick+0x58>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <init_systick+0x58>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0202 	orr.w	r2, r2, #2
 8001e92:	601a      	str	r2, [r3, #0]

	// Set the enable bit in the CTRL (CSR) to start the timer.
	SYST_TICK->CSR |= (1 << 0); // Enable
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <init_systick+0x58>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <init_systick+0x58>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20007ce4 	.word	0x20007ce4

08001eb4 <isUpS1>:
}

/*
 * Returns true if S1 is up
 */
unsigned int isUpS1(){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET;
 8001eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f000 ffe6 	bl	8002e90 <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <isUpB1>:

/*
 * Returns true if B1 is up
 */
unsigned int isUpB1(){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET;
 8001ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <isUpB1+0x20>)
 8001ede:	f000 ffd7 	bl	8002e90 <HAL_GPIO_ReadPin>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	48000800 	.word	0x48000800

08001ef8 <handleBtn>:

/*
 * Calls the button handler with the correct info to determine if the
 * button was pressed or if bounce created the interrupt.
 */
uint8_t handleBtn(uint16_t GPIO_Pin){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f08:	d003      	beq.n	8001f12 <handleBtn+0x1a>
 8001f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f0e:	d012      	beq.n	8001f36 <handleBtn+0x3e>
 8001f10:	e023      	b.n	8001f5a <handleBtn+0x62>
		case S1_Pin:{
			// Check the state of the pin for the last event.
			unsigned int* last_event = isUpS1() ? p_S1_up : p_S1_down;
 8001f12:	f7ff ffcf 	bl	8001eb4 <isUpS1>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <handleBtn+0x2a>
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <handleBtn+0x6c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	e001      	b.n	8001f26 <handleBtn+0x2e>
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <handleBtn+0x70>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60bb      	str	r3, [r7, #8]
			return filterInterrupt(S1_Pin, last_event);
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f2e:	f000 f821 	bl	8001f74 <filterInterrupt>
 8001f32:	4603      	mov	r3, r0
 8001f34:	e012      	b.n	8001f5c <handleBtn+0x64>
		}
		case B1_Pin:{
			unsigned int* last_event = isUpB1() ? p_B1_down : p_B1_up;
 8001f36:	f7ff ffcd 	bl	8001ed4 <isUpB1>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <handleBtn+0x4e>
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <handleBtn+0x74>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e001      	b.n	8001f4a <handleBtn+0x52>
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <handleBtn+0x78>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]
			return filterInterrupt(B1_Pin, last_event);
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f52:	f000 f80f 	bl	8001f74 <filterInterrupt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	e000      	b.n	8001f5c <handleBtn+0x64>
		}
	}
	return 0;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20007ce8 	.word	0x20007ce8
 8001f68:	20007cec 	.word	0x20007cec
 8001f6c:	20007cf4 	.word	0x20007cf4
 8001f70:	20007cf0 	.word	0x20007cf0

08001f74 <filterInterrupt>:
 * Checks to see if at least 50 ms has passed between interrupts to
 * filter out bounces from button presses. Returns 1 if the interrupt
 * was an actual button press and 0 otherwise. Updates times for last
 * button up and last button down.
 */
uint8_t filterInterrupt(uint16_t GPIO_Pin, unsigned int* last_event){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	80fb      	strh	r3, [r7, #6]
	unsigned int curr_time = getCount(); // The time in microseconds
 8001f80:	f7ff ff56 	bl	8001e30 <getCount>
 8001f84:	60f8      	str	r0, [r7, #12]
	if((curr_time - (*last_event) >= 50000) || *last_event == 0){
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d803      	bhi.n	8001f9e <filterInterrupt+0x2a>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <filterInterrupt+0x34>
		*last_event = curr_time;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]
		return 1; // Return successful button press.
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <filterInterrupt+0x36>
	}
	return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <convert_to_uint16>:
static int BITS_IN_BYTE = 8;
static int BITS_IN_UNIT_16 = 16;
static int BITS_IN_UNIT_24 = 24;
static int BITS_IN_UNIT_32 = 32;

uint16_t convert_to_uint16 (uint8_t* p_value){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	int16_t result = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	82fb      	strh	r3, [r7, #22]
	int length = BITS_IN_UNIT_16 / BITS_IN_BYTE;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <convert_to_uint16+0x60>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <convert_to_uint16+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++){
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e013      	b.n	8001ffc <convert_to_uint16+0x48>
		result += (p_value[i] << (8 * ((length - 1) - i)));
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e5a      	subs	r2, r3, #1
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < length; i++){
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	dbe7      	blt.n	8001fd4 <convert_to_uint16+0x20>
	}
	return result;
 8002004:	8afb      	ldrh	r3, [r7, #22]
}
 8002006:	4618      	mov	r0, r3
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20007cfc 	.word	0x20007cfc
 8002018:	20007cf8 	.word	0x20007cf8

0800201c <convert_to_uint24>:

uint32_t convert_to_uint24 (uint8_t* p_value){
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
	int length = BITS_IN_UNIT_24 / BITS_IN_BYTE;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <convert_to_uint24+0x5c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <convert_to_uint24+0x60>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fb92 f3f3 	sdiv	r3, r2, r3
 8002034:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++){
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e012      	b.n	8002062 <convert_to_uint24+0x46>
		result += (p_value[i] << (8 * ((length - 1) - i)));
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	461a      	mov	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < length; i++){
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	3301      	adds	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbe8      	blt.n	800203c <convert_to_uint24+0x20>
	}
	return result;
 800206a:	697b      	ldr	r3, [r7, #20]
}
 800206c:	4618      	mov	r0, r3
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20007d00 	.word	0x20007d00
 800207c:	20007cf8 	.word	0x20007cf8

08002080 <convert_to_uint32>:

uint32_t convert_to_uint32 (uint8_t* p_value){
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
	int length = BITS_IN_UNIT_32 / BITS_IN_BYTE;
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <convert_to_uint32+0x5c>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <convert_to_uint32+0x60>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fb92 f3f3 	sdiv	r3, r2, r3
 8002098:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++){
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e012      	b.n	80020c6 <convert_to_uint32+0x46>
		result += (p_value[i] << (8 * ((length - 1) - i)));
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	4413      	add	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < length; i++){
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	3301      	adds	r3, #1
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	dbe8      	blt.n	80020a0 <convert_to_uint32+0x20>
	}
	return result;
 80020ce:	697b      	ldr	r3, [r7, #20]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	20007d04 	.word	0x20007d04
 80020e0:	20007cf8 	.word	0x20007cf8

080020e4 <printMode>:
#include "menu.h"

/*
 * This function prints the current mode.
 */
void printMode(){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	switch (getMode()){
 80020e8:	f7fe fdd0 	bl	8000c8c <getMode>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <printMode+0x1a>
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <printMode+0x22>
		case MANUAL:{
			printf("***MANUAL OVERRIDE MODE ACTIVE***\n\r");
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <printMode+0x28>)
 80020f8:	f7ff fd74 	bl	8001be4 <printf>
			break;
 80020fc:	e003      	b.n	8002106 <printMode+0x22>
		}
		case REMOTE:{
			printf("***REMOTE MODE ACTIVE***\n\r");
 80020fe:	4804      	ldr	r0, [pc, #16]	; (8002110 <printMode+0x2c>)
 8002100:	f7ff fd70 	bl	8001be4 <printf>
			break;
 8002104:	bf00      	nop
		}
	}
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	08005d38 	.word	0x08005d38
 8002110:	08005d5c 	.word	0x08005d5c

08002114 <printPrompt>:

/*
 * This function prints Available User Commands.
 */
void printPrompt(){
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	printf("%s\n\r", "***REMOTE LED CONTROL MENU***");
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <printPrompt+0x38>)
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <printPrompt+0x3c>)
 800211c:	f7ff fd62 	bl	8001be4 <printf>
	printf("%s\n\r", "Available User Commands");
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <printPrompt+0x40>)
 8002122:	480b      	ldr	r0, [pc, #44]	; (8002150 <printPrompt+0x3c>)
 8002124:	f7ff fd5e 	bl	8001be4 <printf>
	printf("%s\n\r", "NEXT - Show the next song info");
 8002128:	490b      	ldr	r1, [pc, #44]	; (8002158 <printPrompt+0x44>)
 800212a:	4809      	ldr	r0, [pc, #36]	; (8002150 <printPrompt+0x3c>)
 800212c:	f7ff fd5a 	bl	8001be4 <printf>
	printf("%s\n\r", "PLAY - Play the song (LED on)");
 8002130:	490a      	ldr	r1, [pc, #40]	; (800215c <printPrompt+0x48>)
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <printPrompt+0x3c>)
 8002134:	f7ff fd56 	bl	8001be4 <printf>
	printf("%s\n\r", "PAUSE - Pause the song (LED flash)");
 8002138:	4909      	ldr	r1, [pc, #36]	; (8002160 <printPrompt+0x4c>)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <printPrompt+0x3c>)
 800213c:	f7ff fd52 	bl	8001be4 <printf>
	printf("%s\n\r", "STOP - Stop the song (LED off)");
 8002140:	4908      	ldr	r1, [pc, #32]	; (8002164 <printPrompt+0x50>)
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <printPrompt+0x3c>)
 8002144:	f7ff fd4e 	bl	8001be4 <printf>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	08005d78 	.word	0x08005d78
 8002150:	08005d98 	.word	0x08005d98
 8002154:	08005da0 	.word	0x08005da0
 8002158:	08005db8 	.word	0x08005db8
 800215c:	08005dd8 	.word	0x08005dd8
 8002160:	08005df8 	.word	0x08005df8
 8002164:	08005e1c 	.word	0x08005e1c

08002168 <printInvalidCmd>:

/*
 * This function prints the invalid command message.
 */
void printInvalidCmd(){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	printf("Invalid command, try using 'HELP'\n\r");
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <printInvalidCmd+0x10>)
 800216e:	f7ff fd39 	bl	8001be4 <printf>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	08005e3c 	.word	0x08005e3c

0800217c <printMetaEvent>:
/*
 * This function parses the current song for meta-events
 * the type is passed in as a parameter. It prints out the
 * info associated with the type.
 */
int printMetaEvent(song piece, unsigned char type) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	e883 0003 	stmia.w	r3, {r0, r1}
 800218a:	4613      	mov	r3, r2
 800218c:	71fb      	strb	r3, [r7, #7]
	int i = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
	int song_length = piece.size / sizeof(unsigned char);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	61fb      	str	r3, [r7, #28]

	while(i < song_length){
 8002196:	e044      	b.n	8002222 <printMetaEvent+0xa6>
		unsigned char byte = piece.p_song[i];
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	76fb      	strb	r3, [r7, #27]
		if(byte == 0xff && piece.p_song[i+1] == type){ // If the matching type is found
 80021a2:	7efb      	ldrb	r3, [r7, #27]
 80021a4:	2bff      	cmp	r3, #255	; 0xff
 80021a6:	d139      	bne.n	800221c <printMetaEvent+0xa0>
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	3301      	adds	r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	79fa      	ldrb	r2, [r7, #7]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d131      	bne.n	800221c <printMetaEvent+0xa0>
			i += 2; // Skip the next two bytes (type)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3302      	adds	r3, #2
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
			unsigned char length = piece.p_song[i];
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	76bb      	strb	r3, [r7, #26]
			i++; // Skip the next byte (length)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	3301      	adds	r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
			if(type == 0x51){// If the type is tempo it cannot be displayed by printing out byte by byte.
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b51      	cmp	r3, #81	; 0x51
 80021d2:	d10b      	bne.n	80021ec <printMetaEvent+0x70>
				uint32_t tempo = convert_to_uint24 (piece.p_song + i);
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	4413      	add	r3, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff1e 	bl	800201c <convert_to_uint24>
 80021e0:	6178      	str	r0, [r7, #20]
				printf("%ld (\xE6sec/quarter note)", tempo);
 80021e2:	6979      	ldr	r1, [r7, #20]
 80021e4:	4815      	ldr	r0, [pc, #84]	; (800223c <printMetaEvent+0xc0>)
 80021e6:	f7ff fcfd 	bl	8001be4 <printf>
 80021ea:	e012      	b.n	8002212 <printMetaEvent+0x96>
			}
			else{
				for(int j = 0; j < length; j++) // Print out each byte in the meta event.
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	e00b      	b.n	800220a <printMetaEvent+0x8e>
					putchar(piece.p_song[i + j]);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f6:	6a3a      	ldr	r2, [r7, #32]
 80021f8:	440a      	add	r2, r1
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fcd8 	bl	8001bb4 <putchar>
				for(int j = 0; j < length; j++) // Print out each byte in the meta event.
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	3301      	adds	r3, #1
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	7ebb      	ldrb	r3, [r7, #26]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	429a      	cmp	r2, r3
 8002210:	dbef      	blt.n	80021f2 <printMetaEvent+0x76>
			}
			printf("\n\r");
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <printMetaEvent+0xc4>)
 8002214:	f7ff fce6 	bl	8001be4 <printf>
			return 1;
 8002218:	2301      	movs	r3, #1
 800221a:	e00a      	b.n	8002232 <printMetaEvent+0xb6>
		}
		i++;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	3301      	adds	r3, #1
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
	while(i < song_length){
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	429a      	cmp	r2, r3
 8002228:	dbb6      	blt.n	8002198 <printMetaEvent+0x1c>
	}
	printf("none\n\r");
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <printMetaEvent+0xc8>)
 800222c:	f7ff fcda 	bl	8001be4 <printf>
	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	08005e60 	.word	0x08005e60
 8002240:	08005e78 	.word	0x08005e78
 8002244:	08005e7c 	.word	0x08005e7c

08002248 <printSong>:

/*
 * This function prints out the current song's title, copyright, and tempo.
 */
void printSong(){
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
	uint8_t curr_song = getCurrentSong();
 800224e:	f7fe fd29 	bl	8000ca4 <getCurrentSong>
 8002252:	4603      	mov	r3, r0
 8002254:	73fb      	strb	r3, [r7, #15]
	song piece = get_song(curr_song);
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fae9 	bl	8001834 <get_song>
	printf("Song %d\n\rtitle: ", curr_song);
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4619      	mov	r1, r3
 8002266:	480f      	ldr	r0, [pc, #60]	; (80022a4 <printSong+0x5c>)
 8002268:	f7ff fcbc 	bl	8001be4 <printf>
	printMetaEvent(piece, 0x03);
 800226c:	2203      	movs	r2, #3
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002274:	f7ff ff82 	bl	800217c <printMetaEvent>
	printf("copyright: ");
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <printSong+0x60>)
 800227a:	f7ff fcb3 	bl	8001be4 <printf>
	printMetaEvent(piece, 0x02);
 800227e:	2202      	movs	r2, #2
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002286:	f7ff ff79 	bl	800217c <printMetaEvent>
	printf("tempo: ");
 800228a:	4808      	ldr	r0, [pc, #32]	; (80022ac <printSong+0x64>)
 800228c:	f7ff fcaa 	bl	8001be4 <printf>
	printMetaEvent(piece, 0x51);
 8002290:	2251      	movs	r2, #81	; 0x51
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002298:	f7ff ff70 	bl	800217c <printMetaEvent>
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	08005e84 	.word	0x08005e84
 80022a8:	08005e98 	.word	0x08005e98
 80022ac:	08005ea4 	.word	0x08005ea4

080022b0 <getTiming>:

int getMaxNotes(){
	return MAX_NOTE_EVENTS;
}

uint32_t* getTiming(){
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return NOTE_TIMING;
 80022b4:	4b02      	ldr	r3, [pc, #8]	; (80022c0 <getTiming+0x10>)
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20008038 	.word	0x20008038

080022c4 <getSongInfo>:

tone_info* getSongInfo(){
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	return NOTE_INFO;
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <getSongInfo+0x10>)
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	20008358 	.word	0x20008358

080022d8 <getNoteOnEvent>:

int* getNoteOnEvent(){
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
	return NOTE_ON_EVENT;
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <getNoteOnEvent+0x10>)
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20008998 	.word	0x20008998

080022ec <getNumNotes>:

int getNumNotes(){
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	return NUM_NOTE_EVENTS;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <getNumNotes+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20008cb8 	.word	0x20008cb8

08002304 <song_init>:

/*
 * Initializes all note event info to 0.
 */
void song_init(){
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
	for(int i = 0; i < (MAX_NOTE_EVENTS*2); i++){
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e017      	b.n	8002340 <song_init+0x3c>
		NOTE_TIMING[i] = 0;
 8002310:	4a12      	ldr	r2, [pc, #72]	; (800235c <song_init+0x58>)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2100      	movs	r1, #0
 8002316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NOTE_INFO[i] = (tone_info){0,0};
 800231a:	4a11      	ldr	r2, [pc, #68]	; (8002360 <song_init+0x5c>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2100      	movs	r1, #0
 8002320:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <song_init+0x5c>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	2200      	movs	r2, #0
 800232e:	809a      	strh	r2, [r3, #4]
		NOTE_ON_EVENT[i] = 0;
 8002330:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <song_init+0x60>)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2100      	movs	r1, #0
 8002336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < (MAX_NOTE_EVENTS*2); i++){
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3301      	adds	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002346:	dbe3      	blt.n	8002310 <song_init+0xc>
	}
	NUM_NOTE_EVENTS = 0;
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <song_init+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20008038 	.word	0x20008038
 8002360:	20008358 	.word	0x20008358
 8002364:	20008998 	.word	0x20008998
 8002368:	20008cb8 	.word	0x20008cb8

0800236c <parseSong>:
 * 	NOTE_TIMING - An array that holds the start time of every note event in microseconds.
 * 	NOTE_INFO - An array that holds the key and velocity of all note events.
 * 	NOTE_ON_EVENT - An array that holds whether a note event is of type ON or OFF.
 * 	NUM_NOTE_EVENTS - The number of note events in a song.
 */
void parseSong(uint8_t song_number){
 800236c:	b580      	push	{r7, lr}
 800236e:	b092      	sub	sp, #72	; 0x48
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
	song piece = get_song(song_number);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fa58 	bl	8001834 <get_song>

	// Get header info
	int header_length = 14; // A chunk with a length of 6 occupies 14 bytes.
 8002384:	230e      	movs	r3, #14
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
	header* ptr_head = getHeader(song_number);
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff f9c2 	bl	8001714 <getHeader>
 8002390:	6378      	str	r0, [r7, #52]	; 0x34
	uint16_t division = getDivision(ptr_head);
 8002392:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002394:	f7ff f9e8 	bl	8001768 <getDivision>
 8002398:	4603      	mov	r3, r0
 800239a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t tracks = getTracks(ptr_head);
 800239c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800239e:	f7ff f9d5 	bl	800174c <getTracks>
 80023a2:	4603      	mov	r3, r0
 80023a4:	863b      	strh	r3, [r7, #48]	; 0x30

	// Get tick info
	uint32_t tempo = getTempo(piece);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023ae:	f000 f98a 	bl	80026c6 <getTempo>
 80023b2:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t microseconds_in_a_midi_tick = tempo / division;
 80023b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80023b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28

	int i = header_length; // Index for song info
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	647b      	str	r3, [r7, #68]	; 0x44

	// Iterate over each track after header
	for (int k = 0; k < tracks; k++){
 80023c2:	2300      	movs	r3, #0
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
 80023c6:	e03e      	b.n	8002446 <parseSong+0xda>
		i += 4; // Skip Track Chunk Bytes 0x4d,0x54,0x72,0x6b
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	3304      	adds	r3, #4
 80023cc:	647b      	str	r3, [r7, #68]	; 0x44

		uint32_t chunk_length = convert_to_uint32(&piece.p_song[i]);
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d2:	4413      	add	r3, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe53 	bl	8002080 <convert_to_uint32>
 80023da:	6278      	str	r0, [r7, #36]	; 0x24
		i += 4; // Each chunk has a 32-bit length, skip ahead.
 80023dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023de:	3304      	adds	r3, #4
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44

		int j = i; // New index for parsing individual chunks.
 80023e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(j < (i + chunk_length)){ // Iterate through events in chuck.
 80023e6:	e023      	b.n	8002430 <parseSong+0xc4>
			// Get event delay
			var_len_quantity delay_result = parse_var_len(piece.p_song, j);
 80023e8:	6979      	ldr	r1, [r7, #20]
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f837 	bl	8002464 <parse_var_len>
			uint32_t delay = delay_result.value;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	623b      	str	r3, [r7, #32]
			j = delay_result.index; // Move to start of event type
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	63fb      	str	r3, [r7, #60]	; 0x3c

			uint32_t microseconds_in_delay = delay * microseconds_in_a_midi_tick; // The amount of time before the following event.
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	61fb      	str	r3, [r7, #28]

			if(piece.p_song[j] == META_EVENT){
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240c:	4413      	add	r3, r2
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2bff      	cmp	r3, #255	; 0xff
 8002412:	d106      	bne.n	8002422 <parseSong+0xb6>
				j = skipMetaEvent(piece.p_song, j); // Skip all meta event and update pointer to end of event.
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f921 	bl	8002660 <skipMetaEvent>
 800241e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002420:	e006      	b.n	8002430 <parseSong+0xc4>
			}
			else{
				j = filterMidiEvent(piece.p_song, j, microseconds_in_delay); // Handle MIDI event and updates j pointer to end of event.
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f851 	bl	80024d0 <filterMidiEvent>
 800242e:	63f8      	str	r0, [r7, #60]	; 0x3c
		while(j < (i + chunk_length)){ // Iterate through events in chuck.
 8002430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	441a      	add	r2, r3
 8002436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002438:	429a      	cmp	r2, r3
 800243a:	d8d5      	bhi.n	80023e8 <parseSong+0x7c>
			}

		}
		i = j; // Update i pointer to j pointer (end of event)
 800243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243e:	647b      	str	r3, [r7, #68]	; 0x44
	for (int k = 0; k < tracks; k++){
 8002440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002442:	3301      	adds	r3, #1
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
 8002446:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800244a:	429a      	cmp	r2, r3
 800244c:	dbbc      	blt.n	80023c8 <parseSong+0x5c>

	}

	printf("Song #%d Loaded.\n\r", song_number);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4619      	mov	r1, r3
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <parseSong+0xf4>)
 8002454:	f7ff fbc6 	bl	8001be4 <printf>
}
 8002458:	bf00      	nop
 800245a:	3748      	adds	r7, #72	; 0x48
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	08005eec 	.word	0x08005eec

08002464 <parse_var_len>:
/*
 * Parses a MIDI variable length quantity where the first bit of 8 is
 * a continuation bit and the 7 others are data. Returns a var_len_quantity
 * struct that holds the data and the index after the quantity in the given array.
 */
var_len_quantity parse_var_len(uint8_t* quantity, int index) {
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
    uint8_t curr = quantity [index];
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	77fb      	strb	r3, [r7, #31]
    uint32_t parsed_quantity = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
    while (curr >> 7) {
 800247e:	e00e      	b.n	800249e <parse_var_len+0x3a>
        parsed_quantity += (curr & 0x7F) << 7;
 8002480:	7ffb      	ldrb	r3, [r7, #31]
 8002482:	01db      	lsls	r3, r3, #7
 8002484:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        curr = quantity [++index];
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3301      	adds	r3, #1
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	77fb      	strb	r3, [r7, #31]
    while (curr >> 7) {
 800249e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	dbec      	blt.n	8002480 <parse_var_len+0x1c>
    }
    parsed_quantity += curr & 0x7F;
 80024a6:	7ffb      	ldrb	r3, [r7, #31]
 80024a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
    index++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3301      	adds	r3, #1
 80024b6:	607b      	str	r3, [r7, #4]

    return (var_len_quantity){parsed_quantity, index};
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]
}
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	3724      	adds	r7, #36	; 0x24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <filterMidiEvent>:

/*
 * Parses MIDI events for note ON and OFF events and updates
 * NOTE_TIMING, NOTE_INFO, NOTE_ON_EVENT, and NUM_NOTE_EVENTS.
 */
int filterMidiEvent(uint8_t* song, int index, uint32_t delay){
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b08b      	sub	sp, #44	; 0x2c
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
	uint8_t type = (song[index] >> 4); // Look at status bits
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (type){
 80024ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ee:	3b08      	subs	r3, #8
 80024f0:	2b07      	cmp	r3, #7
 80024f2:	f200 80a7 	bhi.w	8002644 <filterMidiEvent+0x174>
 80024f6:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <filterMidiEvent+0x2c>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	0800251d 	.word	0x0800251d
 8002500:	08002593 	.word	0x08002593
 8002504:	08002609 	.word	0x08002609
 8002508:	08002613 	.word	0x08002613
 800250c:	0800261d 	.word	0x0800261d
 8002510:	08002627 	.word	0x08002627
 8002514:	08002631 	.word	0x08002631
 8002518:	0800263b 	.word	0x0800263b
		case NOTE_OFF:{
			index++; // Skip status and channel number byte
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3301      	adds	r3, #1
 8002520:	60bb      	str	r3, [r7, #8]
			uint8_t key = song[index];
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			index++; // Skip key
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
			uint8_t velocity = song[index];
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			index++; // Skip velocity
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	3301      	adds	r3, #1
 8002544:	60bb      	str	r3, [r7, #8]

			NOTE_TIMING[NUM_NOTE_EVENTS] = delay;
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <filterMidiEvent+0x180>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4942      	ldr	r1, [pc, #264]	; (8002654 <filterMidiEvent+0x184>)
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			NOTE_INFO[NUM_NOTE_EVENTS] = (tone_info){key_to_duration(key), velocity};
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <filterMidiEvent+0x180>)
 8002554:	681c      	ldr	r4, [r3, #0]
 8002556:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f9b8 	bl	80018d0 <key_to_duration>
 8002560:	4603      	mov	r3, r0
 8002562:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002566:	b291      	uxth	r1, r2
 8002568:	4a3b      	ldr	r2, [pc, #236]	; (8002658 <filterMidiEvent+0x188>)
 800256a:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
 800256e:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <filterMidiEvent+0x188>)
 8002570:	00e3      	lsls	r3, r4, #3
 8002572:	4413      	add	r3, r2
 8002574:	460a      	mov	r2, r1
 8002576:	809a      	strh	r2, [r3, #4]
			NOTE_ON_EVENT[NUM_NOTE_EVENTS] = 0;
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <filterMidiEvent+0x180>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a37      	ldr	r2, [pc, #220]	; (800265c <filterMidiEvent+0x18c>)
 800257e:	2100      	movs	r1, #0
 8002580:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NUM_NOTE_EVENTS++; // Increase number of note events.
 8002584:	4b32      	ldr	r3, [pc, #200]	; (8002650 <filterMidiEvent+0x180>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a31      	ldr	r2, [pc, #196]	; (8002650 <filterMidiEvent+0x180>)
 800258c:	6013      	str	r3, [r2, #0]
			return index;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	e059      	b.n	8002646 <filterMidiEvent+0x176>
		}
		case NOTE_ON:{
			index++; // Skip status and channel number byte
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
			uint8_t key = song[index];
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			index++; // Skip key
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
			uint8_t velocity = song[index];
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			index++; // Skip velocity
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]

			NOTE_TIMING[NUM_NOTE_EVENTS] = delay;
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <filterMidiEvent+0x180>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4924      	ldr	r1, [pc, #144]	; (8002654 <filterMidiEvent+0x184>)
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			NOTE_INFO[NUM_NOTE_EVENTS] = (tone_info){key_to_duration(key), velocity};
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <filterMidiEvent+0x180>)
 80025ca:	681c      	ldr	r4, [r3, #0]
 80025cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f97d 	bl	80018d0 <key_to_duration>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80025dc:	b291      	uxth	r1, r2
 80025de:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <filterMidiEvent+0x188>)
 80025e0:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <filterMidiEvent+0x188>)
 80025e6:	00e3      	lsls	r3, r4, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	460a      	mov	r2, r1
 80025ec:	809a      	strh	r2, [r3, #4]
			NOTE_ON_EVENT[NUM_NOTE_EVENTS] = 1;
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <filterMidiEvent+0x180>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <filterMidiEvent+0x18c>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NUM_NOTE_EVENTS++; // Increase number of note events.
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <filterMidiEvent+0x180>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a13      	ldr	r2, [pc, #76]	; (8002650 <filterMidiEvent+0x180>)
 8002602:	6013      	str	r3, [r2, #0]
			return index;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	e01e      	b.n	8002646 <filterMidiEvent+0x176>
		}
		case KEY_PRESSURE:{
			return skipThreeByteEvent(index);
 8002608:	68b8      	ldr	r0, [r7, #8]
 800260a:	f000 f840 	bl	800268e <skipThreeByteEvent>
 800260e:	4603      	mov	r3, r0
 8002610:	e019      	b.n	8002646 <filterMidiEvent+0x176>
		}
		case CONTROL_CHANGE:{
			return skipThreeByteEvent(index);
 8002612:	68b8      	ldr	r0, [r7, #8]
 8002614:	f000 f83b 	bl	800268e <skipThreeByteEvent>
 8002618:	4603      	mov	r3, r0
 800261a:	e014      	b.n	8002646 <filterMidiEvent+0x176>
		}
		case PROGRAM_CHANGE:{
			return skipTwoByteEvent(index);
 800261c:	68b8      	ldr	r0, [r7, #8]
 800261e:	f000 f844 	bl	80026aa <skipTwoByteEvent>
 8002622:	4603      	mov	r3, r0
 8002624:	e00f      	b.n	8002646 <filterMidiEvent+0x176>
		}
		case CHANNEL_PRESSURE:{
			return skipTwoByteEvent(index);
 8002626:	68b8      	ldr	r0, [r7, #8]
 8002628:	f000 f83f 	bl	80026aa <skipTwoByteEvent>
 800262c:	4603      	mov	r3, r0
 800262e:	e00a      	b.n	8002646 <filterMidiEvent+0x176>
		}
		case PITCH_WHEEL:{
			return skipThreeByteEvent(index);
 8002630:	68b8      	ldr	r0, [r7, #8]
 8002632:	f000 f82c 	bl	800268e <skipThreeByteEvent>
 8002636:	4603      	mov	r3, r0
 8002638:	e005      	b.n	8002646 <filterMidiEvent+0x176>
		}
		case SYS_EXCLUSIVE:{
			return skipThreeByteEvent(index);
 800263a:	68b8      	ldr	r0, [r7, #8]
 800263c:	f000 f827 	bl	800268e <skipThreeByteEvent>
 8002640:	4603      	mov	r3, r0
 8002642:	e000      	b.n	8002646 <filterMidiEvent+0x176>
		}
		default:
			return 0;
 8002644:	2300      	movs	r3, #0
	}
}
 8002646:	4618      	mov	r0, r3
 8002648:	372c      	adds	r7, #44	; 0x2c
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	20008cb8 	.word	0x20008cb8
 8002654:	20008038 	.word	0x20008038
 8002658:	20008358 	.word	0x20008358
 800265c:	20008998 	.word	0x20008998

08002660 <skipMetaEvent>:

int skipMetaEvent(uint8_t* song, int index){
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	index += 2; // Skip 0xff and event type
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	3302      	adds	r3, #2
 800266e:	603b      	str	r3, [r7, #0]

	var_len_quantity event_len_result = parse_var_len(song, index);
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fef3 	bl	8002464 <parse_var_len>

	// Update index to end of event by adding the length of the event to the index where the length ends.
	return event_len_result.index + event_len_result.value;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4413      	add	r3, r2
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <skipThreeByteEvent>:

int skipThreeByteEvent(int index){
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	return index += 3;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3303      	adds	r3, #3
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <skipTwoByteEvent>:

int skipTwoByteEvent(int index){
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	return index += 2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3302      	adds	r3, #2
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <getTempo>:

/*
 * Parses song data for tempo.
 */
uint32_t getTempo(song piece) {
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	463b      	mov	r3, r7
 80026ce:	e883 0003 	stmia.w	r3, {r0, r1}
	int i = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
	int song_length = piece.size / sizeof(unsigned char);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	613b      	str	r3, [r7, #16]

	while((i + 1) < song_length){
 80026da:	e01c      	b.n	8002716 <getTempo+0x50>
		unsigned char byte = piece.p_song[i];
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	73fb      	strb	r3, [r7, #15]
		if(byte == 0xff && piece.p_song[i+1] == TEMPO){
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2bff      	cmp	r3, #255	; 0xff
 80026ea:	d111      	bne.n	8002710 <getTempo+0x4a>
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b51      	cmp	r3, #81	; 0x51
 80026f8:	d10a      	bne.n	8002710 <getTempo+0x4a>
			i += 3; // Skip 0xff, event type, and length
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3303      	adds	r3, #3
 80026fe:	617b      	str	r3, [r7, #20]
			return convert_to_uint24 (piece.p_song + i);
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	4413      	add	r3, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc88 	bl	800201c <convert_to_uint24>
 800270c:	4603      	mov	r3, r0
 800270e:	e008      	b.n	8002722 <getTempo+0x5c>
		}
		i++;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
	while((i + 1) < song_length){
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	dcdd      	bgt.n	80026dc <getTempo+0x16>
	}
	return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff fb3a 	bl	8001da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490d      	ldr	r1, [pc, #52]	; (800276c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0a      	ldr	r4, [pc, #40]	; (8002778 <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f001 f9df 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800275e:	f7fe ffc3 	bl	80016e8 <main>

08002762 <LoopForever>:

LoopForever:
    b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002764:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	20007ed4 	.word	0x20007ed4
  ldr r2, =_sidata
 8002770:	0800627c 	.word	0x0800627c
  ldr r2, =_sbss
 8002774:	20007ed4 	.word	0x20007ed4
  ldr r4, =_ebss
 8002778:	20008e0c 	.word	0x20008e0c

0800277c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC1_2_IRQHandler>
	...

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20008cbc 	.word	0x20008cbc

08002798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff ffee 	bl	8002780 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d005      	beq.n	80027be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_Delay+0x44>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027be:	bf00      	nop
 80027c0:	f7ff ffde 	bl	8002780 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <HAL_Delay+0x28>
  {
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20007d08 	.word	0x20007d08

080027e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e014      	b.n	800281c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	791b      	ldrb	r3, [r3, #4]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fee6 	bl	80015d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	795b      	ldrb	r3, [r3, #5]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_DAC_Start+0x16>
 8002836:	2302      	movs	r3, #2
 8002838:	e03b      	b.n	80028b2 <HAL_DAC_Start+0x8e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800286e:	2b04      	cmp	r3, #4
 8002870:	d118      	bne.n	80028a4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	e00f      	b.n	80028a4 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800288e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002892:	d107      	bne.n	80028a4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0202 	orr.w	r2, r2, #2
 80028a2:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80028be:	b480      	push	{r7}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	3308      	adds	r3, #8
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e004      	b.n	80028f2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	3314      	adds	r3, #20
 80028f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	461a      	mov	r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	795b      	ldrb	r3, [r3, #5]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_DAC_ConfigChannel+0x1c>
 8002920:	2302      	movs	r3, #2
 8002922:	e107      	b.n	8002b34 <HAL_DAC_ConfigChannel+0x22c>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2202      	movs	r2, #2
 800292e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d174      	bne.n	8002a22 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002938:	f7ff ff22 	bl	8002780 <HAL_GetTick>
 800293c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d134      	bne.n	80029ae <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002944:	e011      	b.n	800296a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002946:	f7ff ff1b 	bl	8002780 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d90a      	bls.n	800296a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f043 0208 	orr.w	r2, r3, #8
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2203      	movs	r2, #3
 8002964:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0e4      	b.n	8002b34 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e6      	bne.n	8002946 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002978:	2001      	movs	r0, #1
 800297a:	f7ff ff0d 	bl	8002798 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	6992      	ldr	r2, [r2, #24]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
 8002988:	e01e      	b.n	80029c8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800298a:	f7ff fef9 	bl	8002780 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d90a      	bls.n	80029ae <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f043 0208 	orr.w	r2, r3, #8
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2203      	movs	r2, #3
 80029a8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e0c2      	b.n	8002b34 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	dbe8      	blt.n	800298a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80029b8:	2001      	movs	r0, #1
 80029ba:	f7ff feed 	bl	8002798 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	6992      	ldr	r2, [r2, #24]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	ea02 0103 	and.w	r1, r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	21ff      	movs	r1, #255	; 0xff
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	ea02 0103 	and.w	r1, r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d11d      	bne.n	8002a66 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	221f      	movs	r2, #31
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2207      	movs	r2, #7
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	400a      	ands	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	22c0      	movs	r2, #192	; 0xc0
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	400a      	ands	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4a:	e17f      	b.n	8002e4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8171 	beq.w	8002e46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d005      	beq.n	8002b7c <HAL_GPIO_Init+0x40>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d130      	bne.n	8002bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f003 0201 	and.w	r2, r3, #1
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d118      	bne.n	8002c1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	08db      	lsrs	r3, r3, #3
 8002c06:	f003 0201 	and.w	r2, r3, #1
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d017      	beq.n	8002c58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d123      	bne.n	8002cac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	6939      	ldr	r1, [r7, #16]
 8002ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0203 	and.w	r2, r3, #3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80ac 	beq.w	8002e46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_GPIO_Init+0x330>)
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_GPIO_Init+0x330>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <HAL_GPIO_Init+0x330>)
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d06:	4a5a      	ldr	r2, [pc, #360]	; (8002e70 <HAL_GPIO_Init+0x334>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x242>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4f      	ldr	r2, [pc, #316]	; (8002e74 <HAL_GPIO_Init+0x338>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x23e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4e      	ldr	r2, [pc, #312]	; (8002e78 <HAL_GPIO_Init+0x33c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x23a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4d      	ldr	r2, [pc, #308]	; (8002e7c <HAL_GPIO_Init+0x340>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x236>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4c      	ldr	r2, [pc, #304]	; (8002e80 <HAL_GPIO_Init+0x344>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x232>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4b      	ldr	r2, [pc, #300]	; (8002e84 <HAL_GPIO_Init+0x348>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x22e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_GPIO_Init+0x34c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x22a>
 8002d62:	2306      	movs	r3, #6
 8002d64:	e00c      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e00a      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	e008      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x244>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	f002 0203 	and.w	r2, r2, #3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d90:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_GPIO_Init+0x334>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dc8:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e40:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <HAL_GPIO_Init+0x350>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa22 f303 	lsr.w	r3, r2, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f47f ae78 	bne.w	8002b4c <HAL_GPIO_Init+0x10>
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40010000 	.word	0x40010000
 8002e74:	48000400 	.word	0x48000400
 8002e78:	48000800 	.word	0x48000800
 8002e7c:	48000c00 	.word	0x48000c00
 8002e80:	48001000 	.word	0x48001000
 8002e84:	48001400 	.word	0x48001400
 8002e88:	48001800 	.word	0x48001800
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	e001      	b.n	8002eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f806 	bl	8002ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010400 	.word	0x40010400

08002ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <__cvt>:
 8002f06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0a:	ec55 4b10 	vmov	r4, r5, d0
 8002f0e:	2d00      	cmp	r5, #0
 8002f10:	460e      	mov	r6, r1
 8002f12:	4619      	mov	r1, r3
 8002f14:	462b      	mov	r3, r5
 8002f16:	bfbb      	ittet	lt
 8002f18:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002f1c:	461d      	movlt	r5, r3
 8002f1e:	2300      	movge	r3, #0
 8002f20:	232d      	movlt	r3, #45	; 0x2d
 8002f22:	700b      	strb	r3, [r1, #0]
 8002f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002f2a:	4691      	mov	r9, r2
 8002f2c:	f023 0820 	bic.w	r8, r3, #32
 8002f30:	bfbc      	itt	lt
 8002f32:	4622      	movlt	r2, r4
 8002f34:	4614      	movlt	r4, r2
 8002f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f3a:	d005      	beq.n	8002f48 <__cvt+0x42>
 8002f3c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002f40:	d100      	bne.n	8002f44 <__cvt+0x3e>
 8002f42:	3601      	adds	r6, #1
 8002f44:	2102      	movs	r1, #2
 8002f46:	e000      	b.n	8002f4a <__cvt+0x44>
 8002f48:	2103      	movs	r1, #3
 8002f4a:	ab03      	add	r3, sp, #12
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	ab02      	add	r3, sp, #8
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	ec45 4b10 	vmov	d0, r4, r5
 8002f56:	4653      	mov	r3, sl
 8002f58:	4632      	mov	r2, r6
 8002f5a:	f000 fe91 	bl	8003c80 <_dtoa_r>
 8002f5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f62:	4607      	mov	r7, r0
 8002f64:	d102      	bne.n	8002f6c <__cvt+0x66>
 8002f66:	f019 0f01 	tst.w	r9, #1
 8002f6a:	d022      	beq.n	8002fb2 <__cvt+0xac>
 8002f6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f70:	eb07 0906 	add.w	r9, r7, r6
 8002f74:	d110      	bne.n	8002f98 <__cvt+0x92>
 8002f76:	783b      	ldrb	r3, [r7, #0]
 8002f78:	2b30      	cmp	r3, #48	; 0x30
 8002f7a:	d10a      	bne.n	8002f92 <__cvt+0x8c>
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4620      	mov	r0, r4
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7fd fdb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f88:	b918      	cbnz	r0, 8002f92 <__cvt+0x8c>
 8002f8a:	f1c6 0601 	rsb	r6, r6, #1
 8002f8e:	f8ca 6000 	str.w	r6, [sl]
 8002f92:	f8da 3000 	ldr.w	r3, [sl]
 8002f96:	4499      	add	r9, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	f7fd fda2 	bl	8000ae8 <__aeabi_dcmpeq>
 8002fa4:	b108      	cbz	r0, 8002faa <__cvt+0xa4>
 8002fa6:	f8cd 900c 	str.w	r9, [sp, #12]
 8002faa:	2230      	movs	r2, #48	; 0x30
 8002fac:	9b03      	ldr	r3, [sp, #12]
 8002fae:	454b      	cmp	r3, r9
 8002fb0:	d307      	bcc.n	8002fc2 <__cvt+0xbc>
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fb6:	1bdb      	subs	r3, r3, r7
 8002fb8:	4638      	mov	r0, r7
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	b004      	add	sp, #16
 8002fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	9103      	str	r1, [sp, #12]
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e7f0      	b.n	8002fac <__cvt+0xa6>

08002fca <__exponent>:
 8002fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	bfb8      	it	lt
 8002fd2:	4249      	neglt	r1, r1
 8002fd4:	f803 2b02 	strb.w	r2, [r3], #2
 8002fd8:	bfb4      	ite	lt
 8002fda:	222d      	movlt	r2, #45	; 0x2d
 8002fdc:	222b      	movge	r2, #43	; 0x2b
 8002fde:	2909      	cmp	r1, #9
 8002fe0:	7042      	strb	r2, [r0, #1]
 8002fe2:	dd2a      	ble.n	800303a <__exponent+0x70>
 8002fe4:	f10d 0207 	add.w	r2, sp, #7
 8002fe8:	4617      	mov	r7, r2
 8002fea:	260a      	movs	r6, #10
 8002fec:	4694      	mov	ip, r2
 8002fee:	fb91 f5f6 	sdiv	r5, r1, r6
 8002ff2:	fb06 1415 	mls	r4, r6, r5, r1
 8002ff6:	3430      	adds	r4, #48	; 0x30
 8002ff8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	2c63      	cmp	r4, #99	; 0x63
 8003000:	f102 32ff 	add.w	r2, r2, #4294967295
 8003004:	4629      	mov	r1, r5
 8003006:	dcf1      	bgt.n	8002fec <__exponent+0x22>
 8003008:	3130      	adds	r1, #48	; 0x30
 800300a:	f1ac 0402 	sub.w	r4, ip, #2
 800300e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003012:	1c41      	adds	r1, r0, #1
 8003014:	4622      	mov	r2, r4
 8003016:	42ba      	cmp	r2, r7
 8003018:	d30a      	bcc.n	8003030 <__exponent+0x66>
 800301a:	f10d 0209 	add.w	r2, sp, #9
 800301e:	eba2 020c 	sub.w	r2, r2, ip
 8003022:	42bc      	cmp	r4, r7
 8003024:	bf88      	it	hi
 8003026:	2200      	movhi	r2, #0
 8003028:	4413      	add	r3, r2
 800302a:	1a18      	subs	r0, r3, r0
 800302c:	b003      	add	sp, #12
 800302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003030:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003034:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003038:	e7ed      	b.n	8003016 <__exponent+0x4c>
 800303a:	2330      	movs	r3, #48	; 0x30
 800303c:	3130      	adds	r1, #48	; 0x30
 800303e:	7083      	strb	r3, [r0, #2]
 8003040:	70c1      	strb	r1, [r0, #3]
 8003042:	1d03      	adds	r3, r0, #4
 8003044:	e7f1      	b.n	800302a <__exponent+0x60>
	...

08003048 <_printf_float>:
 8003048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304c:	ed2d 8b02 	vpush	{d8}
 8003050:	b08d      	sub	sp, #52	; 0x34
 8003052:	460c      	mov	r4, r1
 8003054:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003058:	4616      	mov	r6, r2
 800305a:	461f      	mov	r7, r3
 800305c:	4605      	mov	r5, r0
 800305e:	f000 fd0d 	bl	8003a7c <_localeconv_r>
 8003062:	f8d0 a000 	ldr.w	sl, [r0]
 8003066:	4650      	mov	r0, sl
 8003068:	f7fd f912 	bl	8000290 <strlen>
 800306c:	2300      	movs	r3, #0
 800306e:	930a      	str	r3, [sp, #40]	; 0x28
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	9305      	str	r3, [sp, #20]
 8003074:	f8d8 3000 	ldr.w	r3, [r8]
 8003078:	f894 b018 	ldrb.w	fp, [r4, #24]
 800307c:	3307      	adds	r3, #7
 800307e:	f023 0307 	bic.w	r3, r3, #7
 8003082:	f103 0208 	add.w	r2, r3, #8
 8003086:	f8c8 2000 	str.w	r2, [r8]
 800308a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800308e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003092:	9307      	str	r3, [sp, #28]
 8003094:	f8cd 8018 	str.w	r8, [sp, #24]
 8003098:	ee08 0a10 	vmov	s16, r0
 800309c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80030a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030a4:	4b9e      	ldr	r3, [pc, #632]	; (8003320 <_printf_float+0x2d8>)
 80030a6:	f04f 32ff 	mov.w	r2, #4294967295
 80030aa:	f7fd fd4f 	bl	8000b4c <__aeabi_dcmpun>
 80030ae:	bb88      	cbnz	r0, 8003114 <_printf_float+0xcc>
 80030b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <_printf_float+0x2d8>)
 80030b6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ba:	f7fd fd29 	bl	8000b10 <__aeabi_dcmple>
 80030be:	bb48      	cbnz	r0, 8003114 <_printf_float+0xcc>
 80030c0:	2200      	movs	r2, #0
 80030c2:	2300      	movs	r3, #0
 80030c4:	4640      	mov	r0, r8
 80030c6:	4649      	mov	r1, r9
 80030c8:	f7fd fd18 	bl	8000afc <__aeabi_dcmplt>
 80030cc:	b110      	cbz	r0, 80030d4 <_printf_float+0x8c>
 80030ce:	232d      	movs	r3, #45	; 0x2d
 80030d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030d4:	4a93      	ldr	r2, [pc, #588]	; (8003324 <_printf_float+0x2dc>)
 80030d6:	4b94      	ldr	r3, [pc, #592]	; (8003328 <_printf_float+0x2e0>)
 80030d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80030dc:	bf94      	ite	ls
 80030de:	4690      	movls	r8, r2
 80030e0:	4698      	movhi	r8, r3
 80030e2:	2303      	movs	r3, #3
 80030e4:	6123      	str	r3, [r4, #16]
 80030e6:	9b05      	ldr	r3, [sp, #20]
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	f04f 0900 	mov.w	r9, #0
 80030f2:	9700      	str	r7, [sp, #0]
 80030f4:	4633      	mov	r3, r6
 80030f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80030f8:	4621      	mov	r1, r4
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f9da 	bl	80034b4 <_printf_common>
 8003100:	3001      	adds	r0, #1
 8003102:	f040 8090 	bne.w	8003226 <_printf_float+0x1de>
 8003106:	f04f 30ff 	mov.w	r0, #4294967295
 800310a:	b00d      	add	sp, #52	; 0x34
 800310c:	ecbd 8b02 	vpop	{d8}
 8003110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003114:	4642      	mov	r2, r8
 8003116:	464b      	mov	r3, r9
 8003118:	4640      	mov	r0, r8
 800311a:	4649      	mov	r1, r9
 800311c:	f7fd fd16 	bl	8000b4c <__aeabi_dcmpun>
 8003120:	b140      	cbz	r0, 8003134 <_printf_float+0xec>
 8003122:	464b      	mov	r3, r9
 8003124:	2b00      	cmp	r3, #0
 8003126:	bfbc      	itt	lt
 8003128:	232d      	movlt	r3, #45	; 0x2d
 800312a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800312e:	4a7f      	ldr	r2, [pc, #508]	; (800332c <_printf_float+0x2e4>)
 8003130:	4b7f      	ldr	r3, [pc, #508]	; (8003330 <_printf_float+0x2e8>)
 8003132:	e7d1      	b.n	80030d8 <_printf_float+0x90>
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800313a:	9206      	str	r2, [sp, #24]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	d13f      	bne.n	80031c0 <_printf_float+0x178>
 8003140:	2306      	movs	r3, #6
 8003142:	6063      	str	r3, [r4, #4]
 8003144:	9b05      	ldr	r3, [sp, #20]
 8003146:	6861      	ldr	r1, [r4, #4]
 8003148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800314c:	2300      	movs	r3, #0
 800314e:	9303      	str	r3, [sp, #12]
 8003150:	ab0a      	add	r3, sp, #40	; 0x28
 8003152:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003156:	ab09      	add	r3, sp, #36	; 0x24
 8003158:	ec49 8b10 	vmov	d0, r8, r9
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6022      	str	r2, [r4, #0]
 8003160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003164:	4628      	mov	r0, r5
 8003166:	f7ff fece 	bl	8002f06 <__cvt>
 800316a:	9b06      	ldr	r3, [sp, #24]
 800316c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800316e:	2b47      	cmp	r3, #71	; 0x47
 8003170:	4680      	mov	r8, r0
 8003172:	d108      	bne.n	8003186 <_printf_float+0x13e>
 8003174:	1cc8      	adds	r0, r1, #3
 8003176:	db02      	blt.n	800317e <_printf_float+0x136>
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	4299      	cmp	r1, r3
 800317c:	dd41      	ble.n	8003202 <_printf_float+0x1ba>
 800317e:	f1ab 0302 	sub.w	r3, fp, #2
 8003182:	fa5f fb83 	uxtb.w	fp, r3
 8003186:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800318a:	d820      	bhi.n	80031ce <_printf_float+0x186>
 800318c:	3901      	subs	r1, #1
 800318e:	465a      	mov	r2, fp
 8003190:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003194:	9109      	str	r1, [sp, #36]	; 0x24
 8003196:	f7ff ff18 	bl	8002fca <__exponent>
 800319a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800319c:	1813      	adds	r3, r2, r0
 800319e:	2a01      	cmp	r2, #1
 80031a0:	4681      	mov	r9, r0
 80031a2:	6123      	str	r3, [r4, #16]
 80031a4:	dc02      	bgt.n	80031ac <_printf_float+0x164>
 80031a6:	6822      	ldr	r2, [r4, #0]
 80031a8:	07d2      	lsls	r2, r2, #31
 80031aa:	d501      	bpl.n	80031b0 <_printf_float+0x168>
 80031ac:	3301      	adds	r3, #1
 80031ae:	6123      	str	r3, [r4, #16]
 80031b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d09c      	beq.n	80030f2 <_printf_float+0xaa>
 80031b8:	232d      	movs	r3, #45	; 0x2d
 80031ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031be:	e798      	b.n	80030f2 <_printf_float+0xaa>
 80031c0:	9a06      	ldr	r2, [sp, #24]
 80031c2:	2a47      	cmp	r2, #71	; 0x47
 80031c4:	d1be      	bne.n	8003144 <_printf_float+0xfc>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1bc      	bne.n	8003144 <_printf_float+0xfc>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e7b9      	b.n	8003142 <_printf_float+0xfa>
 80031ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80031d2:	d118      	bne.n	8003206 <_printf_float+0x1be>
 80031d4:	2900      	cmp	r1, #0
 80031d6:	6863      	ldr	r3, [r4, #4]
 80031d8:	dd0b      	ble.n	80031f2 <_printf_float+0x1aa>
 80031da:	6121      	str	r1, [r4, #16]
 80031dc:	b913      	cbnz	r3, 80031e4 <_printf_float+0x19c>
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	07d0      	lsls	r0, r2, #31
 80031e2:	d502      	bpl.n	80031ea <_printf_float+0x1a2>
 80031e4:	3301      	adds	r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	6123      	str	r3, [r4, #16]
 80031ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80031ec:	f04f 0900 	mov.w	r9, #0
 80031f0:	e7de      	b.n	80031b0 <_printf_float+0x168>
 80031f2:	b913      	cbnz	r3, 80031fa <_printf_float+0x1b2>
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	07d2      	lsls	r2, r2, #31
 80031f8:	d501      	bpl.n	80031fe <_printf_float+0x1b6>
 80031fa:	3302      	adds	r3, #2
 80031fc:	e7f4      	b.n	80031e8 <_printf_float+0x1a0>
 80031fe:	2301      	movs	r3, #1
 8003200:	e7f2      	b.n	80031e8 <_printf_float+0x1a0>
 8003202:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003208:	4299      	cmp	r1, r3
 800320a:	db05      	blt.n	8003218 <_printf_float+0x1d0>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	6121      	str	r1, [r4, #16]
 8003210:	07d8      	lsls	r0, r3, #31
 8003212:	d5ea      	bpl.n	80031ea <_printf_float+0x1a2>
 8003214:	1c4b      	adds	r3, r1, #1
 8003216:	e7e7      	b.n	80031e8 <_printf_float+0x1a0>
 8003218:	2900      	cmp	r1, #0
 800321a:	bfd4      	ite	le
 800321c:	f1c1 0202 	rsble	r2, r1, #2
 8003220:	2201      	movgt	r2, #1
 8003222:	4413      	add	r3, r2
 8003224:	e7e0      	b.n	80031e8 <_printf_float+0x1a0>
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	055a      	lsls	r2, r3, #21
 800322a:	d407      	bmi.n	800323c <_printf_float+0x1f4>
 800322c:	6923      	ldr	r3, [r4, #16]
 800322e:	4642      	mov	r2, r8
 8003230:	4631      	mov	r1, r6
 8003232:	4628      	mov	r0, r5
 8003234:	47b8      	blx	r7
 8003236:	3001      	adds	r0, #1
 8003238:	d12c      	bne.n	8003294 <_printf_float+0x24c>
 800323a:	e764      	b.n	8003106 <_printf_float+0xbe>
 800323c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003240:	f240 80e0 	bls.w	8003404 <_printf_float+0x3bc>
 8003244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003248:	2200      	movs	r2, #0
 800324a:	2300      	movs	r3, #0
 800324c:	f7fd fc4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8003250:	2800      	cmp	r0, #0
 8003252:	d034      	beq.n	80032be <_printf_float+0x276>
 8003254:	4a37      	ldr	r2, [pc, #220]	; (8003334 <_printf_float+0x2ec>)
 8003256:	2301      	movs	r3, #1
 8003258:	4631      	mov	r1, r6
 800325a:	4628      	mov	r0, r5
 800325c:	47b8      	blx	r7
 800325e:	3001      	adds	r0, #1
 8003260:	f43f af51 	beq.w	8003106 <_printf_float+0xbe>
 8003264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003268:	429a      	cmp	r2, r3
 800326a:	db02      	blt.n	8003272 <_printf_float+0x22a>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	07d8      	lsls	r0, r3, #31
 8003270:	d510      	bpl.n	8003294 <_printf_float+0x24c>
 8003272:	ee18 3a10 	vmov	r3, s16
 8003276:	4652      	mov	r2, sl
 8003278:	4631      	mov	r1, r6
 800327a:	4628      	mov	r0, r5
 800327c:	47b8      	blx	r7
 800327e:	3001      	adds	r0, #1
 8003280:	f43f af41 	beq.w	8003106 <_printf_float+0xbe>
 8003284:	f04f 0800 	mov.w	r8, #0
 8003288:	f104 091a 	add.w	r9, r4, #26
 800328c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800328e:	3b01      	subs	r3, #1
 8003290:	4543      	cmp	r3, r8
 8003292:	dc09      	bgt.n	80032a8 <_printf_float+0x260>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	079b      	lsls	r3, r3, #30
 8003298:	f100 8107 	bmi.w	80034aa <_printf_float+0x462>
 800329c:	68e0      	ldr	r0, [r4, #12]
 800329e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032a0:	4298      	cmp	r0, r3
 80032a2:	bfb8      	it	lt
 80032a4:	4618      	movlt	r0, r3
 80032a6:	e730      	b.n	800310a <_printf_float+0xc2>
 80032a8:	2301      	movs	r3, #1
 80032aa:	464a      	mov	r2, r9
 80032ac:	4631      	mov	r1, r6
 80032ae:	4628      	mov	r0, r5
 80032b0:	47b8      	blx	r7
 80032b2:	3001      	adds	r0, #1
 80032b4:	f43f af27 	beq.w	8003106 <_printf_float+0xbe>
 80032b8:	f108 0801 	add.w	r8, r8, #1
 80032bc:	e7e6      	b.n	800328c <_printf_float+0x244>
 80032be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	dc39      	bgt.n	8003338 <_printf_float+0x2f0>
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <_printf_float+0x2ec>)
 80032c6:	2301      	movs	r3, #1
 80032c8:	4631      	mov	r1, r6
 80032ca:	4628      	mov	r0, r5
 80032cc:	47b8      	blx	r7
 80032ce:	3001      	adds	r0, #1
 80032d0:	f43f af19 	beq.w	8003106 <_printf_float+0xbe>
 80032d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80032d8:	4313      	orrs	r3, r2
 80032da:	d102      	bne.n	80032e2 <_printf_float+0x29a>
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	07d9      	lsls	r1, r3, #31
 80032e0:	d5d8      	bpl.n	8003294 <_printf_float+0x24c>
 80032e2:	ee18 3a10 	vmov	r3, s16
 80032e6:	4652      	mov	r2, sl
 80032e8:	4631      	mov	r1, r6
 80032ea:	4628      	mov	r0, r5
 80032ec:	47b8      	blx	r7
 80032ee:	3001      	adds	r0, #1
 80032f0:	f43f af09 	beq.w	8003106 <_printf_float+0xbe>
 80032f4:	f04f 0900 	mov.w	r9, #0
 80032f8:	f104 0a1a 	add.w	sl, r4, #26
 80032fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032fe:	425b      	negs	r3, r3
 8003300:	454b      	cmp	r3, r9
 8003302:	dc01      	bgt.n	8003308 <_printf_float+0x2c0>
 8003304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003306:	e792      	b.n	800322e <_printf_float+0x1e6>
 8003308:	2301      	movs	r3, #1
 800330a:	4652      	mov	r2, sl
 800330c:	4631      	mov	r1, r6
 800330e:	4628      	mov	r0, r5
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	f43f aef7 	beq.w	8003106 <_printf_float+0xbe>
 8003318:	f109 0901 	add.w	r9, r9, #1
 800331c:	e7ee      	b.n	80032fc <_printf_float+0x2b4>
 800331e:	bf00      	nop
 8003320:	7fefffff 	.word	0x7fefffff
 8003324:	08005eff 	.word	0x08005eff
 8003328:	08005f03 	.word	0x08005f03
 800332c:	08005f07 	.word	0x08005f07
 8003330:	08005f0b 	.word	0x08005f0b
 8003334:	08005f0f 	.word	0x08005f0f
 8003338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800333a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800333c:	429a      	cmp	r2, r3
 800333e:	bfa8      	it	ge
 8003340:	461a      	movge	r2, r3
 8003342:	2a00      	cmp	r2, #0
 8003344:	4691      	mov	r9, r2
 8003346:	dc37      	bgt.n	80033b8 <_printf_float+0x370>
 8003348:	f04f 0b00 	mov.w	fp, #0
 800334c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003350:	f104 021a 	add.w	r2, r4, #26
 8003354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003356:	9305      	str	r3, [sp, #20]
 8003358:	eba3 0309 	sub.w	r3, r3, r9
 800335c:	455b      	cmp	r3, fp
 800335e:	dc33      	bgt.n	80033c8 <_printf_float+0x380>
 8003360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003364:	429a      	cmp	r2, r3
 8003366:	db3b      	blt.n	80033e0 <_printf_float+0x398>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	07da      	lsls	r2, r3, #31
 800336c:	d438      	bmi.n	80033e0 <_printf_float+0x398>
 800336e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003372:	eba2 0903 	sub.w	r9, r2, r3
 8003376:	9b05      	ldr	r3, [sp, #20]
 8003378:	1ad2      	subs	r2, r2, r3
 800337a:	4591      	cmp	r9, r2
 800337c:	bfa8      	it	ge
 800337e:	4691      	movge	r9, r2
 8003380:	f1b9 0f00 	cmp.w	r9, #0
 8003384:	dc35      	bgt.n	80033f2 <_printf_float+0x3aa>
 8003386:	f04f 0800 	mov.w	r8, #0
 800338a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800338e:	f104 0a1a 	add.w	sl, r4, #26
 8003392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	eba3 0309 	sub.w	r3, r3, r9
 800339c:	4543      	cmp	r3, r8
 800339e:	f77f af79 	ble.w	8003294 <_printf_float+0x24c>
 80033a2:	2301      	movs	r3, #1
 80033a4:	4652      	mov	r2, sl
 80033a6:	4631      	mov	r1, r6
 80033a8:	4628      	mov	r0, r5
 80033aa:	47b8      	blx	r7
 80033ac:	3001      	adds	r0, #1
 80033ae:	f43f aeaa 	beq.w	8003106 <_printf_float+0xbe>
 80033b2:	f108 0801 	add.w	r8, r8, #1
 80033b6:	e7ec      	b.n	8003392 <_printf_float+0x34a>
 80033b8:	4613      	mov	r3, r2
 80033ba:	4631      	mov	r1, r6
 80033bc:	4642      	mov	r2, r8
 80033be:	4628      	mov	r0, r5
 80033c0:	47b8      	blx	r7
 80033c2:	3001      	adds	r0, #1
 80033c4:	d1c0      	bne.n	8003348 <_printf_float+0x300>
 80033c6:	e69e      	b.n	8003106 <_printf_float+0xbe>
 80033c8:	2301      	movs	r3, #1
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	9205      	str	r2, [sp, #20]
 80033d0:	47b8      	blx	r7
 80033d2:	3001      	adds	r0, #1
 80033d4:	f43f ae97 	beq.w	8003106 <_printf_float+0xbe>
 80033d8:	9a05      	ldr	r2, [sp, #20]
 80033da:	f10b 0b01 	add.w	fp, fp, #1
 80033de:	e7b9      	b.n	8003354 <_printf_float+0x30c>
 80033e0:	ee18 3a10 	vmov	r3, s16
 80033e4:	4652      	mov	r2, sl
 80033e6:	4631      	mov	r1, r6
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b8      	blx	r7
 80033ec:	3001      	adds	r0, #1
 80033ee:	d1be      	bne.n	800336e <_printf_float+0x326>
 80033f0:	e689      	b.n	8003106 <_printf_float+0xbe>
 80033f2:	9a05      	ldr	r2, [sp, #20]
 80033f4:	464b      	mov	r3, r9
 80033f6:	4442      	add	r2, r8
 80033f8:	4631      	mov	r1, r6
 80033fa:	4628      	mov	r0, r5
 80033fc:	47b8      	blx	r7
 80033fe:	3001      	adds	r0, #1
 8003400:	d1c1      	bne.n	8003386 <_printf_float+0x33e>
 8003402:	e680      	b.n	8003106 <_printf_float+0xbe>
 8003404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003406:	2a01      	cmp	r2, #1
 8003408:	dc01      	bgt.n	800340e <_printf_float+0x3c6>
 800340a:	07db      	lsls	r3, r3, #31
 800340c:	d53a      	bpl.n	8003484 <_printf_float+0x43c>
 800340e:	2301      	movs	r3, #1
 8003410:	4642      	mov	r2, r8
 8003412:	4631      	mov	r1, r6
 8003414:	4628      	mov	r0, r5
 8003416:	47b8      	blx	r7
 8003418:	3001      	adds	r0, #1
 800341a:	f43f ae74 	beq.w	8003106 <_printf_float+0xbe>
 800341e:	ee18 3a10 	vmov	r3, s16
 8003422:	4652      	mov	r2, sl
 8003424:	4631      	mov	r1, r6
 8003426:	4628      	mov	r0, r5
 8003428:	47b8      	blx	r7
 800342a:	3001      	adds	r0, #1
 800342c:	f43f ae6b 	beq.w	8003106 <_printf_float+0xbe>
 8003430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003434:	2200      	movs	r2, #0
 8003436:	2300      	movs	r3, #0
 8003438:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800343c:	f7fd fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 8003440:	b9d8      	cbnz	r0, 800347a <_printf_float+0x432>
 8003442:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003446:	f108 0201 	add.w	r2, r8, #1
 800344a:	4631      	mov	r1, r6
 800344c:	4628      	mov	r0, r5
 800344e:	47b8      	blx	r7
 8003450:	3001      	adds	r0, #1
 8003452:	d10e      	bne.n	8003472 <_printf_float+0x42a>
 8003454:	e657      	b.n	8003106 <_printf_float+0xbe>
 8003456:	2301      	movs	r3, #1
 8003458:	4652      	mov	r2, sl
 800345a:	4631      	mov	r1, r6
 800345c:	4628      	mov	r0, r5
 800345e:	47b8      	blx	r7
 8003460:	3001      	adds	r0, #1
 8003462:	f43f ae50 	beq.w	8003106 <_printf_float+0xbe>
 8003466:	f108 0801 	add.w	r8, r8, #1
 800346a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	4543      	cmp	r3, r8
 8003470:	dcf1      	bgt.n	8003456 <_printf_float+0x40e>
 8003472:	464b      	mov	r3, r9
 8003474:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003478:	e6da      	b.n	8003230 <_printf_float+0x1e8>
 800347a:	f04f 0800 	mov.w	r8, #0
 800347e:	f104 0a1a 	add.w	sl, r4, #26
 8003482:	e7f2      	b.n	800346a <_printf_float+0x422>
 8003484:	2301      	movs	r3, #1
 8003486:	4642      	mov	r2, r8
 8003488:	e7df      	b.n	800344a <_printf_float+0x402>
 800348a:	2301      	movs	r3, #1
 800348c:	464a      	mov	r2, r9
 800348e:	4631      	mov	r1, r6
 8003490:	4628      	mov	r0, r5
 8003492:	47b8      	blx	r7
 8003494:	3001      	adds	r0, #1
 8003496:	f43f ae36 	beq.w	8003106 <_printf_float+0xbe>
 800349a:	f108 0801 	add.w	r8, r8, #1
 800349e:	68e3      	ldr	r3, [r4, #12]
 80034a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034a2:	1a5b      	subs	r3, r3, r1
 80034a4:	4543      	cmp	r3, r8
 80034a6:	dcf0      	bgt.n	800348a <_printf_float+0x442>
 80034a8:	e6f8      	b.n	800329c <_printf_float+0x254>
 80034aa:	f04f 0800 	mov.w	r8, #0
 80034ae:	f104 0919 	add.w	r9, r4, #25
 80034b2:	e7f4      	b.n	800349e <_printf_float+0x456>

080034b4 <_printf_common>:
 80034b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b8:	4616      	mov	r6, r2
 80034ba:	4699      	mov	r9, r3
 80034bc:	688a      	ldr	r2, [r1, #8]
 80034be:	690b      	ldr	r3, [r1, #16]
 80034c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c4:	4293      	cmp	r3, r2
 80034c6:	bfb8      	it	lt
 80034c8:	4613      	movlt	r3, r2
 80034ca:	6033      	str	r3, [r6, #0]
 80034cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034d0:	4607      	mov	r7, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	b10a      	cbz	r2, 80034da <_printf_common+0x26>
 80034d6:	3301      	adds	r3, #1
 80034d8:	6033      	str	r3, [r6, #0]
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	0699      	lsls	r1, r3, #26
 80034de:	bf42      	ittt	mi
 80034e0:	6833      	ldrmi	r3, [r6, #0]
 80034e2:	3302      	addmi	r3, #2
 80034e4:	6033      	strmi	r3, [r6, #0]
 80034e6:	6825      	ldr	r5, [r4, #0]
 80034e8:	f015 0506 	ands.w	r5, r5, #6
 80034ec:	d106      	bne.n	80034fc <_printf_common+0x48>
 80034ee:	f104 0a19 	add.w	sl, r4, #25
 80034f2:	68e3      	ldr	r3, [r4, #12]
 80034f4:	6832      	ldr	r2, [r6, #0]
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	42ab      	cmp	r3, r5
 80034fa:	dc26      	bgt.n	800354a <_printf_common+0x96>
 80034fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003500:	1e13      	subs	r3, r2, #0
 8003502:	6822      	ldr	r2, [r4, #0]
 8003504:	bf18      	it	ne
 8003506:	2301      	movne	r3, #1
 8003508:	0692      	lsls	r2, r2, #26
 800350a:	d42b      	bmi.n	8003564 <_printf_common+0xb0>
 800350c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003510:	4649      	mov	r1, r9
 8003512:	4638      	mov	r0, r7
 8003514:	47c0      	blx	r8
 8003516:	3001      	adds	r0, #1
 8003518:	d01e      	beq.n	8003558 <_printf_common+0xa4>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	6922      	ldr	r2, [r4, #16]
 800351e:	f003 0306 	and.w	r3, r3, #6
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf02      	ittt	eq
 8003526:	68e5      	ldreq	r5, [r4, #12]
 8003528:	6833      	ldreq	r3, [r6, #0]
 800352a:	1aed      	subeq	r5, r5, r3
 800352c:	68a3      	ldr	r3, [r4, #8]
 800352e:	bf0c      	ite	eq
 8003530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003534:	2500      	movne	r5, #0
 8003536:	4293      	cmp	r3, r2
 8003538:	bfc4      	itt	gt
 800353a:	1a9b      	subgt	r3, r3, r2
 800353c:	18ed      	addgt	r5, r5, r3
 800353e:	2600      	movs	r6, #0
 8003540:	341a      	adds	r4, #26
 8003542:	42b5      	cmp	r5, r6
 8003544:	d11a      	bne.n	800357c <_printf_common+0xc8>
 8003546:	2000      	movs	r0, #0
 8003548:	e008      	b.n	800355c <_printf_common+0xa8>
 800354a:	2301      	movs	r3, #1
 800354c:	4652      	mov	r2, sl
 800354e:	4649      	mov	r1, r9
 8003550:	4638      	mov	r0, r7
 8003552:	47c0      	blx	r8
 8003554:	3001      	adds	r0, #1
 8003556:	d103      	bne.n	8003560 <_printf_common+0xac>
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003560:	3501      	adds	r5, #1
 8003562:	e7c6      	b.n	80034f2 <_printf_common+0x3e>
 8003564:	18e1      	adds	r1, r4, r3
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	2030      	movs	r0, #48	; 0x30
 800356a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800356e:	4422      	add	r2, r4
 8003570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003578:	3302      	adds	r3, #2
 800357a:	e7c7      	b.n	800350c <_printf_common+0x58>
 800357c:	2301      	movs	r3, #1
 800357e:	4622      	mov	r2, r4
 8003580:	4649      	mov	r1, r9
 8003582:	4638      	mov	r0, r7
 8003584:	47c0      	blx	r8
 8003586:	3001      	adds	r0, #1
 8003588:	d0e6      	beq.n	8003558 <_printf_common+0xa4>
 800358a:	3601      	adds	r6, #1
 800358c:	e7d9      	b.n	8003542 <_printf_common+0x8e>
	...

08003590 <_printf_i>:
 8003590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003594:	7e0f      	ldrb	r7, [r1, #24]
 8003596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003598:	2f78      	cmp	r7, #120	; 0x78
 800359a:	4691      	mov	r9, r2
 800359c:	4680      	mov	r8, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	469a      	mov	sl, r3
 80035a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035a6:	d807      	bhi.n	80035b8 <_printf_i+0x28>
 80035a8:	2f62      	cmp	r7, #98	; 0x62
 80035aa:	d80a      	bhi.n	80035c2 <_printf_i+0x32>
 80035ac:	2f00      	cmp	r7, #0
 80035ae:	f000 80d4 	beq.w	800375a <_printf_i+0x1ca>
 80035b2:	2f58      	cmp	r7, #88	; 0x58
 80035b4:	f000 80c0 	beq.w	8003738 <_printf_i+0x1a8>
 80035b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035c0:	e03a      	b.n	8003638 <_printf_i+0xa8>
 80035c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035c6:	2b15      	cmp	r3, #21
 80035c8:	d8f6      	bhi.n	80035b8 <_printf_i+0x28>
 80035ca:	a101      	add	r1, pc, #4	; (adr r1, 80035d0 <_printf_i+0x40>)
 80035cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035d0:	08003629 	.word	0x08003629
 80035d4:	0800363d 	.word	0x0800363d
 80035d8:	080035b9 	.word	0x080035b9
 80035dc:	080035b9 	.word	0x080035b9
 80035e0:	080035b9 	.word	0x080035b9
 80035e4:	080035b9 	.word	0x080035b9
 80035e8:	0800363d 	.word	0x0800363d
 80035ec:	080035b9 	.word	0x080035b9
 80035f0:	080035b9 	.word	0x080035b9
 80035f4:	080035b9 	.word	0x080035b9
 80035f8:	080035b9 	.word	0x080035b9
 80035fc:	08003741 	.word	0x08003741
 8003600:	08003669 	.word	0x08003669
 8003604:	080036fb 	.word	0x080036fb
 8003608:	080035b9 	.word	0x080035b9
 800360c:	080035b9 	.word	0x080035b9
 8003610:	08003763 	.word	0x08003763
 8003614:	080035b9 	.word	0x080035b9
 8003618:	08003669 	.word	0x08003669
 800361c:	080035b9 	.word	0x080035b9
 8003620:	080035b9 	.word	0x080035b9
 8003624:	08003703 	.word	0x08003703
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	602a      	str	r2, [r5, #0]
 8003630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003638:	2301      	movs	r3, #1
 800363a:	e09f      	b.n	800377c <_printf_i+0x1ec>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	682b      	ldr	r3, [r5, #0]
 8003640:	0607      	lsls	r7, r0, #24
 8003642:	f103 0104 	add.w	r1, r3, #4
 8003646:	6029      	str	r1, [r5, #0]
 8003648:	d501      	bpl.n	800364e <_printf_i+0xbe>
 800364a:	681e      	ldr	r6, [r3, #0]
 800364c:	e003      	b.n	8003656 <_printf_i+0xc6>
 800364e:	0646      	lsls	r6, r0, #25
 8003650:	d5fb      	bpl.n	800364a <_printf_i+0xba>
 8003652:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003656:	2e00      	cmp	r6, #0
 8003658:	da03      	bge.n	8003662 <_printf_i+0xd2>
 800365a:	232d      	movs	r3, #45	; 0x2d
 800365c:	4276      	negs	r6, r6
 800365e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003662:	485a      	ldr	r0, [pc, #360]	; (80037cc <_printf_i+0x23c>)
 8003664:	230a      	movs	r3, #10
 8003666:	e012      	b.n	800368e <_printf_i+0xfe>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	1d19      	adds	r1, r3, #4
 800366e:	6029      	str	r1, [r5, #0]
 8003670:	0605      	lsls	r5, r0, #24
 8003672:	d501      	bpl.n	8003678 <_printf_i+0xe8>
 8003674:	681e      	ldr	r6, [r3, #0]
 8003676:	e002      	b.n	800367e <_printf_i+0xee>
 8003678:	0641      	lsls	r1, r0, #25
 800367a:	d5fb      	bpl.n	8003674 <_printf_i+0xe4>
 800367c:	881e      	ldrh	r6, [r3, #0]
 800367e:	4853      	ldr	r0, [pc, #332]	; (80037cc <_printf_i+0x23c>)
 8003680:	2f6f      	cmp	r7, #111	; 0x6f
 8003682:	bf0c      	ite	eq
 8003684:	2308      	moveq	r3, #8
 8003686:	230a      	movne	r3, #10
 8003688:	2100      	movs	r1, #0
 800368a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800368e:	6865      	ldr	r5, [r4, #4]
 8003690:	60a5      	str	r5, [r4, #8]
 8003692:	2d00      	cmp	r5, #0
 8003694:	bfa2      	ittt	ge
 8003696:	6821      	ldrge	r1, [r4, #0]
 8003698:	f021 0104 	bicge.w	r1, r1, #4
 800369c:	6021      	strge	r1, [r4, #0]
 800369e:	b90e      	cbnz	r6, 80036a4 <_printf_i+0x114>
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	d04b      	beq.n	800373c <_printf_i+0x1ac>
 80036a4:	4615      	mov	r5, r2
 80036a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80036aa:	fb03 6711 	mls	r7, r3, r1, r6
 80036ae:	5dc7      	ldrb	r7, [r0, r7]
 80036b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036b4:	4637      	mov	r7, r6
 80036b6:	42bb      	cmp	r3, r7
 80036b8:	460e      	mov	r6, r1
 80036ba:	d9f4      	bls.n	80036a6 <_printf_i+0x116>
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d10b      	bne.n	80036d8 <_printf_i+0x148>
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	07de      	lsls	r6, r3, #31
 80036c4:	d508      	bpl.n	80036d8 <_printf_i+0x148>
 80036c6:	6923      	ldr	r3, [r4, #16]
 80036c8:	6861      	ldr	r1, [r4, #4]
 80036ca:	4299      	cmp	r1, r3
 80036cc:	bfde      	ittt	le
 80036ce:	2330      	movle	r3, #48	; 0x30
 80036d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036d8:	1b52      	subs	r2, r2, r5
 80036da:	6122      	str	r2, [r4, #16]
 80036dc:	f8cd a000 	str.w	sl, [sp]
 80036e0:	464b      	mov	r3, r9
 80036e2:	aa03      	add	r2, sp, #12
 80036e4:	4621      	mov	r1, r4
 80036e6:	4640      	mov	r0, r8
 80036e8:	f7ff fee4 	bl	80034b4 <_printf_common>
 80036ec:	3001      	adds	r0, #1
 80036ee:	d14a      	bne.n	8003786 <_printf_i+0x1f6>
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	b004      	add	sp, #16
 80036f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	f043 0320 	orr.w	r3, r3, #32
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	4833      	ldr	r0, [pc, #204]	; (80037d0 <_printf_i+0x240>)
 8003704:	2778      	movs	r7, #120	; 0x78
 8003706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	6829      	ldr	r1, [r5, #0]
 800370e:	061f      	lsls	r7, r3, #24
 8003710:	f851 6b04 	ldr.w	r6, [r1], #4
 8003714:	d402      	bmi.n	800371c <_printf_i+0x18c>
 8003716:	065f      	lsls	r7, r3, #25
 8003718:	bf48      	it	mi
 800371a:	b2b6      	uxthmi	r6, r6
 800371c:	07df      	lsls	r7, r3, #31
 800371e:	bf48      	it	mi
 8003720:	f043 0320 	orrmi.w	r3, r3, #32
 8003724:	6029      	str	r1, [r5, #0]
 8003726:	bf48      	it	mi
 8003728:	6023      	strmi	r3, [r4, #0]
 800372a:	b91e      	cbnz	r6, 8003734 <_printf_i+0x1a4>
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	f023 0320 	bic.w	r3, r3, #32
 8003732:	6023      	str	r3, [r4, #0]
 8003734:	2310      	movs	r3, #16
 8003736:	e7a7      	b.n	8003688 <_printf_i+0xf8>
 8003738:	4824      	ldr	r0, [pc, #144]	; (80037cc <_printf_i+0x23c>)
 800373a:	e7e4      	b.n	8003706 <_printf_i+0x176>
 800373c:	4615      	mov	r5, r2
 800373e:	e7bd      	b.n	80036bc <_printf_i+0x12c>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	6826      	ldr	r6, [r4, #0]
 8003744:	6961      	ldr	r1, [r4, #20]
 8003746:	1d18      	adds	r0, r3, #4
 8003748:	6028      	str	r0, [r5, #0]
 800374a:	0635      	lsls	r5, r6, #24
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	d501      	bpl.n	8003754 <_printf_i+0x1c4>
 8003750:	6019      	str	r1, [r3, #0]
 8003752:	e002      	b.n	800375a <_printf_i+0x1ca>
 8003754:	0670      	lsls	r0, r6, #25
 8003756:	d5fb      	bpl.n	8003750 <_printf_i+0x1c0>
 8003758:	8019      	strh	r1, [r3, #0]
 800375a:	2300      	movs	r3, #0
 800375c:	6123      	str	r3, [r4, #16]
 800375e:	4615      	mov	r5, r2
 8003760:	e7bc      	b.n	80036dc <_printf_i+0x14c>
 8003762:	682b      	ldr	r3, [r5, #0]
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	602a      	str	r2, [r5, #0]
 8003768:	681d      	ldr	r5, [r3, #0]
 800376a:	6862      	ldr	r2, [r4, #4]
 800376c:	2100      	movs	r1, #0
 800376e:	4628      	mov	r0, r5
 8003770:	f7fc fd3e 	bl	80001f0 <memchr>
 8003774:	b108      	cbz	r0, 800377a <_printf_i+0x1ea>
 8003776:	1b40      	subs	r0, r0, r5
 8003778:	6060      	str	r0, [r4, #4]
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	6123      	str	r3, [r4, #16]
 800377e:	2300      	movs	r3, #0
 8003780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003784:	e7aa      	b.n	80036dc <_printf_i+0x14c>
 8003786:	6923      	ldr	r3, [r4, #16]
 8003788:	462a      	mov	r2, r5
 800378a:	4649      	mov	r1, r9
 800378c:	4640      	mov	r0, r8
 800378e:	47d0      	blx	sl
 8003790:	3001      	adds	r0, #1
 8003792:	d0ad      	beq.n	80036f0 <_printf_i+0x160>
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	079b      	lsls	r3, r3, #30
 8003798:	d413      	bmi.n	80037c2 <_printf_i+0x232>
 800379a:	68e0      	ldr	r0, [r4, #12]
 800379c:	9b03      	ldr	r3, [sp, #12]
 800379e:	4298      	cmp	r0, r3
 80037a0:	bfb8      	it	lt
 80037a2:	4618      	movlt	r0, r3
 80037a4:	e7a6      	b.n	80036f4 <_printf_i+0x164>
 80037a6:	2301      	movs	r3, #1
 80037a8:	4632      	mov	r2, r6
 80037aa:	4649      	mov	r1, r9
 80037ac:	4640      	mov	r0, r8
 80037ae:	47d0      	blx	sl
 80037b0:	3001      	adds	r0, #1
 80037b2:	d09d      	beq.n	80036f0 <_printf_i+0x160>
 80037b4:	3501      	adds	r5, #1
 80037b6:	68e3      	ldr	r3, [r4, #12]
 80037b8:	9903      	ldr	r1, [sp, #12]
 80037ba:	1a5b      	subs	r3, r3, r1
 80037bc:	42ab      	cmp	r3, r5
 80037be:	dcf2      	bgt.n	80037a6 <_printf_i+0x216>
 80037c0:	e7eb      	b.n	800379a <_printf_i+0x20a>
 80037c2:	2500      	movs	r5, #0
 80037c4:	f104 0619 	add.w	r6, r4, #25
 80037c8:	e7f5      	b.n	80037b6 <_printf_i+0x226>
 80037ca:	bf00      	nop
 80037cc:	08005f11 	.word	0x08005f11
 80037d0:	08005f22 	.word	0x08005f22

080037d4 <std>:
 80037d4:	2300      	movs	r3, #0
 80037d6:	b510      	push	{r4, lr}
 80037d8:	4604      	mov	r4, r0
 80037da:	e9c0 3300 	strd	r3, r3, [r0]
 80037de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037e2:	6083      	str	r3, [r0, #8]
 80037e4:	8181      	strh	r1, [r0, #12]
 80037e6:	6643      	str	r3, [r0, #100]	; 0x64
 80037e8:	81c2      	strh	r2, [r0, #14]
 80037ea:	6183      	str	r3, [r0, #24]
 80037ec:	4619      	mov	r1, r3
 80037ee:	2208      	movs	r2, #8
 80037f0:	305c      	adds	r0, #92	; 0x5c
 80037f2:	f000 f915 	bl	8003a20 <memset>
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <std+0x58>)
 80037f8:	6263      	str	r3, [r4, #36]	; 0x24
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <std+0x5c>)
 80037fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <std+0x60>)
 8003800:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <std+0x64>)
 8003804:	6323      	str	r3, [r4, #48]	; 0x30
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <std+0x68>)
 8003808:	6224      	str	r4, [r4, #32]
 800380a:	429c      	cmp	r4, r3
 800380c:	d006      	beq.n	800381c <std+0x48>
 800380e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003812:	4294      	cmp	r4, r2
 8003814:	d002      	beq.n	800381c <std+0x48>
 8003816:	33d0      	adds	r3, #208	; 0xd0
 8003818:	429c      	cmp	r4, r3
 800381a:	d105      	bne.n	8003828 <std+0x54>
 800381c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003824:	f000 b99e 	b.w	8003b64 <__retarget_lock_init_recursive>
 8003828:	bd10      	pop	{r4, pc}
 800382a:	bf00      	nop
 800382c:	08003959 	.word	0x08003959
 8003830:	0800397b 	.word	0x0800397b
 8003834:	080039b3 	.word	0x080039b3
 8003838:	080039d7 	.word	0x080039d7
 800383c:	20008cc0 	.word	0x20008cc0

08003840 <stdio_exit_handler>:
 8003840:	4a02      	ldr	r2, [pc, #8]	; (800384c <stdio_exit_handler+0xc>)
 8003842:	4903      	ldr	r1, [pc, #12]	; (8003850 <stdio_exit_handler+0x10>)
 8003844:	4803      	ldr	r0, [pc, #12]	; (8003854 <stdio_exit_handler+0x14>)
 8003846:	f000 b869 	b.w	800391c <_fwalk_sglue>
 800384a:	bf00      	nop
 800384c:	20007d0c 	.word	0x20007d0c
 8003850:	08005519 	.word	0x08005519
 8003854:	20007d18 	.word	0x20007d18

08003858 <cleanup_stdio>:
 8003858:	6841      	ldr	r1, [r0, #4]
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <cleanup_stdio+0x34>)
 800385c:	4299      	cmp	r1, r3
 800385e:	b510      	push	{r4, lr}
 8003860:	4604      	mov	r4, r0
 8003862:	d001      	beq.n	8003868 <cleanup_stdio+0x10>
 8003864:	f001 fe58 	bl	8005518 <_fflush_r>
 8003868:	68a1      	ldr	r1, [r4, #8]
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <cleanup_stdio+0x38>)
 800386c:	4299      	cmp	r1, r3
 800386e:	d002      	beq.n	8003876 <cleanup_stdio+0x1e>
 8003870:	4620      	mov	r0, r4
 8003872:	f001 fe51 	bl	8005518 <_fflush_r>
 8003876:	68e1      	ldr	r1, [r4, #12]
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <cleanup_stdio+0x3c>)
 800387a:	4299      	cmp	r1, r3
 800387c:	d004      	beq.n	8003888 <cleanup_stdio+0x30>
 800387e:	4620      	mov	r0, r4
 8003880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003884:	f001 be48 	b.w	8005518 <_fflush_r>
 8003888:	bd10      	pop	{r4, pc}
 800388a:	bf00      	nop
 800388c:	20008cc0 	.word	0x20008cc0
 8003890:	20008d28 	.word	0x20008d28
 8003894:	20008d90 	.word	0x20008d90

08003898 <global_stdio_init.part.0>:
 8003898:	b510      	push	{r4, lr}
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <global_stdio_init.part.0+0x30>)
 800389c:	4c0b      	ldr	r4, [pc, #44]	; (80038cc <global_stdio_init.part.0+0x34>)
 800389e:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <global_stdio_init.part.0+0x38>)
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	4620      	mov	r0, r4
 80038a4:	2200      	movs	r2, #0
 80038a6:	2104      	movs	r1, #4
 80038a8:	f7ff ff94 	bl	80037d4 <std>
 80038ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80038b0:	2201      	movs	r2, #1
 80038b2:	2109      	movs	r1, #9
 80038b4:	f7ff ff8e 	bl	80037d4 <std>
 80038b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80038bc:	2202      	movs	r2, #2
 80038be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c2:	2112      	movs	r1, #18
 80038c4:	f7ff bf86 	b.w	80037d4 <std>
 80038c8:	20008df8 	.word	0x20008df8
 80038cc:	20008cc0 	.word	0x20008cc0
 80038d0:	08003841 	.word	0x08003841

080038d4 <__sfp_lock_acquire>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__sfp_lock_acquire+0x8>)
 80038d6:	f000 b946 	b.w	8003b66 <__retarget_lock_acquire_recursive>
 80038da:	bf00      	nop
 80038dc:	20008e01 	.word	0x20008e01

080038e0 <__sfp_lock_release>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__sfp_lock_release+0x8>)
 80038e2:	f000 b941 	b.w	8003b68 <__retarget_lock_release_recursive>
 80038e6:	bf00      	nop
 80038e8:	20008e01 	.word	0x20008e01

080038ec <__sinit>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	f7ff fff0 	bl	80038d4 <__sfp_lock_acquire>
 80038f4:	6a23      	ldr	r3, [r4, #32]
 80038f6:	b11b      	cbz	r3, 8003900 <__sinit+0x14>
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fc:	f7ff bff0 	b.w	80038e0 <__sfp_lock_release>
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <__sinit+0x28>)
 8003902:	6223      	str	r3, [r4, #32]
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <__sinit+0x2c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f5      	bne.n	80038f8 <__sinit+0xc>
 800390c:	f7ff ffc4 	bl	8003898 <global_stdio_init.part.0>
 8003910:	e7f2      	b.n	80038f8 <__sinit+0xc>
 8003912:	bf00      	nop
 8003914:	08003859 	.word	0x08003859
 8003918:	20008df8 	.word	0x20008df8

0800391c <_fwalk_sglue>:
 800391c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003920:	4607      	mov	r7, r0
 8003922:	4688      	mov	r8, r1
 8003924:	4614      	mov	r4, r2
 8003926:	2600      	movs	r6, #0
 8003928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800392c:	f1b9 0901 	subs.w	r9, r9, #1
 8003930:	d505      	bpl.n	800393e <_fwalk_sglue+0x22>
 8003932:	6824      	ldr	r4, [r4, #0]
 8003934:	2c00      	cmp	r4, #0
 8003936:	d1f7      	bne.n	8003928 <_fwalk_sglue+0xc>
 8003938:	4630      	mov	r0, r6
 800393a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800393e:	89ab      	ldrh	r3, [r5, #12]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d907      	bls.n	8003954 <_fwalk_sglue+0x38>
 8003944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003948:	3301      	adds	r3, #1
 800394a:	d003      	beq.n	8003954 <_fwalk_sglue+0x38>
 800394c:	4629      	mov	r1, r5
 800394e:	4638      	mov	r0, r7
 8003950:	47c0      	blx	r8
 8003952:	4306      	orrs	r6, r0
 8003954:	3568      	adds	r5, #104	; 0x68
 8003956:	e7e9      	b.n	800392c <_fwalk_sglue+0x10>

08003958 <__sread>:
 8003958:	b510      	push	{r4, lr}
 800395a:	460c      	mov	r4, r1
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	f000 f8b2 	bl	8003ac8 <_read_r>
 8003964:	2800      	cmp	r0, #0
 8003966:	bfab      	itete	ge
 8003968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800396a:	89a3      	ldrhlt	r3, [r4, #12]
 800396c:	181b      	addge	r3, r3, r0
 800396e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003972:	bfac      	ite	ge
 8003974:	6563      	strge	r3, [r4, #84]	; 0x54
 8003976:	81a3      	strhlt	r3, [r4, #12]
 8003978:	bd10      	pop	{r4, pc}

0800397a <__swrite>:
 800397a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	461f      	mov	r7, r3
 8003980:	898b      	ldrh	r3, [r1, #12]
 8003982:	05db      	lsls	r3, r3, #23
 8003984:	4605      	mov	r5, r0
 8003986:	460c      	mov	r4, r1
 8003988:	4616      	mov	r6, r2
 800398a:	d505      	bpl.n	8003998 <__swrite+0x1e>
 800398c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003990:	2302      	movs	r3, #2
 8003992:	2200      	movs	r2, #0
 8003994:	f000 f886 	bl	8003aa4 <_lseek_r>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800399e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	4632      	mov	r2, r6
 80039a6:	463b      	mov	r3, r7
 80039a8:	4628      	mov	r0, r5
 80039aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	f000 b89d 	b.w	8003aec <_write_r>

080039b2 <__sseek>:
 80039b2:	b510      	push	{r4, lr}
 80039b4:	460c      	mov	r4, r1
 80039b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ba:	f000 f873 	bl	8003aa4 <_lseek_r>
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	bf15      	itete	ne
 80039c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80039c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039ce:	81a3      	strheq	r3, [r4, #12]
 80039d0:	bf18      	it	ne
 80039d2:	81a3      	strhne	r3, [r4, #12]
 80039d4:	bd10      	pop	{r4, pc}

080039d6 <__sclose>:
 80039d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039da:	f000 b853 	b.w	8003a84 <_close_r>
	...

080039e0 <_vsiprintf_r>:
 80039e0:	b500      	push	{lr}
 80039e2:	b09b      	sub	sp, #108	; 0x6c
 80039e4:	9100      	str	r1, [sp, #0]
 80039e6:	9104      	str	r1, [sp, #16]
 80039e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ec:	9105      	str	r1, [sp, #20]
 80039ee:	9102      	str	r1, [sp, #8]
 80039f0:	4905      	ldr	r1, [pc, #20]	; (8003a08 <_vsiprintf_r+0x28>)
 80039f2:	9103      	str	r1, [sp, #12]
 80039f4:	4669      	mov	r1, sp
 80039f6:	f001 fc0b 	bl	8005210 <_svfiprintf_r>
 80039fa:	9b00      	ldr	r3, [sp, #0]
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	b01b      	add	sp, #108	; 0x6c
 8003a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a06:	bf00      	nop
 8003a08:	ffff0208 	.word	0xffff0208

08003a0c <vsiprintf>:
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	460a      	mov	r2, r1
 8003a10:	4601      	mov	r1, r0
 8003a12:	4802      	ldr	r0, [pc, #8]	; (8003a1c <vsiprintf+0x10>)
 8003a14:	6800      	ldr	r0, [r0, #0]
 8003a16:	f7ff bfe3 	b.w	80039e0 <_vsiprintf_r>
 8003a1a:	bf00      	nop
 8003a1c:	20007d64 	.word	0x20007d64

08003a20 <memset>:
 8003a20:	4402      	add	r2, r0
 8003a22:	4603      	mov	r3, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <strncpy>:
 8003a30:	b510      	push	{r4, lr}
 8003a32:	3901      	subs	r1, #1
 8003a34:	4603      	mov	r3, r0
 8003a36:	b132      	cbz	r2, 8003a46 <strncpy+0x16>
 8003a38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003a3c:	f803 4b01 	strb.w	r4, [r3], #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	2c00      	cmp	r4, #0
 8003a44:	d1f7      	bne.n	8003a36 <strncpy+0x6>
 8003a46:	441a      	add	r2, r3
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d100      	bne.n	8003a50 <strncpy+0x20>
 8003a4e:	bd10      	pop	{r4, pc}
 8003a50:	f803 1b01 	strb.w	r1, [r3], #1
 8003a54:	e7f9      	b.n	8003a4a <strncpy+0x1a>
	...

08003a58 <strupr>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4c07      	ldr	r4, [pc, #28]	; (8003a78 <strupr+0x20>)
 8003a5c:	1e42      	subs	r2, r0, #1
 8003a5e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003a62:	b903      	cbnz	r3, 8003a66 <strupr+0xe>
 8003a64:	bd10      	pop	{r4, pc}
 8003a66:	5ce1      	ldrb	r1, [r4, r3]
 8003a68:	f001 0103 	and.w	r1, r1, #3
 8003a6c:	2902      	cmp	r1, #2
 8003a6e:	bf08      	it	eq
 8003a70:	3b20      	subeq	r3, #32
 8003a72:	7013      	strb	r3, [r2, #0]
 8003a74:	e7f3      	b.n	8003a5e <strupr+0x6>
 8003a76:	bf00      	nop
 8003a78:	0800611d 	.word	0x0800611d

08003a7c <_localeconv_r>:
 8003a7c:	4800      	ldr	r0, [pc, #0]	; (8003a80 <_localeconv_r+0x4>)
 8003a7e:	4770      	bx	lr
 8003a80:	20007e58 	.word	0x20007e58

08003a84 <_close_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4d06      	ldr	r5, [pc, #24]	; (8003aa0 <_close_r+0x1c>)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	f7fe f91f 	bl	8001cd2 <_close>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d102      	bne.n	8003a9e <_close_r+0x1a>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	b103      	cbz	r3, 8003a9e <_close_r+0x1a>
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	20008dfc 	.word	0x20008dfc

08003aa4 <_lseek_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4d07      	ldr	r5, [pc, #28]	; (8003ac4 <_lseek_r+0x20>)
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4608      	mov	r0, r1
 8003aac:	4611      	mov	r1, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	602a      	str	r2, [r5, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f7fe f934 	bl	8001d20 <_lseek>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_lseek_r+0x1e>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_lseek_r+0x1e>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	20008dfc 	.word	0x20008dfc

08003ac8 <_read_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4d07      	ldr	r5, [pc, #28]	; (8003ae8 <_read_r+0x20>)
 8003acc:	4604      	mov	r4, r0
 8003ace:	4608      	mov	r0, r1
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	602a      	str	r2, [r5, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7fe f8c2 	bl	8001c60 <_read>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_read_r+0x1e>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_read_r+0x1e>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	20008dfc 	.word	0x20008dfc

08003aec <_write_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d07      	ldr	r5, [pc, #28]	; (8003b0c <_write_r+0x20>)
 8003af0:	4604      	mov	r4, r0
 8003af2:	4608      	mov	r0, r1
 8003af4:	4611      	mov	r1, r2
 8003af6:	2200      	movs	r2, #0
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fe f8cd 	bl	8001c9a <_write>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_write_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_write_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20008dfc 	.word	0x20008dfc

08003b10 <__errno>:
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <__errno+0x8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20007d64 	.word	0x20007d64

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f002 f896 	bl	8005c60 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08006274 	.word	0x08006274
 8003b58:	08006274 	.word	0x08006274
 8003b5c:	08006274 	.word	0x08006274
 8003b60:	08006278 	.word	0x08006278

08003b64 <__retarget_lock_init_recursive>:
 8003b64:	4770      	bx	lr

08003b66 <__retarget_lock_acquire_recursive>:
 8003b66:	4770      	bx	lr

08003b68 <__retarget_lock_release_recursive>:
 8003b68:	4770      	bx	lr

08003b6a <quorem>:
 8003b6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6e:	6903      	ldr	r3, [r0, #16]
 8003b70:	690c      	ldr	r4, [r1, #16]
 8003b72:	42a3      	cmp	r3, r4
 8003b74:	4607      	mov	r7, r0
 8003b76:	db7e      	blt.n	8003c76 <quorem+0x10c>
 8003b78:	3c01      	subs	r4, #1
 8003b7a:	f101 0814 	add.w	r8, r1, #20
 8003b7e:	f100 0514 	add.w	r5, r0, #20
 8003b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b90:	3301      	adds	r3, #1
 8003b92:	429a      	cmp	r2, r3
 8003b94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ba0:	d331      	bcc.n	8003c06 <quorem+0x9c>
 8003ba2:	f04f 0e00 	mov.w	lr, #0
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	46ac      	mov	ip, r5
 8003baa:	46f2      	mov	sl, lr
 8003bac:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bb0:	b293      	uxth	r3, r2
 8003bb2:	fb06 e303 	mla	r3, r6, r3, lr
 8003bb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bba:	0c1a      	lsrs	r2, r3, #16
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	ebaa 0303 	sub.w	r3, sl, r3
 8003bc2:	f8dc a000 	ldr.w	sl, [ip]
 8003bc6:	fa13 f38a 	uxtah	r3, r3, sl
 8003bca:	fb06 220e 	mla	r2, r6, lr, r2
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	9b00      	ldr	r3, [sp, #0]
 8003bd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003bdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003be0:	f8bd 3000 	ldrh.w	r3, [sp]
 8003be4:	4581      	cmp	r9, r0
 8003be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bea:	f84c 3b04 	str.w	r3, [ip], #4
 8003bee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003bf2:	d2db      	bcs.n	8003bac <quorem+0x42>
 8003bf4:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bf8:	b92b      	cbnz	r3, 8003c06 <quorem+0x9c>
 8003bfa:	9b01      	ldr	r3, [sp, #4]
 8003bfc:	3b04      	subs	r3, #4
 8003bfe:	429d      	cmp	r5, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	d32c      	bcc.n	8003c5e <quorem+0xf4>
 8003c04:	613c      	str	r4, [r7, #16]
 8003c06:	4638      	mov	r0, r7
 8003c08:	f001 f9a8 	bl	8004f5c <__mcmp>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	db22      	blt.n	8003c56 <quorem+0xec>
 8003c10:	3601      	adds	r6, #1
 8003c12:	4629      	mov	r1, r5
 8003c14:	2000      	movs	r0, #0
 8003c16:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c1a:	f8d1 c000 	ldr.w	ip, [r1]
 8003c1e:	b293      	uxth	r3, r2
 8003c20:	1ac3      	subs	r3, r0, r3
 8003c22:	0c12      	lsrs	r2, r2, #16
 8003c24:	fa13 f38c 	uxtah	r3, r3, ip
 8003c28:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c36:	45c1      	cmp	r9, r8
 8003c38:	f841 3b04 	str.w	r3, [r1], #4
 8003c3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c40:	d2e9      	bcs.n	8003c16 <quorem+0xac>
 8003c42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c4a:	b922      	cbnz	r2, 8003c56 <quorem+0xec>
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	429d      	cmp	r5, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	d30a      	bcc.n	8003c6a <quorem+0x100>
 8003c54:	613c      	str	r4, [r7, #16]
 8003c56:	4630      	mov	r0, r6
 8003c58:	b003      	add	sp, #12
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	3b04      	subs	r3, #4
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	d1ce      	bne.n	8003c04 <quorem+0x9a>
 8003c66:	3c01      	subs	r4, #1
 8003c68:	e7c9      	b.n	8003bfe <quorem+0x94>
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	d1f0      	bne.n	8003c54 <quorem+0xea>
 8003c72:	3c01      	subs	r4, #1
 8003c74:	e7eb      	b.n	8003c4e <quorem+0xe4>
 8003c76:	2000      	movs	r0, #0
 8003c78:	e7ee      	b.n	8003c58 <quorem+0xee>
 8003c7a:	0000      	movs	r0, r0
 8003c7c:	0000      	movs	r0, r0
	...

08003c80 <_dtoa_r>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	ed2d 8b04 	vpush	{d8-d9}
 8003c88:	69c5      	ldr	r5, [r0, #28]
 8003c8a:	b093      	sub	sp, #76	; 0x4c
 8003c8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003c90:	ec57 6b10 	vmov	r6, r7, d0
 8003c94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003c98:	9107      	str	r1, [sp, #28]
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	920a      	str	r2, [sp, #40]	; 0x28
 8003c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8003ca0:	b975      	cbnz	r5, 8003cc0 <_dtoa_r+0x40>
 8003ca2:	2010      	movs	r0, #16
 8003ca4:	f000 fe2a 	bl	80048fc <malloc>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	61e0      	str	r0, [r4, #28]
 8003cac:	b920      	cbnz	r0, 8003cb8 <_dtoa_r+0x38>
 8003cae:	4bae      	ldr	r3, [pc, #696]	; (8003f68 <_dtoa_r+0x2e8>)
 8003cb0:	21ef      	movs	r1, #239	; 0xef
 8003cb2:	48ae      	ldr	r0, [pc, #696]	; (8003f6c <_dtoa_r+0x2ec>)
 8003cb4:	f001 fc90 	bl	80055d8 <__assert_func>
 8003cb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003cbc:	6005      	str	r5, [r0, #0]
 8003cbe:	60c5      	str	r5, [r0, #12]
 8003cc0:	69e3      	ldr	r3, [r4, #28]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	b151      	cbz	r1, 8003cdc <_dtoa_r+0x5c>
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	604a      	str	r2, [r1, #4]
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f000 ff07 	bl	8004ae4 <_Bfree>
 8003cd6:	69e3      	ldr	r3, [r4, #28]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	1e3b      	subs	r3, r7, #0
 8003cde:	bfbb      	ittet	lt
 8003ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ce4:	9303      	strlt	r3, [sp, #12]
 8003ce6:	2300      	movge	r3, #0
 8003ce8:	2201      	movlt	r2, #1
 8003cea:	bfac      	ite	ge
 8003cec:	f8c8 3000 	strge.w	r3, [r8]
 8003cf0:	f8c8 2000 	strlt.w	r2, [r8]
 8003cf4:	4b9e      	ldr	r3, [pc, #632]	; (8003f70 <_dtoa_r+0x2f0>)
 8003cf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003cfa:	ea33 0308 	bics.w	r3, r3, r8
 8003cfe:	d11b      	bne.n	8003d38 <_dtoa_r+0xb8>
 8003d00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d02:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003d0c:	4333      	orrs	r3, r6
 8003d0e:	f000 8593 	beq.w	8004838 <_dtoa_r+0xbb8>
 8003d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d14:	b963      	cbnz	r3, 8003d30 <_dtoa_r+0xb0>
 8003d16:	4b97      	ldr	r3, [pc, #604]	; (8003f74 <_dtoa_r+0x2f4>)
 8003d18:	e027      	b.n	8003d6a <_dtoa_r+0xea>
 8003d1a:	4b97      	ldr	r3, [pc, #604]	; (8003f78 <_dtoa_r+0x2f8>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	9800      	ldr	r0, [sp, #0]
 8003d26:	b013      	add	sp, #76	; 0x4c
 8003d28:	ecbd 8b04 	vpop	{d8-d9}
 8003d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d30:	4b90      	ldr	r3, [pc, #576]	; (8003f74 <_dtoa_r+0x2f4>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	3303      	adds	r3, #3
 8003d36:	e7f3      	b.n	8003d20 <_dtoa_r+0xa0>
 8003d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	ec51 0b17 	vmov	r0, r1, d7
 8003d42:	eeb0 8a47 	vmov.f32	s16, s14
 8003d46:	eef0 8a67 	vmov.f32	s17, s15
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f7fc fecc 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d50:	4681      	mov	r9, r0
 8003d52:	b160      	cbz	r0, 8003d6e <_dtoa_r+0xee>
 8003d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d56:	2301      	movs	r3, #1
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8568 	beq.w	8004832 <_dtoa_r+0xbb2>
 8003d62:	4b86      	ldr	r3, [pc, #536]	; (8003f7c <_dtoa_r+0x2fc>)
 8003d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	e7da      	b.n	8003d24 <_dtoa_r+0xa4>
 8003d6e:	aa10      	add	r2, sp, #64	; 0x40
 8003d70:	a911      	add	r1, sp, #68	; 0x44
 8003d72:	4620      	mov	r0, r4
 8003d74:	eeb0 0a48 	vmov.f32	s0, s16
 8003d78:	eef0 0a68 	vmov.f32	s1, s17
 8003d7c:	f001 f994 	bl	80050a8 <__d2b>
 8003d80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003d84:	4682      	mov	sl, r0
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	d07f      	beq.n	8003e8a <_dtoa_r+0x20a>
 8003d8a:	ee18 3a90 	vmov	r3, s17
 8003d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003d96:	ec51 0b18 	vmov	r0, r1, d8
 8003d9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003da2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003da6:	4619      	mov	r1, r3
 8003da8:	2200      	movs	r2, #0
 8003daa:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <_dtoa_r+0x300>)
 8003dac:	f7fc fa7c 	bl	80002a8 <__aeabi_dsub>
 8003db0:	a367      	add	r3, pc, #412	; (adr r3, 8003f50 <_dtoa_r+0x2d0>)
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	f7fc fc2f 	bl	8000618 <__aeabi_dmul>
 8003dba:	a367      	add	r3, pc, #412	; (adr r3, 8003f58 <_dtoa_r+0x2d8>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fa74 	bl	80002ac <__adddf3>
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	460f      	mov	r7, r1
 8003dca:	f7fc fbbb 	bl	8000544 <__aeabi_i2d>
 8003dce:	a364      	add	r3, pc, #400	; (adr r3, 8003f60 <_dtoa_r+0x2e0>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fc20 	bl	8000618 <__aeabi_dmul>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4630      	mov	r0, r6
 8003dde:	4639      	mov	r1, r7
 8003de0:	f7fc fa64 	bl	80002ac <__adddf3>
 8003de4:	4606      	mov	r6, r0
 8003de6:	460f      	mov	r7, r1
 8003de8:	f7fc fec6 	bl	8000b78 <__aeabi_d2iz>
 8003dec:	2200      	movs	r2, #0
 8003dee:	4683      	mov	fp, r0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4630      	mov	r0, r6
 8003df4:	4639      	mov	r1, r7
 8003df6:	f7fc fe81 	bl	8000afc <__aeabi_dcmplt>
 8003dfa:	b148      	cbz	r0, 8003e10 <_dtoa_r+0x190>
 8003dfc:	4658      	mov	r0, fp
 8003dfe:	f7fc fba1 	bl	8000544 <__aeabi_i2d>
 8003e02:	4632      	mov	r2, r6
 8003e04:	463b      	mov	r3, r7
 8003e06:	f7fc fe6f 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e0a:	b908      	cbnz	r0, 8003e10 <_dtoa_r+0x190>
 8003e0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e10:	f1bb 0f16 	cmp.w	fp, #22
 8003e14:	d857      	bhi.n	8003ec6 <_dtoa_r+0x246>
 8003e16:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <_dtoa_r+0x304>)
 8003e18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	ec51 0b18 	vmov	r0, r1, d8
 8003e24:	f7fc fe6a 	bl	8000afc <__aeabi_dcmplt>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d04e      	beq.n	8003eca <_dtoa_r+0x24a>
 8003e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e30:	2300      	movs	r3, #0
 8003e32:	930c      	str	r3, [sp, #48]	; 0x30
 8003e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e36:	1b5b      	subs	r3, r3, r5
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	bf45      	ittet	mi
 8003e3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e40:	9305      	strmi	r3, [sp, #20]
 8003e42:	2300      	movpl	r3, #0
 8003e44:	2300      	movmi	r3, #0
 8003e46:	9206      	str	r2, [sp, #24]
 8003e48:	bf54      	ite	pl
 8003e4a:	9305      	strpl	r3, [sp, #20]
 8003e4c:	9306      	strmi	r3, [sp, #24]
 8003e4e:	f1bb 0f00 	cmp.w	fp, #0
 8003e52:	db3c      	blt.n	8003ece <_dtoa_r+0x24e>
 8003e54:	9b06      	ldr	r3, [sp, #24]
 8003e56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003e5a:	445b      	add	r3, fp
 8003e5c:	9306      	str	r3, [sp, #24]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9308      	str	r3, [sp, #32]
 8003e62:	9b07      	ldr	r3, [sp, #28]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d868      	bhi.n	8003f3a <_dtoa_r+0x2ba>
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	bfc4      	itt	gt
 8003e6c:	3b04      	subgt	r3, #4
 8003e6e:	9307      	strgt	r3, [sp, #28]
 8003e70:	9b07      	ldr	r3, [sp, #28]
 8003e72:	f1a3 0302 	sub.w	r3, r3, #2
 8003e76:	bfcc      	ite	gt
 8003e78:	2500      	movgt	r5, #0
 8003e7a:	2501      	movle	r5, #1
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	f200 8085 	bhi.w	8003f8c <_dtoa_r+0x30c>
 8003e82:	e8df f003 	tbb	[pc, r3]
 8003e86:	3b2e      	.short	0x3b2e
 8003e88:	5839      	.short	0x5839
 8003e8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003e8e:	441d      	add	r5, r3
 8003e90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	bfc1      	itttt	gt
 8003e98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003ea0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003ea4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003ea8:	bfd6      	itet	le
 8003eaa:	f1c3 0320 	rsble	r3, r3, #32
 8003eae:	ea48 0003 	orrgt.w	r0, r8, r3
 8003eb2:	fa06 f003 	lslle.w	r0, r6, r3
 8003eb6:	f7fc fb35 	bl	8000524 <__aeabi_ui2d>
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003ec0:	3d01      	subs	r5, #1
 8003ec2:	920e      	str	r2, [sp, #56]	; 0x38
 8003ec4:	e76f      	b.n	8003da6 <_dtoa_r+0x126>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e7b3      	b.n	8003e32 <_dtoa_r+0x1b2>
 8003eca:	900c      	str	r0, [sp, #48]	; 0x30
 8003ecc:	e7b2      	b.n	8003e34 <_dtoa_r+0x1b4>
 8003ece:	9b05      	ldr	r3, [sp, #20]
 8003ed0:	eba3 030b 	sub.w	r3, r3, fp
 8003ed4:	9305      	str	r3, [sp, #20]
 8003ed6:	f1cb 0300 	rsb	r3, fp, #0
 8003eda:	9308      	str	r3, [sp, #32]
 8003edc:	2300      	movs	r3, #0
 8003ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ee0:	e7bf      	b.n	8003e62 <_dtoa_r+0x1e2>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	dc52      	bgt.n	8003f92 <_dtoa_r+0x312>
 8003eec:	2301      	movs	r3, #1
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	9304      	str	r3, [sp, #16]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	920a      	str	r2, [sp, #40]	; 0x28
 8003ef6:	e00b      	b.n	8003f10 <_dtoa_r+0x290>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e7f3      	b.n	8003ee4 <_dtoa_r+0x264>
 8003efc:	2300      	movs	r3, #0
 8003efe:	9309      	str	r3, [sp, #36]	; 0x24
 8003f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f02:	445b      	add	r3, fp
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	3301      	adds	r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	bfb8      	it	lt
 8003f0e:	2301      	movlt	r3, #1
 8003f10:	69e0      	ldr	r0, [r4, #28]
 8003f12:	2100      	movs	r1, #0
 8003f14:	2204      	movs	r2, #4
 8003f16:	f102 0614 	add.w	r6, r2, #20
 8003f1a:	429e      	cmp	r6, r3
 8003f1c:	d93d      	bls.n	8003f9a <_dtoa_r+0x31a>
 8003f1e:	6041      	str	r1, [r0, #4]
 8003f20:	4620      	mov	r0, r4
 8003f22:	f000 fd9f 	bl	8004a64 <_Balloc>
 8003f26:	9000      	str	r0, [sp, #0]
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d139      	bne.n	8003fa0 <_dtoa_r+0x320>
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <_dtoa_r+0x308>)
 8003f2e:	4602      	mov	r2, r0
 8003f30:	f240 11af 	movw	r1, #431	; 0x1af
 8003f34:	e6bd      	b.n	8003cb2 <_dtoa_r+0x32>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e7e1      	b.n	8003efe <_dtoa_r+0x27e>
 8003f3a:	2501      	movs	r5, #1
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9307      	str	r3, [sp, #28]
 8003f40:	9509      	str	r5, [sp, #36]	; 0x24
 8003f42:	f04f 33ff 	mov.w	r3, #4294967295
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2312      	movs	r3, #18
 8003f4e:	e7d1      	b.n	8003ef4 <_dtoa_r+0x274>
 8003f50:	636f4361 	.word	0x636f4361
 8003f54:	3fd287a7 	.word	0x3fd287a7
 8003f58:	8b60c8b3 	.word	0x8b60c8b3
 8003f5c:	3fc68a28 	.word	0x3fc68a28
 8003f60:	509f79fb 	.word	0x509f79fb
 8003f64:	3fd34413 	.word	0x3fd34413
 8003f68:	08005f40 	.word	0x08005f40
 8003f6c:	08005f57 	.word	0x08005f57
 8003f70:	7ff00000 	.word	0x7ff00000
 8003f74:	08005f3c 	.word	0x08005f3c
 8003f78:	08005f33 	.word	0x08005f33
 8003f7c:	08005f10 	.word	0x08005f10
 8003f80:	3ff80000 	.word	0x3ff80000
 8003f84:	08006048 	.word	0x08006048
 8003f88:	08005faf 	.word	0x08005faf
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f90:	e7d7      	b.n	8003f42 <_dtoa_r+0x2c2>
 8003f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	e7ba      	b.n	8003f10 <_dtoa_r+0x290>
 8003f9a:	3101      	adds	r1, #1
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	e7ba      	b.n	8003f16 <_dtoa_r+0x296>
 8003fa0:	69e3      	ldr	r3, [r4, #28]
 8003fa2:	9a00      	ldr	r2, [sp, #0]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	9b04      	ldr	r3, [sp, #16]
 8003fa8:	2b0e      	cmp	r3, #14
 8003faa:	f200 80a8 	bhi.w	80040fe <_dtoa_r+0x47e>
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	f000 80a5 	beq.w	80040fe <_dtoa_r+0x47e>
 8003fb4:	f1bb 0f00 	cmp.w	fp, #0
 8003fb8:	dd38      	ble.n	800402c <_dtoa_r+0x3ac>
 8003fba:	4bc0      	ldr	r3, [pc, #768]	; (80042bc <_dtoa_r+0x63c>)
 8003fbc:	f00b 020f 	and.w	r2, fp, #15
 8003fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003fc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003fcc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003fd0:	d019      	beq.n	8004006 <_dtoa_r+0x386>
 8003fd2:	4bbb      	ldr	r3, [pc, #748]	; (80042c0 <_dtoa_r+0x640>)
 8003fd4:	ec51 0b18 	vmov	r0, r1, d8
 8003fd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fdc:	f7fc fc46 	bl	800086c <__aeabi_ddiv>
 8003fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fe4:	f008 080f 	and.w	r8, r8, #15
 8003fe8:	2503      	movs	r5, #3
 8003fea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80042c0 <_dtoa_r+0x640>
 8003fee:	f1b8 0f00 	cmp.w	r8, #0
 8003ff2:	d10a      	bne.n	800400a <_dtoa_r+0x38a>
 8003ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	463b      	mov	r3, r7
 8003ffc:	f7fc fc36 	bl	800086c <__aeabi_ddiv>
 8004000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004004:	e02b      	b.n	800405e <_dtoa_r+0x3de>
 8004006:	2502      	movs	r5, #2
 8004008:	e7ef      	b.n	8003fea <_dtoa_r+0x36a>
 800400a:	f018 0f01 	tst.w	r8, #1
 800400e:	d008      	beq.n	8004022 <_dtoa_r+0x3a2>
 8004010:	4630      	mov	r0, r6
 8004012:	4639      	mov	r1, r7
 8004014:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004018:	f7fc fafe 	bl	8000618 <__aeabi_dmul>
 800401c:	3501      	adds	r5, #1
 800401e:	4606      	mov	r6, r0
 8004020:	460f      	mov	r7, r1
 8004022:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004026:	f109 0908 	add.w	r9, r9, #8
 800402a:	e7e0      	b.n	8003fee <_dtoa_r+0x36e>
 800402c:	f000 809f 	beq.w	800416e <_dtoa_r+0x4ee>
 8004030:	f1cb 0600 	rsb	r6, fp, #0
 8004034:	4ba1      	ldr	r3, [pc, #644]	; (80042bc <_dtoa_r+0x63c>)
 8004036:	4fa2      	ldr	r7, [pc, #648]	; (80042c0 <_dtoa_r+0x640>)
 8004038:	f006 020f 	and.w	r2, r6, #15
 800403c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	ec51 0b18 	vmov	r0, r1, d8
 8004048:	f7fc fae6 	bl	8000618 <__aeabi_dmul>
 800404c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004050:	1136      	asrs	r6, r6, #4
 8004052:	2300      	movs	r3, #0
 8004054:	2502      	movs	r5, #2
 8004056:	2e00      	cmp	r6, #0
 8004058:	d17e      	bne.n	8004158 <_dtoa_r+0x4d8>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1d0      	bne.n	8004000 <_dtoa_r+0x380>
 800405e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004060:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8084 	beq.w	8004172 <_dtoa_r+0x4f2>
 800406a:	4b96      	ldr	r3, [pc, #600]	; (80042c4 <_dtoa_r+0x644>)
 800406c:	2200      	movs	r2, #0
 800406e:	4640      	mov	r0, r8
 8004070:	4649      	mov	r1, r9
 8004072:	f7fc fd43 	bl	8000afc <__aeabi_dcmplt>
 8004076:	2800      	cmp	r0, #0
 8004078:	d07b      	beq.n	8004172 <_dtoa_r+0x4f2>
 800407a:	9b04      	ldr	r3, [sp, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d078      	beq.n	8004172 <_dtoa_r+0x4f2>
 8004080:	9b01      	ldr	r3, [sp, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	dd39      	ble.n	80040fa <_dtoa_r+0x47a>
 8004086:	4b90      	ldr	r3, [pc, #576]	; (80042c8 <_dtoa_r+0x648>)
 8004088:	2200      	movs	r2, #0
 800408a:	4640      	mov	r0, r8
 800408c:	4649      	mov	r1, r9
 800408e:	f7fc fac3 	bl	8000618 <__aeabi_dmul>
 8004092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004096:	9e01      	ldr	r6, [sp, #4]
 8004098:	f10b 37ff 	add.w	r7, fp, #4294967295
 800409c:	3501      	adds	r5, #1
 800409e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80040a2:	4628      	mov	r0, r5
 80040a4:	f7fc fa4e 	bl	8000544 <__aeabi_i2d>
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	f7fc fab4 	bl	8000618 <__aeabi_dmul>
 80040b0:	4b86      	ldr	r3, [pc, #536]	; (80042cc <_dtoa_r+0x64c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	f7fc f8fa 	bl	80002ac <__adddf3>
 80040b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80040bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040c0:	9303      	str	r3, [sp, #12]
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	d158      	bne.n	8004178 <_dtoa_r+0x4f8>
 80040c6:	4b82      	ldr	r3, [pc, #520]	; (80042d0 <_dtoa_r+0x650>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	4640      	mov	r0, r8
 80040cc:	4649      	mov	r1, r9
 80040ce:	f7fc f8eb 	bl	80002a8 <__aeabi_dsub>
 80040d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040d6:	4680      	mov	r8, r0
 80040d8:	4689      	mov	r9, r1
 80040da:	f7fc fd2d 	bl	8000b38 <__aeabi_dcmpgt>
 80040de:	2800      	cmp	r0, #0
 80040e0:	f040 8296 	bne.w	8004610 <_dtoa_r+0x990>
 80040e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80040e8:	4640      	mov	r0, r8
 80040ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040ee:	4649      	mov	r1, r9
 80040f0:	f7fc fd04 	bl	8000afc <__aeabi_dcmplt>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f040 8289 	bne.w	800460c <_dtoa_r+0x98c>
 80040fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80040fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004100:	2b00      	cmp	r3, #0
 8004102:	f2c0 814e 	blt.w	80043a2 <_dtoa_r+0x722>
 8004106:	f1bb 0f0e 	cmp.w	fp, #14
 800410a:	f300 814a 	bgt.w	80043a2 <_dtoa_r+0x722>
 800410e:	4b6b      	ldr	r3, [pc, #428]	; (80042bc <_dtoa_r+0x63c>)
 8004110:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	f280 80dc 	bge.w	80042d8 <_dtoa_r+0x658>
 8004120:	9b04      	ldr	r3, [sp, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f300 80d8 	bgt.w	80042d8 <_dtoa_r+0x658>
 8004128:	f040 826f 	bne.w	800460a <_dtoa_r+0x98a>
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <_dtoa_r+0x650>)
 800412e:	2200      	movs	r2, #0
 8004130:	4640      	mov	r0, r8
 8004132:	4649      	mov	r1, r9
 8004134:	f7fc fa70 	bl	8000618 <__aeabi_dmul>
 8004138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800413c:	f7fc fcf2 	bl	8000b24 <__aeabi_dcmpge>
 8004140:	9e04      	ldr	r6, [sp, #16]
 8004142:	4637      	mov	r7, r6
 8004144:	2800      	cmp	r0, #0
 8004146:	f040 8245 	bne.w	80045d4 <_dtoa_r+0x954>
 800414a:	9d00      	ldr	r5, [sp, #0]
 800414c:	2331      	movs	r3, #49	; 0x31
 800414e:	f805 3b01 	strb.w	r3, [r5], #1
 8004152:	f10b 0b01 	add.w	fp, fp, #1
 8004156:	e241      	b.n	80045dc <_dtoa_r+0x95c>
 8004158:	07f2      	lsls	r2, r6, #31
 800415a:	d505      	bpl.n	8004168 <_dtoa_r+0x4e8>
 800415c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004160:	f7fc fa5a 	bl	8000618 <__aeabi_dmul>
 8004164:	3501      	adds	r5, #1
 8004166:	2301      	movs	r3, #1
 8004168:	1076      	asrs	r6, r6, #1
 800416a:	3708      	adds	r7, #8
 800416c:	e773      	b.n	8004056 <_dtoa_r+0x3d6>
 800416e:	2502      	movs	r5, #2
 8004170:	e775      	b.n	800405e <_dtoa_r+0x3de>
 8004172:	9e04      	ldr	r6, [sp, #16]
 8004174:	465f      	mov	r7, fp
 8004176:	e792      	b.n	800409e <_dtoa_r+0x41e>
 8004178:	9900      	ldr	r1, [sp, #0]
 800417a:	4b50      	ldr	r3, [pc, #320]	; (80042bc <_dtoa_r+0x63c>)
 800417c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004180:	4431      	add	r1, r6
 8004182:	9102      	str	r1, [sp, #8]
 8004184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004186:	eeb0 9a47 	vmov.f32	s18, s14
 800418a:	eef0 9a67 	vmov.f32	s19, s15
 800418e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004192:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004196:	2900      	cmp	r1, #0
 8004198:	d044      	beq.n	8004224 <_dtoa_r+0x5a4>
 800419a:	494e      	ldr	r1, [pc, #312]	; (80042d4 <_dtoa_r+0x654>)
 800419c:	2000      	movs	r0, #0
 800419e:	f7fc fb65 	bl	800086c <__aeabi_ddiv>
 80041a2:	ec53 2b19 	vmov	r2, r3, d9
 80041a6:	f7fc f87f 	bl	80002a8 <__aeabi_dsub>
 80041aa:	9d00      	ldr	r5, [sp, #0]
 80041ac:	ec41 0b19 	vmov	d9, r0, r1
 80041b0:	4649      	mov	r1, r9
 80041b2:	4640      	mov	r0, r8
 80041b4:	f7fc fce0 	bl	8000b78 <__aeabi_d2iz>
 80041b8:	4606      	mov	r6, r0
 80041ba:	f7fc f9c3 	bl	8000544 <__aeabi_i2d>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4640      	mov	r0, r8
 80041c4:	4649      	mov	r1, r9
 80041c6:	f7fc f86f 	bl	80002a8 <__aeabi_dsub>
 80041ca:	3630      	adds	r6, #48	; 0x30
 80041cc:	f805 6b01 	strb.w	r6, [r5], #1
 80041d0:	ec53 2b19 	vmov	r2, r3, d9
 80041d4:	4680      	mov	r8, r0
 80041d6:	4689      	mov	r9, r1
 80041d8:	f7fc fc90 	bl	8000afc <__aeabi_dcmplt>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d164      	bne.n	80042aa <_dtoa_r+0x62a>
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	4937      	ldr	r1, [pc, #220]	; (80042c4 <_dtoa_r+0x644>)
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7fc f85e 	bl	80002a8 <__aeabi_dsub>
 80041ec:	ec53 2b19 	vmov	r2, r3, d9
 80041f0:	f7fc fc84 	bl	8000afc <__aeabi_dcmplt>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	f040 80b6 	bne.w	8004366 <_dtoa_r+0x6e6>
 80041fa:	9b02      	ldr	r3, [sp, #8]
 80041fc:	429d      	cmp	r5, r3
 80041fe:	f43f af7c 	beq.w	80040fa <_dtoa_r+0x47a>
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <_dtoa_r+0x648>)
 8004204:	ec51 0b19 	vmov	r0, r1, d9
 8004208:	2200      	movs	r2, #0
 800420a:	f7fc fa05 	bl	8000618 <__aeabi_dmul>
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <_dtoa_r+0x648>)
 8004210:	ec41 0b19 	vmov	d9, r0, r1
 8004214:	2200      	movs	r2, #0
 8004216:	4640      	mov	r0, r8
 8004218:	4649      	mov	r1, r9
 800421a:	f7fc f9fd 	bl	8000618 <__aeabi_dmul>
 800421e:	4680      	mov	r8, r0
 8004220:	4689      	mov	r9, r1
 8004222:	e7c5      	b.n	80041b0 <_dtoa_r+0x530>
 8004224:	ec51 0b17 	vmov	r0, r1, d7
 8004228:	f7fc f9f6 	bl	8000618 <__aeabi_dmul>
 800422c:	9b02      	ldr	r3, [sp, #8]
 800422e:	9d00      	ldr	r5, [sp, #0]
 8004230:	930f      	str	r3, [sp, #60]	; 0x3c
 8004232:	ec41 0b19 	vmov	d9, r0, r1
 8004236:	4649      	mov	r1, r9
 8004238:	4640      	mov	r0, r8
 800423a:	f7fc fc9d 	bl	8000b78 <__aeabi_d2iz>
 800423e:	4606      	mov	r6, r0
 8004240:	f7fc f980 	bl	8000544 <__aeabi_i2d>
 8004244:	3630      	adds	r6, #48	; 0x30
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4640      	mov	r0, r8
 800424c:	4649      	mov	r1, r9
 800424e:	f7fc f82b 	bl	80002a8 <__aeabi_dsub>
 8004252:	f805 6b01 	strb.w	r6, [r5], #1
 8004256:	9b02      	ldr	r3, [sp, #8]
 8004258:	429d      	cmp	r5, r3
 800425a:	4680      	mov	r8, r0
 800425c:	4689      	mov	r9, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	d124      	bne.n	80042ae <_dtoa_r+0x62e>
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <_dtoa_r+0x654>)
 8004266:	ec51 0b19 	vmov	r0, r1, d9
 800426a:	f7fc f81f 	bl	80002ac <__adddf3>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4640      	mov	r0, r8
 8004274:	4649      	mov	r1, r9
 8004276:	f7fc fc5f 	bl	8000b38 <__aeabi_dcmpgt>
 800427a:	2800      	cmp	r0, #0
 800427c:	d173      	bne.n	8004366 <_dtoa_r+0x6e6>
 800427e:	ec53 2b19 	vmov	r2, r3, d9
 8004282:	4914      	ldr	r1, [pc, #80]	; (80042d4 <_dtoa_r+0x654>)
 8004284:	2000      	movs	r0, #0
 8004286:	f7fc f80f 	bl	80002a8 <__aeabi_dsub>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4640      	mov	r0, r8
 8004290:	4649      	mov	r1, r9
 8004292:	f7fc fc33 	bl	8000afc <__aeabi_dcmplt>
 8004296:	2800      	cmp	r0, #0
 8004298:	f43f af2f 	beq.w	80040fa <_dtoa_r+0x47a>
 800429c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800429e:	1e6b      	subs	r3, r5, #1
 80042a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80042a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042a6:	2b30      	cmp	r3, #48	; 0x30
 80042a8:	d0f8      	beq.n	800429c <_dtoa_r+0x61c>
 80042aa:	46bb      	mov	fp, r7
 80042ac:	e04a      	b.n	8004344 <_dtoa_r+0x6c4>
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <_dtoa_r+0x648>)
 80042b0:	f7fc f9b2 	bl	8000618 <__aeabi_dmul>
 80042b4:	4680      	mov	r8, r0
 80042b6:	4689      	mov	r9, r1
 80042b8:	e7bd      	b.n	8004236 <_dtoa_r+0x5b6>
 80042ba:	bf00      	nop
 80042bc:	08006048 	.word	0x08006048
 80042c0:	08006020 	.word	0x08006020
 80042c4:	3ff00000 	.word	0x3ff00000
 80042c8:	40240000 	.word	0x40240000
 80042cc:	401c0000 	.word	0x401c0000
 80042d0:	40140000 	.word	0x40140000
 80042d4:	3fe00000 	.word	0x3fe00000
 80042d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042dc:	9d00      	ldr	r5, [sp, #0]
 80042de:	4642      	mov	r2, r8
 80042e0:	464b      	mov	r3, r9
 80042e2:	4630      	mov	r0, r6
 80042e4:	4639      	mov	r1, r7
 80042e6:	f7fc fac1 	bl	800086c <__aeabi_ddiv>
 80042ea:	f7fc fc45 	bl	8000b78 <__aeabi_d2iz>
 80042ee:	9001      	str	r0, [sp, #4]
 80042f0:	f7fc f928 	bl	8000544 <__aeabi_i2d>
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	f7fc f98e 	bl	8000618 <__aeabi_dmul>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4630      	mov	r0, r6
 8004302:	4639      	mov	r1, r7
 8004304:	f7fb ffd0 	bl	80002a8 <__aeabi_dsub>
 8004308:	9e01      	ldr	r6, [sp, #4]
 800430a:	9f04      	ldr	r7, [sp, #16]
 800430c:	3630      	adds	r6, #48	; 0x30
 800430e:	f805 6b01 	strb.w	r6, [r5], #1
 8004312:	9e00      	ldr	r6, [sp, #0]
 8004314:	1bae      	subs	r6, r5, r6
 8004316:	42b7      	cmp	r7, r6
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	d134      	bne.n	8004388 <_dtoa_r+0x708>
 800431e:	f7fb ffc5 	bl	80002ac <__adddf3>
 8004322:	4642      	mov	r2, r8
 8004324:	464b      	mov	r3, r9
 8004326:	4606      	mov	r6, r0
 8004328:	460f      	mov	r7, r1
 800432a:	f7fc fc05 	bl	8000b38 <__aeabi_dcmpgt>
 800432e:	b9c8      	cbnz	r0, 8004364 <_dtoa_r+0x6e4>
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	4630      	mov	r0, r6
 8004336:	4639      	mov	r1, r7
 8004338:	f7fc fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800433c:	b110      	cbz	r0, 8004344 <_dtoa_r+0x6c4>
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	07db      	lsls	r3, r3, #31
 8004342:	d40f      	bmi.n	8004364 <_dtoa_r+0x6e4>
 8004344:	4651      	mov	r1, sl
 8004346:	4620      	mov	r0, r4
 8004348:	f000 fbcc 	bl	8004ae4 <_Bfree>
 800434c:	2300      	movs	r3, #0
 800434e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004350:	702b      	strb	r3, [r5, #0]
 8004352:	f10b 0301 	add.w	r3, fp, #1
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800435a:	2b00      	cmp	r3, #0
 800435c:	f43f ace2 	beq.w	8003d24 <_dtoa_r+0xa4>
 8004360:	601d      	str	r5, [r3, #0]
 8004362:	e4df      	b.n	8003d24 <_dtoa_r+0xa4>
 8004364:	465f      	mov	r7, fp
 8004366:	462b      	mov	r3, r5
 8004368:	461d      	mov	r5, r3
 800436a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800436e:	2a39      	cmp	r2, #57	; 0x39
 8004370:	d106      	bne.n	8004380 <_dtoa_r+0x700>
 8004372:	9a00      	ldr	r2, [sp, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d1f7      	bne.n	8004368 <_dtoa_r+0x6e8>
 8004378:	9900      	ldr	r1, [sp, #0]
 800437a:	2230      	movs	r2, #48	; 0x30
 800437c:	3701      	adds	r7, #1
 800437e:	700a      	strb	r2, [r1, #0]
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	3201      	adds	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e790      	b.n	80042aa <_dtoa_r+0x62a>
 8004388:	4ba3      	ldr	r3, [pc, #652]	; (8004618 <_dtoa_r+0x998>)
 800438a:	2200      	movs	r2, #0
 800438c:	f7fc f944 	bl	8000618 <__aeabi_dmul>
 8004390:	2200      	movs	r2, #0
 8004392:	2300      	movs	r3, #0
 8004394:	4606      	mov	r6, r0
 8004396:	460f      	mov	r7, r1
 8004398:	f7fc fba6 	bl	8000ae8 <__aeabi_dcmpeq>
 800439c:	2800      	cmp	r0, #0
 800439e:	d09e      	beq.n	80042de <_dtoa_r+0x65e>
 80043a0:	e7d0      	b.n	8004344 <_dtoa_r+0x6c4>
 80043a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	f000 80ca 	beq.w	800453e <_dtoa_r+0x8be>
 80043aa:	9a07      	ldr	r2, [sp, #28]
 80043ac:	2a01      	cmp	r2, #1
 80043ae:	f300 80ad 	bgt.w	800450c <_dtoa_r+0x88c>
 80043b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	f000 80a5 	beq.w	8004504 <_dtoa_r+0x884>
 80043ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043be:	9e08      	ldr	r6, [sp, #32]
 80043c0:	9d05      	ldr	r5, [sp, #20]
 80043c2:	9a05      	ldr	r2, [sp, #20]
 80043c4:	441a      	add	r2, r3
 80043c6:	9205      	str	r2, [sp, #20]
 80043c8:	9a06      	ldr	r2, [sp, #24]
 80043ca:	2101      	movs	r1, #1
 80043cc:	441a      	add	r2, r3
 80043ce:	4620      	mov	r0, r4
 80043d0:	9206      	str	r2, [sp, #24]
 80043d2:	f000 fc3d 	bl	8004c50 <__i2b>
 80043d6:	4607      	mov	r7, r0
 80043d8:	b165      	cbz	r5, 80043f4 <_dtoa_r+0x774>
 80043da:	9b06      	ldr	r3, [sp, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	dd09      	ble.n	80043f4 <_dtoa_r+0x774>
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	9a05      	ldr	r2, [sp, #20]
 80043e4:	bfa8      	it	ge
 80043e6:	462b      	movge	r3, r5
 80043e8:	1ad2      	subs	r2, r2, r3
 80043ea:	9205      	str	r2, [sp, #20]
 80043ec:	9a06      	ldr	r2, [sp, #24]
 80043ee:	1aed      	subs	r5, r5, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	9306      	str	r3, [sp, #24]
 80043f4:	9b08      	ldr	r3, [sp, #32]
 80043f6:	b1f3      	cbz	r3, 8004436 <_dtoa_r+0x7b6>
 80043f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80a3 	beq.w	8004546 <_dtoa_r+0x8c6>
 8004400:	2e00      	cmp	r6, #0
 8004402:	dd10      	ble.n	8004426 <_dtoa_r+0x7a6>
 8004404:	4639      	mov	r1, r7
 8004406:	4632      	mov	r2, r6
 8004408:	4620      	mov	r0, r4
 800440a:	f000 fce1 	bl	8004dd0 <__pow5mult>
 800440e:	4652      	mov	r2, sl
 8004410:	4601      	mov	r1, r0
 8004412:	4607      	mov	r7, r0
 8004414:	4620      	mov	r0, r4
 8004416:	f000 fc31 	bl	8004c7c <__multiply>
 800441a:	4651      	mov	r1, sl
 800441c:	4680      	mov	r8, r0
 800441e:	4620      	mov	r0, r4
 8004420:	f000 fb60 	bl	8004ae4 <_Bfree>
 8004424:	46c2      	mov	sl, r8
 8004426:	9b08      	ldr	r3, [sp, #32]
 8004428:	1b9a      	subs	r2, r3, r6
 800442a:	d004      	beq.n	8004436 <_dtoa_r+0x7b6>
 800442c:	4651      	mov	r1, sl
 800442e:	4620      	mov	r0, r4
 8004430:	f000 fcce 	bl	8004dd0 <__pow5mult>
 8004434:	4682      	mov	sl, r0
 8004436:	2101      	movs	r1, #1
 8004438:	4620      	mov	r0, r4
 800443a:	f000 fc09 	bl	8004c50 <__i2b>
 800443e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	4606      	mov	r6, r0
 8004444:	f340 8081 	ble.w	800454a <_dtoa_r+0x8ca>
 8004448:	461a      	mov	r2, r3
 800444a:	4601      	mov	r1, r0
 800444c:	4620      	mov	r0, r4
 800444e:	f000 fcbf 	bl	8004dd0 <__pow5mult>
 8004452:	9b07      	ldr	r3, [sp, #28]
 8004454:	2b01      	cmp	r3, #1
 8004456:	4606      	mov	r6, r0
 8004458:	dd7a      	ble.n	8004550 <_dtoa_r+0x8d0>
 800445a:	f04f 0800 	mov.w	r8, #0
 800445e:	6933      	ldr	r3, [r6, #16]
 8004460:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004464:	6918      	ldr	r0, [r3, #16]
 8004466:	f000 fba5 	bl	8004bb4 <__hi0bits>
 800446a:	f1c0 0020 	rsb	r0, r0, #32
 800446e:	9b06      	ldr	r3, [sp, #24]
 8004470:	4418      	add	r0, r3
 8004472:	f010 001f 	ands.w	r0, r0, #31
 8004476:	f000 8094 	beq.w	80045a2 <_dtoa_r+0x922>
 800447a:	f1c0 0320 	rsb	r3, r0, #32
 800447e:	2b04      	cmp	r3, #4
 8004480:	f340 8085 	ble.w	800458e <_dtoa_r+0x90e>
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	f1c0 001c 	rsb	r0, r0, #28
 800448a:	4403      	add	r3, r0
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	9b06      	ldr	r3, [sp, #24]
 8004490:	4403      	add	r3, r0
 8004492:	4405      	add	r5, r0
 8004494:	9306      	str	r3, [sp, #24]
 8004496:	9b05      	ldr	r3, [sp, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	dd05      	ble.n	80044a8 <_dtoa_r+0x828>
 800449c:	4651      	mov	r1, sl
 800449e:	461a      	mov	r2, r3
 80044a0:	4620      	mov	r0, r4
 80044a2:	f000 fcef 	bl	8004e84 <__lshift>
 80044a6:	4682      	mov	sl, r0
 80044a8:	9b06      	ldr	r3, [sp, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dd05      	ble.n	80044ba <_dtoa_r+0x83a>
 80044ae:	4631      	mov	r1, r6
 80044b0:	461a      	mov	r2, r3
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 fce6 	bl	8004e84 <__lshift>
 80044b8:	4606      	mov	r6, r0
 80044ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d072      	beq.n	80045a6 <_dtoa_r+0x926>
 80044c0:	4631      	mov	r1, r6
 80044c2:	4650      	mov	r0, sl
 80044c4:	f000 fd4a 	bl	8004f5c <__mcmp>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	da6c      	bge.n	80045a6 <_dtoa_r+0x926>
 80044cc:	2300      	movs	r3, #0
 80044ce:	4651      	mov	r1, sl
 80044d0:	220a      	movs	r2, #10
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 fb28 	bl	8004b28 <__multadd>
 80044d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044de:	4682      	mov	sl, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 81b0 	beq.w	8004846 <_dtoa_r+0xbc6>
 80044e6:	2300      	movs	r3, #0
 80044e8:	4639      	mov	r1, r7
 80044ea:	220a      	movs	r2, #10
 80044ec:	4620      	mov	r0, r4
 80044ee:	f000 fb1b 	bl	8004b28 <__multadd>
 80044f2:	9b01      	ldr	r3, [sp, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	4607      	mov	r7, r0
 80044f8:	f300 8096 	bgt.w	8004628 <_dtoa_r+0x9a8>
 80044fc:	9b07      	ldr	r3, [sp, #28]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	dc59      	bgt.n	80045b6 <_dtoa_r+0x936>
 8004502:	e091      	b.n	8004628 <_dtoa_r+0x9a8>
 8004504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800450a:	e758      	b.n	80043be <_dtoa_r+0x73e>
 800450c:	9b04      	ldr	r3, [sp, #16]
 800450e:	1e5e      	subs	r6, r3, #1
 8004510:	9b08      	ldr	r3, [sp, #32]
 8004512:	42b3      	cmp	r3, r6
 8004514:	bfbf      	itttt	lt
 8004516:	9b08      	ldrlt	r3, [sp, #32]
 8004518:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800451a:	9608      	strlt	r6, [sp, #32]
 800451c:	1af3      	sublt	r3, r6, r3
 800451e:	bfb4      	ite	lt
 8004520:	18d2      	addlt	r2, r2, r3
 8004522:	1b9e      	subge	r6, r3, r6
 8004524:	9b04      	ldr	r3, [sp, #16]
 8004526:	bfbc      	itt	lt
 8004528:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800452a:	2600      	movlt	r6, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	bfb7      	itett	lt
 8004530:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004534:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004538:	1a9d      	sublt	r5, r3, r2
 800453a:	2300      	movlt	r3, #0
 800453c:	e741      	b.n	80043c2 <_dtoa_r+0x742>
 800453e:	9e08      	ldr	r6, [sp, #32]
 8004540:	9d05      	ldr	r5, [sp, #20]
 8004542:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004544:	e748      	b.n	80043d8 <_dtoa_r+0x758>
 8004546:	9a08      	ldr	r2, [sp, #32]
 8004548:	e770      	b.n	800442c <_dtoa_r+0x7ac>
 800454a:	9b07      	ldr	r3, [sp, #28]
 800454c:	2b01      	cmp	r3, #1
 800454e:	dc19      	bgt.n	8004584 <_dtoa_r+0x904>
 8004550:	9b02      	ldr	r3, [sp, #8]
 8004552:	b9bb      	cbnz	r3, 8004584 <_dtoa_r+0x904>
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800455a:	b99b      	cbnz	r3, 8004584 <_dtoa_r+0x904>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004562:	0d1b      	lsrs	r3, r3, #20
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	b183      	cbz	r3, 800458a <_dtoa_r+0x90a>
 8004568:	9b05      	ldr	r3, [sp, #20]
 800456a:	3301      	adds	r3, #1
 800456c:	9305      	str	r3, [sp, #20]
 800456e:	9b06      	ldr	r3, [sp, #24]
 8004570:	3301      	adds	r3, #1
 8004572:	9306      	str	r3, [sp, #24]
 8004574:	f04f 0801 	mov.w	r8, #1
 8004578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800457a:	2b00      	cmp	r3, #0
 800457c:	f47f af6f 	bne.w	800445e <_dtoa_r+0x7de>
 8004580:	2001      	movs	r0, #1
 8004582:	e774      	b.n	800446e <_dtoa_r+0x7ee>
 8004584:	f04f 0800 	mov.w	r8, #0
 8004588:	e7f6      	b.n	8004578 <_dtoa_r+0x8f8>
 800458a:	4698      	mov	r8, r3
 800458c:	e7f4      	b.n	8004578 <_dtoa_r+0x8f8>
 800458e:	d082      	beq.n	8004496 <_dtoa_r+0x816>
 8004590:	9a05      	ldr	r2, [sp, #20]
 8004592:	331c      	adds	r3, #28
 8004594:	441a      	add	r2, r3
 8004596:	9205      	str	r2, [sp, #20]
 8004598:	9a06      	ldr	r2, [sp, #24]
 800459a:	441a      	add	r2, r3
 800459c:	441d      	add	r5, r3
 800459e:	9206      	str	r2, [sp, #24]
 80045a0:	e779      	b.n	8004496 <_dtoa_r+0x816>
 80045a2:	4603      	mov	r3, r0
 80045a4:	e7f4      	b.n	8004590 <_dtoa_r+0x910>
 80045a6:	9b04      	ldr	r3, [sp, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	dc37      	bgt.n	800461c <_dtoa_r+0x99c>
 80045ac:	9b07      	ldr	r3, [sp, #28]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	dd34      	ble.n	800461c <_dtoa_r+0x99c>
 80045b2:	9b04      	ldr	r3, [sp, #16]
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	b963      	cbnz	r3, 80045d4 <_dtoa_r+0x954>
 80045ba:	4631      	mov	r1, r6
 80045bc:	2205      	movs	r2, #5
 80045be:	4620      	mov	r0, r4
 80045c0:	f000 fab2 	bl	8004b28 <__multadd>
 80045c4:	4601      	mov	r1, r0
 80045c6:	4606      	mov	r6, r0
 80045c8:	4650      	mov	r0, sl
 80045ca:	f000 fcc7 	bl	8004f5c <__mcmp>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f73f adbb 	bgt.w	800414a <_dtoa_r+0x4ca>
 80045d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045d6:	9d00      	ldr	r5, [sp, #0]
 80045d8:	ea6f 0b03 	mvn.w	fp, r3
 80045dc:	f04f 0800 	mov.w	r8, #0
 80045e0:	4631      	mov	r1, r6
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 fa7e 	bl	8004ae4 <_Bfree>
 80045e8:	2f00      	cmp	r7, #0
 80045ea:	f43f aeab 	beq.w	8004344 <_dtoa_r+0x6c4>
 80045ee:	f1b8 0f00 	cmp.w	r8, #0
 80045f2:	d005      	beq.n	8004600 <_dtoa_r+0x980>
 80045f4:	45b8      	cmp	r8, r7
 80045f6:	d003      	beq.n	8004600 <_dtoa_r+0x980>
 80045f8:	4641      	mov	r1, r8
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 fa72 	bl	8004ae4 <_Bfree>
 8004600:	4639      	mov	r1, r7
 8004602:	4620      	mov	r0, r4
 8004604:	f000 fa6e 	bl	8004ae4 <_Bfree>
 8004608:	e69c      	b.n	8004344 <_dtoa_r+0x6c4>
 800460a:	2600      	movs	r6, #0
 800460c:	4637      	mov	r7, r6
 800460e:	e7e1      	b.n	80045d4 <_dtoa_r+0x954>
 8004610:	46bb      	mov	fp, r7
 8004612:	4637      	mov	r7, r6
 8004614:	e599      	b.n	800414a <_dtoa_r+0x4ca>
 8004616:	bf00      	nop
 8004618:	40240000 	.word	0x40240000
 800461c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80c8 	beq.w	80047b4 <_dtoa_r+0xb34>
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	2d00      	cmp	r5, #0
 800462a:	dd05      	ble.n	8004638 <_dtoa_r+0x9b8>
 800462c:	4639      	mov	r1, r7
 800462e:	462a      	mov	r2, r5
 8004630:	4620      	mov	r0, r4
 8004632:	f000 fc27 	bl	8004e84 <__lshift>
 8004636:	4607      	mov	r7, r0
 8004638:	f1b8 0f00 	cmp.w	r8, #0
 800463c:	d05b      	beq.n	80046f6 <_dtoa_r+0xa76>
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4620      	mov	r0, r4
 8004642:	f000 fa0f 	bl	8004a64 <_Balloc>
 8004646:	4605      	mov	r5, r0
 8004648:	b928      	cbnz	r0, 8004656 <_dtoa_r+0x9d6>
 800464a:	4b83      	ldr	r3, [pc, #524]	; (8004858 <_dtoa_r+0xbd8>)
 800464c:	4602      	mov	r2, r0
 800464e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004652:	f7ff bb2e 	b.w	8003cb2 <_dtoa_r+0x32>
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	3202      	adds	r2, #2
 800465a:	0092      	lsls	r2, r2, #2
 800465c:	f107 010c 	add.w	r1, r7, #12
 8004660:	300c      	adds	r0, #12
 8004662:	f000 ffab 	bl	80055bc <memcpy>
 8004666:	2201      	movs	r2, #1
 8004668:	4629      	mov	r1, r5
 800466a:	4620      	mov	r0, r4
 800466c:	f000 fc0a 	bl	8004e84 <__lshift>
 8004670:	9b00      	ldr	r3, [sp, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800467a:	4413      	add	r3, r2
 800467c:	9308      	str	r3, [sp, #32]
 800467e:	9b02      	ldr	r3, [sp, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	46b8      	mov	r8, r7
 8004686:	9306      	str	r3, [sp, #24]
 8004688:	4607      	mov	r7, r0
 800468a:	9b04      	ldr	r3, [sp, #16]
 800468c:	4631      	mov	r1, r6
 800468e:	3b01      	subs	r3, #1
 8004690:	4650      	mov	r0, sl
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	f7ff fa69 	bl	8003b6a <quorem>
 8004698:	4641      	mov	r1, r8
 800469a:	9002      	str	r0, [sp, #8]
 800469c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80046a0:	4650      	mov	r0, sl
 80046a2:	f000 fc5b 	bl	8004f5c <__mcmp>
 80046a6:	463a      	mov	r2, r7
 80046a8:	9005      	str	r0, [sp, #20]
 80046aa:	4631      	mov	r1, r6
 80046ac:	4620      	mov	r0, r4
 80046ae:	f000 fc71 	bl	8004f94 <__mdiff>
 80046b2:	68c2      	ldr	r2, [r0, #12]
 80046b4:	4605      	mov	r5, r0
 80046b6:	bb02      	cbnz	r2, 80046fa <_dtoa_r+0xa7a>
 80046b8:	4601      	mov	r1, r0
 80046ba:	4650      	mov	r0, sl
 80046bc:	f000 fc4e 	bl	8004f5c <__mcmp>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4629      	mov	r1, r5
 80046c4:	4620      	mov	r0, r4
 80046c6:	9209      	str	r2, [sp, #36]	; 0x24
 80046c8:	f000 fa0c 	bl	8004ae4 <_Bfree>
 80046cc:	9b07      	ldr	r3, [sp, #28]
 80046ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d0:	9d04      	ldr	r5, [sp, #16]
 80046d2:	ea43 0102 	orr.w	r1, r3, r2
 80046d6:	9b06      	ldr	r3, [sp, #24]
 80046d8:	4319      	orrs	r1, r3
 80046da:	d110      	bne.n	80046fe <_dtoa_r+0xa7e>
 80046dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046e0:	d029      	beq.n	8004736 <_dtoa_r+0xab6>
 80046e2:	9b05      	ldr	r3, [sp, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dd02      	ble.n	80046ee <_dtoa_r+0xa6e>
 80046e8:	9b02      	ldr	r3, [sp, #8]
 80046ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80046ee:	9b01      	ldr	r3, [sp, #4]
 80046f0:	f883 9000 	strb.w	r9, [r3]
 80046f4:	e774      	b.n	80045e0 <_dtoa_r+0x960>
 80046f6:	4638      	mov	r0, r7
 80046f8:	e7ba      	b.n	8004670 <_dtoa_r+0x9f0>
 80046fa:	2201      	movs	r2, #1
 80046fc:	e7e1      	b.n	80046c2 <_dtoa_r+0xa42>
 80046fe:	9b05      	ldr	r3, [sp, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db04      	blt.n	800470e <_dtoa_r+0xa8e>
 8004704:	9907      	ldr	r1, [sp, #28]
 8004706:	430b      	orrs	r3, r1
 8004708:	9906      	ldr	r1, [sp, #24]
 800470a:	430b      	orrs	r3, r1
 800470c:	d120      	bne.n	8004750 <_dtoa_r+0xad0>
 800470e:	2a00      	cmp	r2, #0
 8004710:	dded      	ble.n	80046ee <_dtoa_r+0xa6e>
 8004712:	4651      	mov	r1, sl
 8004714:	2201      	movs	r2, #1
 8004716:	4620      	mov	r0, r4
 8004718:	f000 fbb4 	bl	8004e84 <__lshift>
 800471c:	4631      	mov	r1, r6
 800471e:	4682      	mov	sl, r0
 8004720:	f000 fc1c 	bl	8004f5c <__mcmp>
 8004724:	2800      	cmp	r0, #0
 8004726:	dc03      	bgt.n	8004730 <_dtoa_r+0xab0>
 8004728:	d1e1      	bne.n	80046ee <_dtoa_r+0xa6e>
 800472a:	f019 0f01 	tst.w	r9, #1
 800472e:	d0de      	beq.n	80046ee <_dtoa_r+0xa6e>
 8004730:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004734:	d1d8      	bne.n	80046e8 <_dtoa_r+0xa68>
 8004736:	9a01      	ldr	r2, [sp, #4]
 8004738:	2339      	movs	r3, #57	; 0x39
 800473a:	7013      	strb	r3, [r2, #0]
 800473c:	462b      	mov	r3, r5
 800473e:	461d      	mov	r5, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004746:	2a39      	cmp	r2, #57	; 0x39
 8004748:	d06c      	beq.n	8004824 <_dtoa_r+0xba4>
 800474a:	3201      	adds	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e747      	b.n	80045e0 <_dtoa_r+0x960>
 8004750:	2a00      	cmp	r2, #0
 8004752:	dd07      	ble.n	8004764 <_dtoa_r+0xae4>
 8004754:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004758:	d0ed      	beq.n	8004736 <_dtoa_r+0xab6>
 800475a:	9a01      	ldr	r2, [sp, #4]
 800475c:	f109 0301 	add.w	r3, r9, #1
 8004760:	7013      	strb	r3, [r2, #0]
 8004762:	e73d      	b.n	80045e0 <_dtoa_r+0x960>
 8004764:	9b04      	ldr	r3, [sp, #16]
 8004766:	9a08      	ldr	r2, [sp, #32]
 8004768:	f803 9c01 	strb.w	r9, [r3, #-1]
 800476c:	4293      	cmp	r3, r2
 800476e:	d043      	beq.n	80047f8 <_dtoa_r+0xb78>
 8004770:	4651      	mov	r1, sl
 8004772:	2300      	movs	r3, #0
 8004774:	220a      	movs	r2, #10
 8004776:	4620      	mov	r0, r4
 8004778:	f000 f9d6 	bl	8004b28 <__multadd>
 800477c:	45b8      	cmp	r8, r7
 800477e:	4682      	mov	sl, r0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	f04f 020a 	mov.w	r2, #10
 8004788:	4641      	mov	r1, r8
 800478a:	4620      	mov	r0, r4
 800478c:	d107      	bne.n	800479e <_dtoa_r+0xb1e>
 800478e:	f000 f9cb 	bl	8004b28 <__multadd>
 8004792:	4680      	mov	r8, r0
 8004794:	4607      	mov	r7, r0
 8004796:	9b04      	ldr	r3, [sp, #16]
 8004798:	3301      	adds	r3, #1
 800479a:	9304      	str	r3, [sp, #16]
 800479c:	e775      	b.n	800468a <_dtoa_r+0xa0a>
 800479e:	f000 f9c3 	bl	8004b28 <__multadd>
 80047a2:	4639      	mov	r1, r7
 80047a4:	4680      	mov	r8, r0
 80047a6:	2300      	movs	r3, #0
 80047a8:	220a      	movs	r2, #10
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 f9bc 	bl	8004b28 <__multadd>
 80047b0:	4607      	mov	r7, r0
 80047b2:	e7f0      	b.n	8004796 <_dtoa_r+0xb16>
 80047b4:	9b04      	ldr	r3, [sp, #16]
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	9d00      	ldr	r5, [sp, #0]
 80047ba:	4631      	mov	r1, r6
 80047bc:	4650      	mov	r0, sl
 80047be:	f7ff f9d4 	bl	8003b6a <quorem>
 80047c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047c6:	9b00      	ldr	r3, [sp, #0]
 80047c8:	f805 9b01 	strb.w	r9, [r5], #1
 80047cc:	1aea      	subs	r2, r5, r3
 80047ce:	9b01      	ldr	r3, [sp, #4]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	dd07      	ble.n	80047e4 <_dtoa_r+0xb64>
 80047d4:	4651      	mov	r1, sl
 80047d6:	2300      	movs	r3, #0
 80047d8:	220a      	movs	r2, #10
 80047da:	4620      	mov	r0, r4
 80047dc:	f000 f9a4 	bl	8004b28 <__multadd>
 80047e0:	4682      	mov	sl, r0
 80047e2:	e7ea      	b.n	80047ba <_dtoa_r+0xb3a>
 80047e4:	9b01      	ldr	r3, [sp, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfc8      	it	gt
 80047ea:	461d      	movgt	r5, r3
 80047ec:	9b00      	ldr	r3, [sp, #0]
 80047ee:	bfd8      	it	le
 80047f0:	2501      	movle	r5, #1
 80047f2:	441d      	add	r5, r3
 80047f4:	f04f 0800 	mov.w	r8, #0
 80047f8:	4651      	mov	r1, sl
 80047fa:	2201      	movs	r2, #1
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 fb41 	bl	8004e84 <__lshift>
 8004802:	4631      	mov	r1, r6
 8004804:	4682      	mov	sl, r0
 8004806:	f000 fba9 	bl	8004f5c <__mcmp>
 800480a:	2800      	cmp	r0, #0
 800480c:	dc96      	bgt.n	800473c <_dtoa_r+0xabc>
 800480e:	d102      	bne.n	8004816 <_dtoa_r+0xb96>
 8004810:	f019 0f01 	tst.w	r9, #1
 8004814:	d192      	bne.n	800473c <_dtoa_r+0xabc>
 8004816:	462b      	mov	r3, r5
 8004818:	461d      	mov	r5, r3
 800481a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800481e:	2a30      	cmp	r2, #48	; 0x30
 8004820:	d0fa      	beq.n	8004818 <_dtoa_r+0xb98>
 8004822:	e6dd      	b.n	80045e0 <_dtoa_r+0x960>
 8004824:	9a00      	ldr	r2, [sp, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d189      	bne.n	800473e <_dtoa_r+0xabe>
 800482a:	f10b 0b01 	add.w	fp, fp, #1
 800482e:	2331      	movs	r3, #49	; 0x31
 8004830:	e796      	b.n	8004760 <_dtoa_r+0xae0>
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <_dtoa_r+0xbdc>)
 8004834:	f7ff ba99 	b.w	8003d6a <_dtoa_r+0xea>
 8004838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800483a:	2b00      	cmp	r3, #0
 800483c:	f47f aa6d 	bne.w	8003d1a <_dtoa_r+0x9a>
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <_dtoa_r+0xbe0>)
 8004842:	f7ff ba92 	b.w	8003d6a <_dtoa_r+0xea>
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	dcb5      	bgt.n	80047b8 <_dtoa_r+0xb38>
 800484c:	9b07      	ldr	r3, [sp, #28]
 800484e:	2b02      	cmp	r3, #2
 8004850:	f73f aeb1 	bgt.w	80045b6 <_dtoa_r+0x936>
 8004854:	e7b0      	b.n	80047b8 <_dtoa_r+0xb38>
 8004856:	bf00      	nop
 8004858:	08005faf 	.word	0x08005faf
 800485c:	08005f0f 	.word	0x08005f0f
 8004860:	08005f33 	.word	0x08005f33

08004864 <_free_r>:
 8004864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004866:	2900      	cmp	r1, #0
 8004868:	d044      	beq.n	80048f4 <_free_r+0x90>
 800486a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800486e:	9001      	str	r0, [sp, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f1a1 0404 	sub.w	r4, r1, #4
 8004876:	bfb8      	it	lt
 8004878:	18e4      	addlt	r4, r4, r3
 800487a:	f000 f8e7 	bl	8004a4c <__malloc_lock>
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <_free_r+0x94>)
 8004880:	9801      	ldr	r0, [sp, #4]
 8004882:	6813      	ldr	r3, [r2, #0]
 8004884:	b933      	cbnz	r3, 8004894 <_free_r+0x30>
 8004886:	6063      	str	r3, [r4, #4]
 8004888:	6014      	str	r4, [r2, #0]
 800488a:	b003      	add	sp, #12
 800488c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004890:	f000 b8e2 	b.w	8004a58 <__malloc_unlock>
 8004894:	42a3      	cmp	r3, r4
 8004896:	d908      	bls.n	80048aa <_free_r+0x46>
 8004898:	6825      	ldr	r5, [r4, #0]
 800489a:	1961      	adds	r1, r4, r5
 800489c:	428b      	cmp	r3, r1
 800489e:	bf01      	itttt	eq
 80048a0:	6819      	ldreq	r1, [r3, #0]
 80048a2:	685b      	ldreq	r3, [r3, #4]
 80048a4:	1949      	addeq	r1, r1, r5
 80048a6:	6021      	streq	r1, [r4, #0]
 80048a8:	e7ed      	b.n	8004886 <_free_r+0x22>
 80048aa:	461a      	mov	r2, r3
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b10b      	cbz	r3, 80048b4 <_free_r+0x50>
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	d9fa      	bls.n	80048aa <_free_r+0x46>
 80048b4:	6811      	ldr	r1, [r2, #0]
 80048b6:	1855      	adds	r5, r2, r1
 80048b8:	42a5      	cmp	r5, r4
 80048ba:	d10b      	bne.n	80048d4 <_free_r+0x70>
 80048bc:	6824      	ldr	r4, [r4, #0]
 80048be:	4421      	add	r1, r4
 80048c0:	1854      	adds	r4, r2, r1
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	6011      	str	r1, [r2, #0]
 80048c6:	d1e0      	bne.n	800488a <_free_r+0x26>
 80048c8:	681c      	ldr	r4, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	6053      	str	r3, [r2, #4]
 80048ce:	440c      	add	r4, r1
 80048d0:	6014      	str	r4, [r2, #0]
 80048d2:	e7da      	b.n	800488a <_free_r+0x26>
 80048d4:	d902      	bls.n	80048dc <_free_r+0x78>
 80048d6:	230c      	movs	r3, #12
 80048d8:	6003      	str	r3, [r0, #0]
 80048da:	e7d6      	b.n	800488a <_free_r+0x26>
 80048dc:	6825      	ldr	r5, [r4, #0]
 80048de:	1961      	adds	r1, r4, r5
 80048e0:	428b      	cmp	r3, r1
 80048e2:	bf04      	itt	eq
 80048e4:	6819      	ldreq	r1, [r3, #0]
 80048e6:	685b      	ldreq	r3, [r3, #4]
 80048e8:	6063      	str	r3, [r4, #4]
 80048ea:	bf04      	itt	eq
 80048ec:	1949      	addeq	r1, r1, r5
 80048ee:	6021      	streq	r1, [r4, #0]
 80048f0:	6054      	str	r4, [r2, #4]
 80048f2:	e7ca      	b.n	800488a <_free_r+0x26>
 80048f4:	b003      	add	sp, #12
 80048f6:	bd30      	pop	{r4, r5, pc}
 80048f8:	20008e04 	.word	0x20008e04

080048fc <malloc>:
 80048fc:	4b02      	ldr	r3, [pc, #8]	; (8004908 <malloc+0xc>)
 80048fe:	4601      	mov	r1, r0
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	f000 b823 	b.w	800494c <_malloc_r>
 8004906:	bf00      	nop
 8004908:	20007d64 	.word	0x20007d64

0800490c <sbrk_aligned>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4e0e      	ldr	r6, [pc, #56]	; (8004948 <sbrk_aligned+0x3c>)
 8004910:	460c      	mov	r4, r1
 8004912:	6831      	ldr	r1, [r6, #0]
 8004914:	4605      	mov	r5, r0
 8004916:	b911      	cbnz	r1, 800491e <sbrk_aligned+0x12>
 8004918:	f000 fe40 	bl	800559c <_sbrk_r>
 800491c:	6030      	str	r0, [r6, #0]
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fe3b 	bl	800559c <_sbrk_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d00a      	beq.n	8004940 <sbrk_aligned+0x34>
 800492a:	1cc4      	adds	r4, r0, #3
 800492c:	f024 0403 	bic.w	r4, r4, #3
 8004930:	42a0      	cmp	r0, r4
 8004932:	d007      	beq.n	8004944 <sbrk_aligned+0x38>
 8004934:	1a21      	subs	r1, r4, r0
 8004936:	4628      	mov	r0, r5
 8004938:	f000 fe30 	bl	800559c <_sbrk_r>
 800493c:	3001      	adds	r0, #1
 800493e:	d101      	bne.n	8004944 <sbrk_aligned+0x38>
 8004940:	f04f 34ff 	mov.w	r4, #4294967295
 8004944:	4620      	mov	r0, r4
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	20008e08 	.word	0x20008e08

0800494c <_malloc_r>:
 800494c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004950:	1ccd      	adds	r5, r1, #3
 8004952:	f025 0503 	bic.w	r5, r5, #3
 8004956:	3508      	adds	r5, #8
 8004958:	2d0c      	cmp	r5, #12
 800495a:	bf38      	it	cc
 800495c:	250c      	movcc	r5, #12
 800495e:	2d00      	cmp	r5, #0
 8004960:	4607      	mov	r7, r0
 8004962:	db01      	blt.n	8004968 <_malloc_r+0x1c>
 8004964:	42a9      	cmp	r1, r5
 8004966:	d905      	bls.n	8004974 <_malloc_r+0x28>
 8004968:	230c      	movs	r3, #12
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	2600      	movs	r6, #0
 800496e:	4630      	mov	r0, r6
 8004970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a48 <_malloc_r+0xfc>
 8004978:	f000 f868 	bl	8004a4c <__malloc_lock>
 800497c:	f8d8 3000 	ldr.w	r3, [r8]
 8004980:	461c      	mov	r4, r3
 8004982:	bb5c      	cbnz	r4, 80049dc <_malloc_r+0x90>
 8004984:	4629      	mov	r1, r5
 8004986:	4638      	mov	r0, r7
 8004988:	f7ff ffc0 	bl	800490c <sbrk_aligned>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	4604      	mov	r4, r0
 8004990:	d155      	bne.n	8004a3e <_malloc_r+0xf2>
 8004992:	f8d8 4000 	ldr.w	r4, [r8]
 8004996:	4626      	mov	r6, r4
 8004998:	2e00      	cmp	r6, #0
 800499a:	d145      	bne.n	8004a28 <_malloc_r+0xdc>
 800499c:	2c00      	cmp	r4, #0
 800499e:	d048      	beq.n	8004a32 <_malloc_r+0xe6>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	4631      	mov	r1, r6
 80049a4:	4638      	mov	r0, r7
 80049a6:	eb04 0903 	add.w	r9, r4, r3
 80049aa:	f000 fdf7 	bl	800559c <_sbrk_r>
 80049ae:	4581      	cmp	r9, r0
 80049b0:	d13f      	bne.n	8004a32 <_malloc_r+0xe6>
 80049b2:	6821      	ldr	r1, [r4, #0]
 80049b4:	1a6d      	subs	r5, r5, r1
 80049b6:	4629      	mov	r1, r5
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7ff ffa7 	bl	800490c <sbrk_aligned>
 80049be:	3001      	adds	r0, #1
 80049c0:	d037      	beq.n	8004a32 <_malloc_r+0xe6>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	442b      	add	r3, r5
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	f8d8 3000 	ldr.w	r3, [r8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d038      	beq.n	8004a42 <_malloc_r+0xf6>
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	42a2      	cmp	r2, r4
 80049d4:	d12b      	bne.n	8004a2e <_malloc_r+0xe2>
 80049d6:	2200      	movs	r2, #0
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	e00f      	b.n	80049fc <_malloc_r+0xb0>
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	1b52      	subs	r2, r2, r5
 80049e0:	d41f      	bmi.n	8004a22 <_malloc_r+0xd6>
 80049e2:	2a0b      	cmp	r2, #11
 80049e4:	d917      	bls.n	8004a16 <_malloc_r+0xca>
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	6025      	str	r5, [r4, #0]
 80049ec:	bf18      	it	ne
 80049ee:	6059      	strne	r1, [r3, #4]
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	bf08      	it	eq
 80049f4:	f8c8 1000 	streq.w	r1, [r8]
 80049f8:	5162      	str	r2, [r4, r5]
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	4638      	mov	r0, r7
 80049fe:	f104 060b 	add.w	r6, r4, #11
 8004a02:	f000 f829 	bl	8004a58 <__malloc_unlock>
 8004a06:	f026 0607 	bic.w	r6, r6, #7
 8004a0a:	1d23      	adds	r3, r4, #4
 8004a0c:	1af2      	subs	r2, r6, r3
 8004a0e:	d0ae      	beq.n	800496e <_malloc_r+0x22>
 8004a10:	1b9b      	subs	r3, r3, r6
 8004a12:	50a3      	str	r3, [r4, r2]
 8004a14:	e7ab      	b.n	800496e <_malloc_r+0x22>
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	6862      	ldr	r2, [r4, #4]
 8004a1a:	d1dd      	bne.n	80049d8 <_malloc_r+0x8c>
 8004a1c:	f8c8 2000 	str.w	r2, [r8]
 8004a20:	e7ec      	b.n	80049fc <_malloc_r+0xb0>
 8004a22:	4623      	mov	r3, r4
 8004a24:	6864      	ldr	r4, [r4, #4]
 8004a26:	e7ac      	b.n	8004982 <_malloc_r+0x36>
 8004a28:	4634      	mov	r4, r6
 8004a2a:	6876      	ldr	r6, [r6, #4]
 8004a2c:	e7b4      	b.n	8004998 <_malloc_r+0x4c>
 8004a2e:	4613      	mov	r3, r2
 8004a30:	e7cc      	b.n	80049cc <_malloc_r+0x80>
 8004a32:	230c      	movs	r3, #12
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	4638      	mov	r0, r7
 8004a38:	f000 f80e 	bl	8004a58 <__malloc_unlock>
 8004a3c:	e797      	b.n	800496e <_malloc_r+0x22>
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	e7dc      	b.n	80049fc <_malloc_r+0xb0>
 8004a42:	605b      	str	r3, [r3, #4]
 8004a44:	deff      	udf	#255	; 0xff
 8004a46:	bf00      	nop
 8004a48:	20008e04 	.word	0x20008e04

08004a4c <__malloc_lock>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__malloc_lock+0x8>)
 8004a4e:	f7ff b88a 	b.w	8003b66 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	20008e00 	.word	0x20008e00

08004a58 <__malloc_unlock>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__malloc_unlock+0x8>)
 8004a5a:	f7ff b885 	b.w	8003b68 <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	20008e00 	.word	0x20008e00

08004a64 <_Balloc>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	69c6      	ldr	r6, [r0, #28]
 8004a68:	4604      	mov	r4, r0
 8004a6a:	460d      	mov	r5, r1
 8004a6c:	b976      	cbnz	r6, 8004a8c <_Balloc+0x28>
 8004a6e:	2010      	movs	r0, #16
 8004a70:	f7ff ff44 	bl	80048fc <malloc>
 8004a74:	4602      	mov	r2, r0
 8004a76:	61e0      	str	r0, [r4, #28]
 8004a78:	b920      	cbnz	r0, 8004a84 <_Balloc+0x20>
 8004a7a:	4b18      	ldr	r3, [pc, #96]	; (8004adc <_Balloc+0x78>)
 8004a7c:	4818      	ldr	r0, [pc, #96]	; (8004ae0 <_Balloc+0x7c>)
 8004a7e:	216b      	movs	r1, #107	; 0x6b
 8004a80:	f000 fdaa 	bl	80055d8 <__assert_func>
 8004a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a88:	6006      	str	r6, [r0, #0]
 8004a8a:	60c6      	str	r6, [r0, #12]
 8004a8c:	69e6      	ldr	r6, [r4, #28]
 8004a8e:	68f3      	ldr	r3, [r6, #12]
 8004a90:	b183      	cbz	r3, 8004ab4 <_Balloc+0x50>
 8004a92:	69e3      	ldr	r3, [r4, #28]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a9a:	b9b8      	cbnz	r0, 8004acc <_Balloc+0x68>
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8004aa2:	1d72      	adds	r2, r6, #5
 8004aa4:	0092      	lsls	r2, r2, #2
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 fdb4 	bl	8005614 <_calloc_r>
 8004aac:	b160      	cbz	r0, 8004ac8 <_Balloc+0x64>
 8004aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ab2:	e00e      	b.n	8004ad2 <_Balloc+0x6e>
 8004ab4:	2221      	movs	r2, #33	; 0x21
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 fdab 	bl	8005614 <_calloc_r>
 8004abe:	69e3      	ldr	r3, [r4, #28]
 8004ac0:	60f0      	str	r0, [r6, #12]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e4      	bne.n	8004a92 <_Balloc+0x2e>
 8004ac8:	2000      	movs	r0, #0
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	6802      	ldr	r2, [r0, #0]
 8004ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ad8:	e7f7      	b.n	8004aca <_Balloc+0x66>
 8004ada:	bf00      	nop
 8004adc:	08005f40 	.word	0x08005f40
 8004ae0:	08005fc0 	.word	0x08005fc0

08004ae4 <_Bfree>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	69c6      	ldr	r6, [r0, #28]
 8004ae8:	4605      	mov	r5, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	b976      	cbnz	r6, 8004b0c <_Bfree+0x28>
 8004aee:	2010      	movs	r0, #16
 8004af0:	f7ff ff04 	bl	80048fc <malloc>
 8004af4:	4602      	mov	r2, r0
 8004af6:	61e8      	str	r0, [r5, #28]
 8004af8:	b920      	cbnz	r0, 8004b04 <_Bfree+0x20>
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <_Bfree+0x3c>)
 8004afc:	4809      	ldr	r0, [pc, #36]	; (8004b24 <_Bfree+0x40>)
 8004afe:	218f      	movs	r1, #143	; 0x8f
 8004b00:	f000 fd6a 	bl	80055d8 <__assert_func>
 8004b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b08:	6006      	str	r6, [r0, #0]
 8004b0a:	60c6      	str	r6, [r0, #12]
 8004b0c:	b13c      	cbz	r4, 8004b1e <_Bfree+0x3a>
 8004b0e:	69eb      	ldr	r3, [r5, #28]
 8004b10:	6862      	ldr	r2, [r4, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b18:	6021      	str	r1, [r4, #0]
 8004b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	08005f40 	.word	0x08005f40
 8004b24:	08005fc0 	.word	0x08005fc0

08004b28 <__multadd>:
 8004b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2c:	690d      	ldr	r5, [r1, #16]
 8004b2e:	4607      	mov	r7, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	461e      	mov	r6, r3
 8004b34:	f101 0c14 	add.w	ip, r1, #20
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8004b3e:	b299      	uxth	r1, r3
 8004b40:	fb02 6101 	mla	r1, r2, r1, r6
 8004b44:	0c1e      	lsrs	r6, r3, #16
 8004b46:	0c0b      	lsrs	r3, r1, #16
 8004b48:	fb02 3306 	mla	r3, r2, r6, r3
 8004b4c:	b289      	uxth	r1, r1
 8004b4e:	3001      	adds	r0, #1
 8004b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b54:	4285      	cmp	r5, r0
 8004b56:	f84c 1b04 	str.w	r1, [ip], #4
 8004b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b5e:	dcec      	bgt.n	8004b3a <__multadd+0x12>
 8004b60:	b30e      	cbz	r6, 8004ba6 <__multadd+0x7e>
 8004b62:	68a3      	ldr	r3, [r4, #8]
 8004b64:	42ab      	cmp	r3, r5
 8004b66:	dc19      	bgt.n	8004b9c <__multadd+0x74>
 8004b68:	6861      	ldr	r1, [r4, #4]
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	3101      	adds	r1, #1
 8004b6e:	f7ff ff79 	bl	8004a64 <_Balloc>
 8004b72:	4680      	mov	r8, r0
 8004b74:	b928      	cbnz	r0, 8004b82 <__multadd+0x5a>
 8004b76:	4602      	mov	r2, r0
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <__multadd+0x84>)
 8004b7a:	480d      	ldr	r0, [pc, #52]	; (8004bb0 <__multadd+0x88>)
 8004b7c:	21ba      	movs	r1, #186	; 0xba
 8004b7e:	f000 fd2b 	bl	80055d8 <__assert_func>
 8004b82:	6922      	ldr	r2, [r4, #16]
 8004b84:	3202      	adds	r2, #2
 8004b86:	f104 010c 	add.w	r1, r4, #12
 8004b8a:	0092      	lsls	r2, r2, #2
 8004b8c:	300c      	adds	r0, #12
 8004b8e:	f000 fd15 	bl	80055bc <memcpy>
 8004b92:	4621      	mov	r1, r4
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff ffa5 	bl	8004ae4 <_Bfree>
 8004b9a:	4644      	mov	r4, r8
 8004b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	615e      	str	r6, [r3, #20]
 8004ba4:	6125      	str	r5, [r4, #16]
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bac:	08005faf 	.word	0x08005faf
 8004bb0:	08005fc0 	.word	0x08005fc0

08004bb4 <__hi0bits>:
 8004bb4:	0c03      	lsrs	r3, r0, #16
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	b9d3      	cbnz	r3, 8004bf0 <__hi0bits+0x3c>
 8004bba:	0400      	lsls	r0, r0, #16
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004bc2:	bf04      	itt	eq
 8004bc4:	0200      	lsleq	r0, r0, #8
 8004bc6:	3308      	addeq	r3, #8
 8004bc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004bcc:	bf04      	itt	eq
 8004bce:	0100      	lsleq	r0, r0, #4
 8004bd0:	3304      	addeq	r3, #4
 8004bd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004bd6:	bf04      	itt	eq
 8004bd8:	0080      	lsleq	r0, r0, #2
 8004bda:	3302      	addeq	r3, #2
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	db05      	blt.n	8004bec <__hi0bits+0x38>
 8004be0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004be4:	f103 0301 	add.w	r3, r3, #1
 8004be8:	bf08      	it	eq
 8004bea:	2320      	moveq	r3, #32
 8004bec:	4618      	mov	r0, r3
 8004bee:	4770      	bx	lr
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e7e4      	b.n	8004bbe <__hi0bits+0xa>

08004bf4 <__lo0bits>:
 8004bf4:	6803      	ldr	r3, [r0, #0]
 8004bf6:	f013 0207 	ands.w	r2, r3, #7
 8004bfa:	d00c      	beq.n	8004c16 <__lo0bits+0x22>
 8004bfc:	07d9      	lsls	r1, r3, #31
 8004bfe:	d422      	bmi.n	8004c46 <__lo0bits+0x52>
 8004c00:	079a      	lsls	r2, r3, #30
 8004c02:	bf49      	itett	mi
 8004c04:	085b      	lsrmi	r3, r3, #1
 8004c06:	089b      	lsrpl	r3, r3, #2
 8004c08:	6003      	strmi	r3, [r0, #0]
 8004c0a:	2201      	movmi	r2, #1
 8004c0c:	bf5c      	itt	pl
 8004c0e:	6003      	strpl	r3, [r0, #0]
 8004c10:	2202      	movpl	r2, #2
 8004c12:	4610      	mov	r0, r2
 8004c14:	4770      	bx	lr
 8004c16:	b299      	uxth	r1, r3
 8004c18:	b909      	cbnz	r1, 8004c1e <__lo0bits+0x2a>
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	b2d9      	uxtb	r1, r3
 8004c20:	b909      	cbnz	r1, 8004c26 <__lo0bits+0x32>
 8004c22:	3208      	adds	r2, #8
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	0719      	lsls	r1, r3, #28
 8004c28:	bf04      	itt	eq
 8004c2a:	091b      	lsreq	r3, r3, #4
 8004c2c:	3204      	addeq	r2, #4
 8004c2e:	0799      	lsls	r1, r3, #30
 8004c30:	bf04      	itt	eq
 8004c32:	089b      	lsreq	r3, r3, #2
 8004c34:	3202      	addeq	r2, #2
 8004c36:	07d9      	lsls	r1, r3, #31
 8004c38:	d403      	bmi.n	8004c42 <__lo0bits+0x4e>
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	f102 0201 	add.w	r2, r2, #1
 8004c40:	d003      	beq.n	8004c4a <__lo0bits+0x56>
 8004c42:	6003      	str	r3, [r0, #0]
 8004c44:	e7e5      	b.n	8004c12 <__lo0bits+0x1e>
 8004c46:	2200      	movs	r2, #0
 8004c48:	e7e3      	b.n	8004c12 <__lo0bits+0x1e>
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	e7e1      	b.n	8004c12 <__lo0bits+0x1e>
	...

08004c50 <__i2b>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	460c      	mov	r4, r1
 8004c54:	2101      	movs	r1, #1
 8004c56:	f7ff ff05 	bl	8004a64 <_Balloc>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	b928      	cbnz	r0, 8004c6a <__i2b+0x1a>
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <__i2b+0x24>)
 8004c60:	4805      	ldr	r0, [pc, #20]	; (8004c78 <__i2b+0x28>)
 8004c62:	f240 1145 	movw	r1, #325	; 0x145
 8004c66:	f000 fcb7 	bl	80055d8 <__assert_func>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	6144      	str	r4, [r0, #20]
 8004c6e:	6103      	str	r3, [r0, #16]
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	bf00      	nop
 8004c74:	08005faf 	.word	0x08005faf
 8004c78:	08005fc0 	.word	0x08005fc0

08004c7c <__multiply>:
 8004c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	4691      	mov	r9, r2
 8004c82:	690a      	ldr	r2, [r1, #16]
 8004c84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	bfb8      	it	lt
 8004c8c:	460b      	movlt	r3, r1
 8004c8e:	460c      	mov	r4, r1
 8004c90:	bfbc      	itt	lt
 8004c92:	464c      	movlt	r4, r9
 8004c94:	4699      	movlt	r9, r3
 8004c96:	6927      	ldr	r7, [r4, #16]
 8004c98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c9c:	68a3      	ldr	r3, [r4, #8]
 8004c9e:	6861      	ldr	r1, [r4, #4]
 8004ca0:	eb07 060a 	add.w	r6, r7, sl
 8004ca4:	42b3      	cmp	r3, r6
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	bfb8      	it	lt
 8004caa:	3101      	addlt	r1, #1
 8004cac:	f7ff feda 	bl	8004a64 <_Balloc>
 8004cb0:	b930      	cbnz	r0, 8004cc0 <__multiply+0x44>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <__multiply+0x14c>)
 8004cb6:	4845      	ldr	r0, [pc, #276]	; (8004dcc <__multiply+0x150>)
 8004cb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004cbc:	f000 fc8c 	bl	80055d8 <__assert_func>
 8004cc0:	f100 0514 	add.w	r5, r0, #20
 8004cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cc8:	462b      	mov	r3, r5
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4543      	cmp	r3, r8
 8004cce:	d321      	bcc.n	8004d14 <__multiply+0x98>
 8004cd0:	f104 0314 	add.w	r3, r4, #20
 8004cd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004cd8:	f109 0314 	add.w	r3, r9, #20
 8004cdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004ce0:	9202      	str	r2, [sp, #8]
 8004ce2:	1b3a      	subs	r2, r7, r4
 8004ce4:	3a15      	subs	r2, #21
 8004ce6:	f022 0203 	bic.w	r2, r2, #3
 8004cea:	3204      	adds	r2, #4
 8004cec:	f104 0115 	add.w	r1, r4, #21
 8004cf0:	428f      	cmp	r7, r1
 8004cf2:	bf38      	it	cc
 8004cf4:	2204      	movcc	r2, #4
 8004cf6:	9201      	str	r2, [sp, #4]
 8004cf8:	9a02      	ldr	r2, [sp, #8]
 8004cfa:	9303      	str	r3, [sp, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d80c      	bhi.n	8004d1a <__multiply+0x9e>
 8004d00:	2e00      	cmp	r6, #0
 8004d02:	dd03      	ble.n	8004d0c <__multiply+0x90>
 8004d04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d05b      	beq.n	8004dc4 <__multiply+0x148>
 8004d0c:	6106      	str	r6, [r0, #16]
 8004d0e:	b005      	add	sp, #20
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	f843 2b04 	str.w	r2, [r3], #4
 8004d18:	e7d8      	b.n	8004ccc <__multiply+0x50>
 8004d1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d1e:	f1ba 0f00 	cmp.w	sl, #0
 8004d22:	d024      	beq.n	8004d6e <__multiply+0xf2>
 8004d24:	f104 0e14 	add.w	lr, r4, #20
 8004d28:	46a9      	mov	r9, r5
 8004d2a:	f04f 0c00 	mov.w	ip, #0
 8004d2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d32:	f8d9 1000 	ldr.w	r1, [r9]
 8004d36:	fa1f fb82 	uxth.w	fp, r2
 8004d3a:	b289      	uxth	r1, r1
 8004d3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004d44:	f8d9 2000 	ldr.w	r2, [r9]
 8004d48:	4461      	add	r1, ip
 8004d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004d52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d56:	b289      	uxth	r1, r1
 8004d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d5c:	4577      	cmp	r7, lr
 8004d5e:	f849 1b04 	str.w	r1, [r9], #4
 8004d62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d66:	d8e2      	bhi.n	8004d2e <__multiply+0xb2>
 8004d68:	9a01      	ldr	r2, [sp, #4]
 8004d6a:	f845 c002 	str.w	ip, [r5, r2]
 8004d6e:	9a03      	ldr	r2, [sp, #12]
 8004d70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d74:	3304      	adds	r3, #4
 8004d76:	f1b9 0f00 	cmp.w	r9, #0
 8004d7a:	d021      	beq.n	8004dc0 <__multiply+0x144>
 8004d7c:	6829      	ldr	r1, [r5, #0]
 8004d7e:	f104 0c14 	add.w	ip, r4, #20
 8004d82:	46ae      	mov	lr, r5
 8004d84:	f04f 0a00 	mov.w	sl, #0
 8004d88:	f8bc b000 	ldrh.w	fp, [ip]
 8004d8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d90:	fb09 220b 	mla	r2, r9, fp, r2
 8004d94:	4452      	add	r2, sl
 8004d96:	b289      	uxth	r1, r1
 8004d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d9c:	f84e 1b04 	str.w	r1, [lr], #4
 8004da0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004da4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004da8:	f8be 1000 	ldrh.w	r1, [lr]
 8004dac:	fb09 110a 	mla	r1, r9, sl, r1
 8004db0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004db4:	4567      	cmp	r7, ip
 8004db6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004dba:	d8e5      	bhi.n	8004d88 <__multiply+0x10c>
 8004dbc:	9a01      	ldr	r2, [sp, #4]
 8004dbe:	50a9      	str	r1, [r5, r2]
 8004dc0:	3504      	adds	r5, #4
 8004dc2:	e799      	b.n	8004cf8 <__multiply+0x7c>
 8004dc4:	3e01      	subs	r6, #1
 8004dc6:	e79b      	b.n	8004d00 <__multiply+0x84>
 8004dc8:	08005faf 	.word	0x08005faf
 8004dcc:	08005fc0 	.word	0x08005fc0

08004dd0 <__pow5mult>:
 8004dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd4:	4615      	mov	r5, r2
 8004dd6:	f012 0203 	ands.w	r2, r2, #3
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460f      	mov	r7, r1
 8004dde:	d007      	beq.n	8004df0 <__pow5mult+0x20>
 8004de0:	4c25      	ldr	r4, [pc, #148]	; (8004e78 <__pow5mult+0xa8>)
 8004de2:	3a01      	subs	r2, #1
 8004de4:	2300      	movs	r3, #0
 8004de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dea:	f7ff fe9d 	bl	8004b28 <__multadd>
 8004dee:	4607      	mov	r7, r0
 8004df0:	10ad      	asrs	r5, r5, #2
 8004df2:	d03d      	beq.n	8004e70 <__pow5mult+0xa0>
 8004df4:	69f4      	ldr	r4, [r6, #28]
 8004df6:	b97c      	cbnz	r4, 8004e18 <__pow5mult+0x48>
 8004df8:	2010      	movs	r0, #16
 8004dfa:	f7ff fd7f 	bl	80048fc <malloc>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	61f0      	str	r0, [r6, #28]
 8004e02:	b928      	cbnz	r0, 8004e10 <__pow5mult+0x40>
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <__pow5mult+0xac>)
 8004e06:	481e      	ldr	r0, [pc, #120]	; (8004e80 <__pow5mult+0xb0>)
 8004e08:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004e0c:	f000 fbe4 	bl	80055d8 <__assert_func>
 8004e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e14:	6004      	str	r4, [r0, #0]
 8004e16:	60c4      	str	r4, [r0, #12]
 8004e18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e20:	b94c      	cbnz	r4, 8004e36 <__pow5mult+0x66>
 8004e22:	f240 2171 	movw	r1, #625	; 0x271
 8004e26:	4630      	mov	r0, r6
 8004e28:	f7ff ff12 	bl	8004c50 <__i2b>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e32:	4604      	mov	r4, r0
 8004e34:	6003      	str	r3, [r0, #0]
 8004e36:	f04f 0900 	mov.w	r9, #0
 8004e3a:	07eb      	lsls	r3, r5, #31
 8004e3c:	d50a      	bpl.n	8004e54 <__pow5mult+0x84>
 8004e3e:	4639      	mov	r1, r7
 8004e40:	4622      	mov	r2, r4
 8004e42:	4630      	mov	r0, r6
 8004e44:	f7ff ff1a 	bl	8004c7c <__multiply>
 8004e48:	4639      	mov	r1, r7
 8004e4a:	4680      	mov	r8, r0
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f7ff fe49 	bl	8004ae4 <_Bfree>
 8004e52:	4647      	mov	r7, r8
 8004e54:	106d      	asrs	r5, r5, #1
 8004e56:	d00b      	beq.n	8004e70 <__pow5mult+0xa0>
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	b938      	cbnz	r0, 8004e6c <__pow5mult+0x9c>
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4630      	mov	r0, r6
 8004e62:	f7ff ff0b 	bl	8004c7c <__multiply>
 8004e66:	6020      	str	r0, [r4, #0]
 8004e68:	f8c0 9000 	str.w	r9, [r0]
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	e7e4      	b.n	8004e3a <__pow5mult+0x6a>
 8004e70:	4638      	mov	r0, r7
 8004e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e76:	bf00      	nop
 8004e78:	08006110 	.word	0x08006110
 8004e7c:	08005f40 	.word	0x08005f40
 8004e80:	08005fc0 	.word	0x08005fc0

08004e84 <__lshift>:
 8004e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6849      	ldr	r1, [r1, #4]
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	4607      	mov	r7, r0
 8004e96:	4691      	mov	r9, r2
 8004e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e9c:	f108 0601 	add.w	r6, r8, #1
 8004ea0:	42b3      	cmp	r3, r6
 8004ea2:	db0b      	blt.n	8004ebc <__lshift+0x38>
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	f7ff fddd 	bl	8004a64 <_Balloc>
 8004eaa:	4605      	mov	r5, r0
 8004eac:	b948      	cbnz	r0, 8004ec2 <__lshift+0x3e>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <__lshift+0xd0>)
 8004eb2:	4829      	ldr	r0, [pc, #164]	; (8004f58 <__lshift+0xd4>)
 8004eb4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004eb8:	f000 fb8e 	bl	80055d8 <__assert_func>
 8004ebc:	3101      	adds	r1, #1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__lshift+0x1c>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f100 0114 	add.w	r1, r0, #20
 8004ec8:	f100 0210 	add.w	r2, r0, #16
 8004ecc:	4618      	mov	r0, r3
 8004ece:	4553      	cmp	r3, sl
 8004ed0:	db33      	blt.n	8004f3a <__lshift+0xb6>
 8004ed2:	6920      	ldr	r0, [r4, #16]
 8004ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ed8:	f104 0314 	add.w	r3, r4, #20
 8004edc:	f019 091f 	ands.w	r9, r9, #31
 8004ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ee8:	d02b      	beq.n	8004f42 <__lshift+0xbe>
 8004eea:	f1c9 0e20 	rsb	lr, r9, #32
 8004eee:	468a      	mov	sl, r1
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	fa00 f009 	lsl.w	r0, r0, r9
 8004ef8:	4310      	orrs	r0, r2
 8004efa:	f84a 0b04 	str.w	r0, [sl], #4
 8004efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f02:	459c      	cmp	ip, r3
 8004f04:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f08:	d8f3      	bhi.n	8004ef2 <__lshift+0x6e>
 8004f0a:	ebac 0304 	sub.w	r3, ip, r4
 8004f0e:	3b15      	subs	r3, #21
 8004f10:	f023 0303 	bic.w	r3, r3, #3
 8004f14:	3304      	adds	r3, #4
 8004f16:	f104 0015 	add.w	r0, r4, #21
 8004f1a:	4584      	cmp	ip, r0
 8004f1c:	bf38      	it	cc
 8004f1e:	2304      	movcc	r3, #4
 8004f20:	50ca      	str	r2, [r1, r3]
 8004f22:	b10a      	cbz	r2, 8004f28 <__lshift+0xa4>
 8004f24:	f108 0602 	add.w	r6, r8, #2
 8004f28:	3e01      	subs	r6, #1
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	612e      	str	r6, [r5, #16]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	f7ff fdd8 	bl	8004ae4 <_Bfree>
 8004f34:	4628      	mov	r0, r5
 8004f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f3e:	3301      	adds	r3, #1
 8004f40:	e7c5      	b.n	8004ece <__lshift+0x4a>
 8004f42:	3904      	subs	r1, #4
 8004f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f4c:	459c      	cmp	ip, r3
 8004f4e:	d8f9      	bhi.n	8004f44 <__lshift+0xc0>
 8004f50:	e7ea      	b.n	8004f28 <__lshift+0xa4>
 8004f52:	bf00      	nop
 8004f54:	08005faf 	.word	0x08005faf
 8004f58:	08005fc0 	.word	0x08005fc0

08004f5c <__mcmp>:
 8004f5c:	b530      	push	{r4, r5, lr}
 8004f5e:	6902      	ldr	r2, [r0, #16]
 8004f60:	690c      	ldr	r4, [r1, #16]
 8004f62:	1b12      	subs	r2, r2, r4
 8004f64:	d10e      	bne.n	8004f84 <__mcmp+0x28>
 8004f66:	f100 0314 	add.w	r3, r0, #20
 8004f6a:	3114      	adds	r1, #20
 8004f6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f7c:	42a5      	cmp	r5, r4
 8004f7e:	d003      	beq.n	8004f88 <__mcmp+0x2c>
 8004f80:	d305      	bcc.n	8004f8e <__mcmp+0x32>
 8004f82:	2201      	movs	r2, #1
 8004f84:	4610      	mov	r0, r2
 8004f86:	bd30      	pop	{r4, r5, pc}
 8004f88:	4283      	cmp	r3, r0
 8004f8a:	d3f3      	bcc.n	8004f74 <__mcmp+0x18>
 8004f8c:	e7fa      	b.n	8004f84 <__mcmp+0x28>
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f92:	e7f7      	b.n	8004f84 <__mcmp+0x28>

08004f94 <__mdiff>:
 8004f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	460c      	mov	r4, r1
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4690      	mov	r8, r2
 8004fa2:	f7ff ffdb 	bl	8004f5c <__mcmp>
 8004fa6:	1e05      	subs	r5, r0, #0
 8004fa8:	d110      	bne.n	8004fcc <__mdiff+0x38>
 8004faa:	4629      	mov	r1, r5
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff fd59 	bl	8004a64 <_Balloc>
 8004fb2:	b930      	cbnz	r0, 8004fc2 <__mdiff+0x2e>
 8004fb4:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <__mdiff+0x10c>)
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f240 2137 	movw	r1, #567	; 0x237
 8004fbc:	4839      	ldr	r0, [pc, #228]	; (80050a4 <__mdiff+0x110>)
 8004fbe:	f000 fb0b 	bl	80055d8 <__assert_func>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fcc:	bfa4      	itt	ge
 8004fce:	4643      	movge	r3, r8
 8004fd0:	46a0      	movge	r8, r4
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fd8:	bfa6      	itte	ge
 8004fda:	461c      	movge	r4, r3
 8004fdc:	2500      	movge	r5, #0
 8004fde:	2501      	movlt	r5, #1
 8004fe0:	f7ff fd40 	bl	8004a64 <_Balloc>
 8004fe4:	b920      	cbnz	r0, 8004ff0 <__mdiff+0x5c>
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <__mdiff+0x10c>)
 8004fe8:	4602      	mov	r2, r0
 8004fea:	f240 2145 	movw	r1, #581	; 0x245
 8004fee:	e7e5      	b.n	8004fbc <__mdiff+0x28>
 8004ff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004ff4:	6926      	ldr	r6, [r4, #16]
 8004ff6:	60c5      	str	r5, [r0, #12]
 8004ff8:	f104 0914 	add.w	r9, r4, #20
 8004ffc:	f108 0514 	add.w	r5, r8, #20
 8005000:	f100 0e14 	add.w	lr, r0, #20
 8005004:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800500c:	f108 0210 	add.w	r2, r8, #16
 8005010:	46f2      	mov	sl, lr
 8005012:	2100      	movs	r1, #0
 8005014:	f859 3b04 	ldr.w	r3, [r9], #4
 8005018:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800501c:	fa11 f88b 	uxtah	r8, r1, fp
 8005020:	b299      	uxth	r1, r3
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	eba8 0801 	sub.w	r8, r8, r1
 8005028:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800502c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005030:	fa1f f888 	uxth.w	r8, r8
 8005034:	1419      	asrs	r1, r3, #16
 8005036:	454e      	cmp	r6, r9
 8005038:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800503c:	f84a 3b04 	str.w	r3, [sl], #4
 8005040:	d8e8      	bhi.n	8005014 <__mdiff+0x80>
 8005042:	1b33      	subs	r3, r6, r4
 8005044:	3b15      	subs	r3, #21
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	3304      	adds	r3, #4
 800504c:	3415      	adds	r4, #21
 800504e:	42a6      	cmp	r6, r4
 8005050:	bf38      	it	cc
 8005052:	2304      	movcc	r3, #4
 8005054:	441d      	add	r5, r3
 8005056:	4473      	add	r3, lr
 8005058:	469e      	mov	lr, r3
 800505a:	462e      	mov	r6, r5
 800505c:	4566      	cmp	r6, ip
 800505e:	d30e      	bcc.n	800507e <__mdiff+0xea>
 8005060:	f10c 0203 	add.w	r2, ip, #3
 8005064:	1b52      	subs	r2, r2, r5
 8005066:	f022 0203 	bic.w	r2, r2, #3
 800506a:	3d03      	subs	r5, #3
 800506c:	45ac      	cmp	ip, r5
 800506e:	bf38      	it	cc
 8005070:	2200      	movcc	r2, #0
 8005072:	4413      	add	r3, r2
 8005074:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005078:	b17a      	cbz	r2, 800509a <__mdiff+0x106>
 800507a:	6107      	str	r7, [r0, #16]
 800507c:	e7a4      	b.n	8004fc8 <__mdiff+0x34>
 800507e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005082:	fa11 f288 	uxtah	r2, r1, r8
 8005086:	1414      	asrs	r4, r2, #16
 8005088:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800508c:	b292      	uxth	r2, r2
 800508e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005092:	f84e 2b04 	str.w	r2, [lr], #4
 8005096:	1421      	asrs	r1, r4, #16
 8005098:	e7e0      	b.n	800505c <__mdiff+0xc8>
 800509a:	3f01      	subs	r7, #1
 800509c:	e7ea      	b.n	8005074 <__mdiff+0xe0>
 800509e:	bf00      	nop
 80050a0:	08005faf 	.word	0x08005faf
 80050a4:	08005fc0 	.word	0x08005fc0

080050a8 <__d2b>:
 80050a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	460f      	mov	r7, r1
 80050ae:	2101      	movs	r1, #1
 80050b0:	ec59 8b10 	vmov	r8, r9, d0
 80050b4:	4616      	mov	r6, r2
 80050b6:	f7ff fcd5 	bl	8004a64 <_Balloc>
 80050ba:	4604      	mov	r4, r0
 80050bc:	b930      	cbnz	r0, 80050cc <__d2b+0x24>
 80050be:	4602      	mov	r2, r0
 80050c0:	4b24      	ldr	r3, [pc, #144]	; (8005154 <__d2b+0xac>)
 80050c2:	4825      	ldr	r0, [pc, #148]	; (8005158 <__d2b+0xb0>)
 80050c4:	f240 310f 	movw	r1, #783	; 0x30f
 80050c8:	f000 fa86 	bl	80055d8 <__assert_func>
 80050cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050d4:	bb2d      	cbnz	r5, 8005122 <__d2b+0x7a>
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	f1b8 0300 	subs.w	r3, r8, #0
 80050dc:	d026      	beq.n	800512c <__d2b+0x84>
 80050de:	4668      	mov	r0, sp
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	f7ff fd87 	bl	8004bf4 <__lo0bits>
 80050e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050ea:	b1e8      	cbz	r0, 8005128 <__d2b+0x80>
 80050ec:	f1c0 0320 	rsb	r3, r0, #32
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	430b      	orrs	r3, r1
 80050f6:	40c2      	lsrs	r2, r0
 80050f8:	6163      	str	r3, [r4, #20]
 80050fa:	9201      	str	r2, [sp, #4]
 80050fc:	9b01      	ldr	r3, [sp, #4]
 80050fe:	61a3      	str	r3, [r4, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf14      	ite	ne
 8005104:	2202      	movne	r2, #2
 8005106:	2201      	moveq	r2, #1
 8005108:	6122      	str	r2, [r4, #16]
 800510a:	b1bd      	cbz	r5, 800513c <__d2b+0x94>
 800510c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005110:	4405      	add	r5, r0
 8005112:	603d      	str	r5, [r7, #0]
 8005114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005118:	6030      	str	r0, [r6, #0]
 800511a:	4620      	mov	r0, r4
 800511c:	b003      	add	sp, #12
 800511e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005126:	e7d6      	b.n	80050d6 <__d2b+0x2e>
 8005128:	6161      	str	r1, [r4, #20]
 800512a:	e7e7      	b.n	80050fc <__d2b+0x54>
 800512c:	a801      	add	r0, sp, #4
 800512e:	f7ff fd61 	bl	8004bf4 <__lo0bits>
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	6163      	str	r3, [r4, #20]
 8005136:	3020      	adds	r0, #32
 8005138:	2201      	movs	r2, #1
 800513a:	e7e5      	b.n	8005108 <__d2b+0x60>
 800513c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005144:	6038      	str	r0, [r7, #0]
 8005146:	6918      	ldr	r0, [r3, #16]
 8005148:	f7ff fd34 	bl	8004bb4 <__hi0bits>
 800514c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005150:	e7e2      	b.n	8005118 <__d2b+0x70>
 8005152:	bf00      	nop
 8005154:	08005faf 	.word	0x08005faf
 8005158:	08005fc0 	.word	0x08005fc0

0800515c <__ssputs_r>:
 800515c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005160:	688e      	ldr	r6, [r1, #8]
 8005162:	461f      	mov	r7, r3
 8005164:	42be      	cmp	r6, r7
 8005166:	680b      	ldr	r3, [r1, #0]
 8005168:	4682      	mov	sl, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4690      	mov	r8, r2
 800516e:	d82c      	bhi.n	80051ca <__ssputs_r+0x6e>
 8005170:	898a      	ldrh	r2, [r1, #12]
 8005172:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005176:	d026      	beq.n	80051c6 <__ssputs_r+0x6a>
 8005178:	6965      	ldr	r5, [r4, #20]
 800517a:	6909      	ldr	r1, [r1, #16]
 800517c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005180:	eba3 0901 	sub.w	r9, r3, r1
 8005184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005188:	1c7b      	adds	r3, r7, #1
 800518a:	444b      	add	r3, r9
 800518c:	106d      	asrs	r5, r5, #1
 800518e:	429d      	cmp	r5, r3
 8005190:	bf38      	it	cc
 8005192:	461d      	movcc	r5, r3
 8005194:	0553      	lsls	r3, r2, #21
 8005196:	d527      	bpl.n	80051e8 <__ssputs_r+0x8c>
 8005198:	4629      	mov	r1, r5
 800519a:	f7ff fbd7 	bl	800494c <_malloc_r>
 800519e:	4606      	mov	r6, r0
 80051a0:	b360      	cbz	r0, 80051fc <__ssputs_r+0xa0>
 80051a2:	6921      	ldr	r1, [r4, #16]
 80051a4:	464a      	mov	r2, r9
 80051a6:	f000 fa09 	bl	80055bc <memcpy>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	6126      	str	r6, [r4, #16]
 80051b8:	6165      	str	r5, [r4, #20]
 80051ba:	444e      	add	r6, r9
 80051bc:	eba5 0509 	sub.w	r5, r5, r9
 80051c0:	6026      	str	r6, [r4, #0]
 80051c2:	60a5      	str	r5, [r4, #8]
 80051c4:	463e      	mov	r6, r7
 80051c6:	42be      	cmp	r6, r7
 80051c8:	d900      	bls.n	80051cc <__ssputs_r+0x70>
 80051ca:	463e      	mov	r6, r7
 80051cc:	6820      	ldr	r0, [r4, #0]
 80051ce:	4632      	mov	r2, r6
 80051d0:	4641      	mov	r1, r8
 80051d2:	f000 f9c9 	bl	8005568 <memmove>
 80051d6:	68a3      	ldr	r3, [r4, #8]
 80051d8:	1b9b      	subs	r3, r3, r6
 80051da:	60a3      	str	r3, [r4, #8]
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	4433      	add	r3, r6
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	2000      	movs	r0, #0
 80051e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e8:	462a      	mov	r2, r5
 80051ea:	f000 fa3b 	bl	8005664 <_realloc_r>
 80051ee:	4606      	mov	r6, r0
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d1e0      	bne.n	80051b6 <__ssputs_r+0x5a>
 80051f4:	6921      	ldr	r1, [r4, #16]
 80051f6:	4650      	mov	r0, sl
 80051f8:	f7ff fb34 	bl	8004864 <_free_r>
 80051fc:	230c      	movs	r3, #12
 80051fe:	f8ca 3000 	str.w	r3, [sl]
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	e7e9      	b.n	80051e4 <__ssputs_r+0x88>

08005210 <_svfiprintf_r>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	4698      	mov	r8, r3
 8005216:	898b      	ldrh	r3, [r1, #12]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	b09d      	sub	sp, #116	; 0x74
 800521c:	4607      	mov	r7, r0
 800521e:	460d      	mov	r5, r1
 8005220:	4614      	mov	r4, r2
 8005222:	d50e      	bpl.n	8005242 <_svfiprintf_r+0x32>
 8005224:	690b      	ldr	r3, [r1, #16]
 8005226:	b963      	cbnz	r3, 8005242 <_svfiprintf_r+0x32>
 8005228:	2140      	movs	r1, #64	; 0x40
 800522a:	f7ff fb8f 	bl	800494c <_malloc_r>
 800522e:	6028      	str	r0, [r5, #0]
 8005230:	6128      	str	r0, [r5, #16]
 8005232:	b920      	cbnz	r0, 800523e <_svfiprintf_r+0x2e>
 8005234:	230c      	movs	r3, #12
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	e0d0      	b.n	80053e0 <_svfiprintf_r+0x1d0>
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	616b      	str	r3, [r5, #20]
 8005242:	2300      	movs	r3, #0
 8005244:	9309      	str	r3, [sp, #36]	; 0x24
 8005246:	2320      	movs	r3, #32
 8005248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800524c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005250:	2330      	movs	r3, #48	; 0x30
 8005252:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053f8 <_svfiprintf_r+0x1e8>
 8005256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800525a:	f04f 0901 	mov.w	r9, #1
 800525e:	4623      	mov	r3, r4
 8005260:	469a      	mov	sl, r3
 8005262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005266:	b10a      	cbz	r2, 800526c <_svfiprintf_r+0x5c>
 8005268:	2a25      	cmp	r2, #37	; 0x25
 800526a:	d1f9      	bne.n	8005260 <_svfiprintf_r+0x50>
 800526c:	ebba 0b04 	subs.w	fp, sl, r4
 8005270:	d00b      	beq.n	800528a <_svfiprintf_r+0x7a>
 8005272:	465b      	mov	r3, fp
 8005274:	4622      	mov	r2, r4
 8005276:	4629      	mov	r1, r5
 8005278:	4638      	mov	r0, r7
 800527a:	f7ff ff6f 	bl	800515c <__ssputs_r>
 800527e:	3001      	adds	r0, #1
 8005280:	f000 80a9 	beq.w	80053d6 <_svfiprintf_r+0x1c6>
 8005284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005286:	445a      	add	r2, fp
 8005288:	9209      	str	r2, [sp, #36]	; 0x24
 800528a:	f89a 3000 	ldrb.w	r3, [sl]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80a1 	beq.w	80053d6 <_svfiprintf_r+0x1c6>
 8005294:	2300      	movs	r3, #0
 8005296:	f04f 32ff 	mov.w	r2, #4294967295
 800529a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800529e:	f10a 0a01 	add.w	sl, sl, #1
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	9307      	str	r3, [sp, #28]
 80052a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052aa:	931a      	str	r3, [sp, #104]	; 0x68
 80052ac:	4654      	mov	r4, sl
 80052ae:	2205      	movs	r2, #5
 80052b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b4:	4850      	ldr	r0, [pc, #320]	; (80053f8 <_svfiprintf_r+0x1e8>)
 80052b6:	f7fa ff9b 	bl	80001f0 <memchr>
 80052ba:	9a04      	ldr	r2, [sp, #16]
 80052bc:	b9d8      	cbnz	r0, 80052f6 <_svfiprintf_r+0xe6>
 80052be:	06d0      	lsls	r0, r2, #27
 80052c0:	bf44      	itt	mi
 80052c2:	2320      	movmi	r3, #32
 80052c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c8:	0711      	lsls	r1, r2, #28
 80052ca:	bf44      	itt	mi
 80052cc:	232b      	movmi	r3, #43	; 0x2b
 80052ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d2:	f89a 3000 	ldrb.w	r3, [sl]
 80052d6:	2b2a      	cmp	r3, #42	; 0x2a
 80052d8:	d015      	beq.n	8005306 <_svfiprintf_r+0xf6>
 80052da:	9a07      	ldr	r2, [sp, #28]
 80052dc:	4654      	mov	r4, sl
 80052de:	2000      	movs	r0, #0
 80052e0:	f04f 0c0a 	mov.w	ip, #10
 80052e4:	4621      	mov	r1, r4
 80052e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ea:	3b30      	subs	r3, #48	; 0x30
 80052ec:	2b09      	cmp	r3, #9
 80052ee:	d94d      	bls.n	800538c <_svfiprintf_r+0x17c>
 80052f0:	b1b0      	cbz	r0, 8005320 <_svfiprintf_r+0x110>
 80052f2:	9207      	str	r2, [sp, #28]
 80052f4:	e014      	b.n	8005320 <_svfiprintf_r+0x110>
 80052f6:	eba0 0308 	sub.w	r3, r0, r8
 80052fa:	fa09 f303 	lsl.w	r3, r9, r3
 80052fe:	4313      	orrs	r3, r2
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	46a2      	mov	sl, r4
 8005304:	e7d2      	b.n	80052ac <_svfiprintf_r+0x9c>
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	1d19      	adds	r1, r3, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	9103      	str	r1, [sp, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	bfbb      	ittet	lt
 8005312:	425b      	neglt	r3, r3
 8005314:	f042 0202 	orrlt.w	r2, r2, #2
 8005318:	9307      	strge	r3, [sp, #28]
 800531a:	9307      	strlt	r3, [sp, #28]
 800531c:	bfb8      	it	lt
 800531e:	9204      	strlt	r2, [sp, #16]
 8005320:	7823      	ldrb	r3, [r4, #0]
 8005322:	2b2e      	cmp	r3, #46	; 0x2e
 8005324:	d10c      	bne.n	8005340 <_svfiprintf_r+0x130>
 8005326:	7863      	ldrb	r3, [r4, #1]
 8005328:	2b2a      	cmp	r3, #42	; 0x2a
 800532a:	d134      	bne.n	8005396 <_svfiprintf_r+0x186>
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	1d1a      	adds	r2, r3, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	9203      	str	r2, [sp, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	bfb8      	it	lt
 8005338:	f04f 33ff 	movlt.w	r3, #4294967295
 800533c:	3402      	adds	r4, #2
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005408 <_svfiprintf_r+0x1f8>
 8005344:	7821      	ldrb	r1, [r4, #0]
 8005346:	2203      	movs	r2, #3
 8005348:	4650      	mov	r0, sl
 800534a:	f7fa ff51 	bl	80001f0 <memchr>
 800534e:	b138      	cbz	r0, 8005360 <_svfiprintf_r+0x150>
 8005350:	9b04      	ldr	r3, [sp, #16]
 8005352:	eba0 000a 	sub.w	r0, r0, sl
 8005356:	2240      	movs	r2, #64	; 0x40
 8005358:	4082      	lsls	r2, r0
 800535a:	4313      	orrs	r3, r2
 800535c:	3401      	adds	r4, #1
 800535e:	9304      	str	r3, [sp, #16]
 8005360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005364:	4825      	ldr	r0, [pc, #148]	; (80053fc <_svfiprintf_r+0x1ec>)
 8005366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800536a:	2206      	movs	r2, #6
 800536c:	f7fa ff40 	bl	80001f0 <memchr>
 8005370:	2800      	cmp	r0, #0
 8005372:	d038      	beq.n	80053e6 <_svfiprintf_r+0x1d6>
 8005374:	4b22      	ldr	r3, [pc, #136]	; (8005400 <_svfiprintf_r+0x1f0>)
 8005376:	bb1b      	cbnz	r3, 80053c0 <_svfiprintf_r+0x1b0>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	3307      	adds	r3, #7
 800537c:	f023 0307 	bic.w	r3, r3, #7
 8005380:	3308      	adds	r3, #8
 8005382:	9303      	str	r3, [sp, #12]
 8005384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005386:	4433      	add	r3, r6
 8005388:	9309      	str	r3, [sp, #36]	; 0x24
 800538a:	e768      	b.n	800525e <_svfiprintf_r+0x4e>
 800538c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005390:	460c      	mov	r4, r1
 8005392:	2001      	movs	r0, #1
 8005394:	e7a6      	b.n	80052e4 <_svfiprintf_r+0xd4>
 8005396:	2300      	movs	r3, #0
 8005398:	3401      	adds	r4, #1
 800539a:	9305      	str	r3, [sp, #20]
 800539c:	4619      	mov	r1, r3
 800539e:	f04f 0c0a 	mov.w	ip, #10
 80053a2:	4620      	mov	r0, r4
 80053a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a8:	3a30      	subs	r2, #48	; 0x30
 80053aa:	2a09      	cmp	r2, #9
 80053ac:	d903      	bls.n	80053b6 <_svfiprintf_r+0x1a6>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0c6      	beq.n	8005340 <_svfiprintf_r+0x130>
 80053b2:	9105      	str	r1, [sp, #20]
 80053b4:	e7c4      	b.n	8005340 <_svfiprintf_r+0x130>
 80053b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ba:	4604      	mov	r4, r0
 80053bc:	2301      	movs	r3, #1
 80053be:	e7f0      	b.n	80053a2 <_svfiprintf_r+0x192>
 80053c0:	ab03      	add	r3, sp, #12
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	462a      	mov	r2, r5
 80053c6:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <_svfiprintf_r+0x1f4>)
 80053c8:	a904      	add	r1, sp, #16
 80053ca:	4638      	mov	r0, r7
 80053cc:	f7fd fe3c 	bl	8003048 <_printf_float>
 80053d0:	1c42      	adds	r2, r0, #1
 80053d2:	4606      	mov	r6, r0
 80053d4:	d1d6      	bne.n	8005384 <_svfiprintf_r+0x174>
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	065b      	lsls	r3, r3, #25
 80053da:	f53f af2d 	bmi.w	8005238 <_svfiprintf_r+0x28>
 80053de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e0:	b01d      	add	sp, #116	; 0x74
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	ab03      	add	r3, sp, #12
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	462a      	mov	r2, r5
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <_svfiprintf_r+0x1f4>)
 80053ee:	a904      	add	r1, sp, #16
 80053f0:	4638      	mov	r0, r7
 80053f2:	f7fe f8cd 	bl	8003590 <_printf_i>
 80053f6:	e7eb      	b.n	80053d0 <_svfiprintf_r+0x1c0>
 80053f8:	0800621d 	.word	0x0800621d
 80053fc:	08006227 	.word	0x08006227
 8005400:	08003049 	.word	0x08003049
 8005404:	0800515d 	.word	0x0800515d
 8005408:	08006223 	.word	0x08006223

0800540c <__sflush_r>:
 800540c:	898a      	ldrh	r2, [r1, #12]
 800540e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005412:	4605      	mov	r5, r0
 8005414:	0710      	lsls	r0, r2, #28
 8005416:	460c      	mov	r4, r1
 8005418:	d458      	bmi.n	80054cc <__sflush_r+0xc0>
 800541a:	684b      	ldr	r3, [r1, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	dc05      	bgt.n	800542c <__sflush_r+0x20>
 8005420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	dc02      	bgt.n	800542c <__sflush_r+0x20>
 8005426:	2000      	movs	r0, #0
 8005428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800542e:	2e00      	cmp	r6, #0
 8005430:	d0f9      	beq.n	8005426 <__sflush_r+0x1a>
 8005432:	2300      	movs	r3, #0
 8005434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005438:	682f      	ldr	r7, [r5, #0]
 800543a:	6a21      	ldr	r1, [r4, #32]
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	d032      	beq.n	80054a6 <__sflush_r+0x9a>
 8005440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	075a      	lsls	r2, r3, #29
 8005446:	d505      	bpl.n	8005454 <__sflush_r+0x48>
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	1ac0      	subs	r0, r0, r3
 800544c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800544e:	b10b      	cbz	r3, 8005454 <__sflush_r+0x48>
 8005450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005452:	1ac0      	subs	r0, r0, r3
 8005454:	2300      	movs	r3, #0
 8005456:	4602      	mov	r2, r0
 8005458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800545a:	6a21      	ldr	r1, [r4, #32]
 800545c:	4628      	mov	r0, r5
 800545e:	47b0      	blx	r6
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	d106      	bne.n	8005474 <__sflush_r+0x68>
 8005466:	6829      	ldr	r1, [r5, #0]
 8005468:	291d      	cmp	r1, #29
 800546a:	d82b      	bhi.n	80054c4 <__sflush_r+0xb8>
 800546c:	4a29      	ldr	r2, [pc, #164]	; (8005514 <__sflush_r+0x108>)
 800546e:	410a      	asrs	r2, r1
 8005470:	07d6      	lsls	r6, r2, #31
 8005472:	d427      	bmi.n	80054c4 <__sflush_r+0xb8>
 8005474:	2200      	movs	r2, #0
 8005476:	6062      	str	r2, [r4, #4]
 8005478:	04d9      	lsls	r1, r3, #19
 800547a:	6922      	ldr	r2, [r4, #16]
 800547c:	6022      	str	r2, [r4, #0]
 800547e:	d504      	bpl.n	800548a <__sflush_r+0x7e>
 8005480:	1c42      	adds	r2, r0, #1
 8005482:	d101      	bne.n	8005488 <__sflush_r+0x7c>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b903      	cbnz	r3, 800548a <__sflush_r+0x7e>
 8005488:	6560      	str	r0, [r4, #84]	; 0x54
 800548a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800548c:	602f      	str	r7, [r5, #0]
 800548e:	2900      	cmp	r1, #0
 8005490:	d0c9      	beq.n	8005426 <__sflush_r+0x1a>
 8005492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005496:	4299      	cmp	r1, r3
 8005498:	d002      	beq.n	80054a0 <__sflush_r+0x94>
 800549a:	4628      	mov	r0, r5
 800549c:	f7ff f9e2 	bl	8004864 <_free_r>
 80054a0:	2000      	movs	r0, #0
 80054a2:	6360      	str	r0, [r4, #52]	; 0x34
 80054a4:	e7c0      	b.n	8005428 <__sflush_r+0x1c>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b0      	blx	r6
 80054ac:	1c41      	adds	r1, r0, #1
 80054ae:	d1c8      	bne.n	8005442 <__sflush_r+0x36>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0c5      	beq.n	8005442 <__sflush_r+0x36>
 80054b6:	2b1d      	cmp	r3, #29
 80054b8:	d001      	beq.n	80054be <__sflush_r+0xb2>
 80054ba:	2b16      	cmp	r3, #22
 80054bc:	d101      	bne.n	80054c2 <__sflush_r+0xb6>
 80054be:	602f      	str	r7, [r5, #0]
 80054c0:	e7b1      	b.n	8005426 <__sflush_r+0x1a>
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	e7ad      	b.n	8005428 <__sflush_r+0x1c>
 80054cc:	690f      	ldr	r7, [r1, #16]
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	d0a9      	beq.n	8005426 <__sflush_r+0x1a>
 80054d2:	0793      	lsls	r3, r2, #30
 80054d4:	680e      	ldr	r6, [r1, #0]
 80054d6:	bf08      	it	eq
 80054d8:	694b      	ldreq	r3, [r1, #20]
 80054da:	600f      	str	r7, [r1, #0]
 80054dc:	bf18      	it	ne
 80054de:	2300      	movne	r3, #0
 80054e0:	eba6 0807 	sub.w	r8, r6, r7
 80054e4:	608b      	str	r3, [r1, #8]
 80054e6:	f1b8 0f00 	cmp.w	r8, #0
 80054ea:	dd9c      	ble.n	8005426 <__sflush_r+0x1a>
 80054ec:	6a21      	ldr	r1, [r4, #32]
 80054ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054f0:	4643      	mov	r3, r8
 80054f2:	463a      	mov	r2, r7
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b0      	blx	r6
 80054f8:	2800      	cmp	r0, #0
 80054fa:	dc06      	bgt.n	800550a <__sflush_r+0xfe>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	e78e      	b.n	8005428 <__sflush_r+0x1c>
 800550a:	4407      	add	r7, r0
 800550c:	eba8 0800 	sub.w	r8, r8, r0
 8005510:	e7e9      	b.n	80054e6 <__sflush_r+0xda>
 8005512:	bf00      	nop
 8005514:	dfbffffe 	.word	0xdfbffffe

08005518 <_fflush_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	690b      	ldr	r3, [r1, #16]
 800551c:	4605      	mov	r5, r0
 800551e:	460c      	mov	r4, r1
 8005520:	b913      	cbnz	r3, 8005528 <_fflush_r+0x10>
 8005522:	2500      	movs	r5, #0
 8005524:	4628      	mov	r0, r5
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	b118      	cbz	r0, 8005532 <_fflush_r+0x1a>
 800552a:	6a03      	ldr	r3, [r0, #32]
 800552c:	b90b      	cbnz	r3, 8005532 <_fflush_r+0x1a>
 800552e:	f7fe f9dd 	bl	80038ec <__sinit>
 8005532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f3      	beq.n	8005522 <_fflush_r+0xa>
 800553a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800553c:	07d0      	lsls	r0, r2, #31
 800553e:	d404      	bmi.n	800554a <_fflush_r+0x32>
 8005540:	0599      	lsls	r1, r3, #22
 8005542:	d402      	bmi.n	800554a <_fflush_r+0x32>
 8005544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005546:	f7fe fb0e 	bl	8003b66 <__retarget_lock_acquire_recursive>
 800554a:	4628      	mov	r0, r5
 800554c:	4621      	mov	r1, r4
 800554e:	f7ff ff5d 	bl	800540c <__sflush_r>
 8005552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005554:	07da      	lsls	r2, r3, #31
 8005556:	4605      	mov	r5, r0
 8005558:	d4e4      	bmi.n	8005524 <_fflush_r+0xc>
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	059b      	lsls	r3, r3, #22
 800555e:	d4e1      	bmi.n	8005524 <_fflush_r+0xc>
 8005560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005562:	f7fe fb01 	bl	8003b68 <__retarget_lock_release_recursive>
 8005566:	e7dd      	b.n	8005524 <_fflush_r+0xc>

08005568 <memmove>:
 8005568:	4288      	cmp	r0, r1
 800556a:	b510      	push	{r4, lr}
 800556c:	eb01 0402 	add.w	r4, r1, r2
 8005570:	d902      	bls.n	8005578 <memmove+0x10>
 8005572:	4284      	cmp	r4, r0
 8005574:	4623      	mov	r3, r4
 8005576:	d807      	bhi.n	8005588 <memmove+0x20>
 8005578:	1e43      	subs	r3, r0, #1
 800557a:	42a1      	cmp	r1, r4
 800557c:	d008      	beq.n	8005590 <memmove+0x28>
 800557e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005586:	e7f8      	b.n	800557a <memmove+0x12>
 8005588:	4402      	add	r2, r0
 800558a:	4601      	mov	r1, r0
 800558c:	428a      	cmp	r2, r1
 800558e:	d100      	bne.n	8005592 <memmove+0x2a>
 8005590:	bd10      	pop	{r4, pc}
 8005592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800559a:	e7f7      	b.n	800558c <memmove+0x24>

0800559c <_sbrk_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d06      	ldr	r5, [pc, #24]	; (80055b8 <_sbrk_r+0x1c>)
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fc fbc8 	bl	8001d3c <_sbrk>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_sbrk_r+0x1a>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_sbrk_r+0x1a>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20008dfc 	.word	0x20008dfc

080055bc <memcpy>:
 80055bc:	440a      	add	r2, r1
 80055be:	4291      	cmp	r1, r2
 80055c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c4:	d100      	bne.n	80055c8 <memcpy+0xc>
 80055c6:	4770      	bx	lr
 80055c8:	b510      	push	{r4, lr}
 80055ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d2:	4291      	cmp	r1, r2
 80055d4:	d1f9      	bne.n	80055ca <memcpy+0xe>
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <__assert_func>:
 80055d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055da:	4614      	mov	r4, r2
 80055dc:	461a      	mov	r2, r3
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <__assert_func+0x2c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4605      	mov	r5, r0
 80055e4:	68d8      	ldr	r0, [r3, #12]
 80055e6:	b14c      	cbz	r4, 80055fc <__assert_func+0x24>
 80055e8:	4b07      	ldr	r3, [pc, #28]	; (8005608 <__assert_func+0x30>)
 80055ea:	9100      	str	r1, [sp, #0]
 80055ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055f0:	4906      	ldr	r1, [pc, #24]	; (800560c <__assert_func+0x34>)
 80055f2:	462b      	mov	r3, r5
 80055f4:	f000 f872 	bl	80056dc <fiprintf>
 80055f8:	f000 f882 	bl	8005700 <abort>
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <__assert_func+0x38>)
 80055fe:	461c      	mov	r4, r3
 8005600:	e7f3      	b.n	80055ea <__assert_func+0x12>
 8005602:	bf00      	nop
 8005604:	20007d64 	.word	0x20007d64
 8005608:	08006238 	.word	0x08006238
 800560c:	08006245 	.word	0x08006245
 8005610:	08006273 	.word	0x08006273

08005614 <_calloc_r>:
 8005614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005616:	fba1 2402 	umull	r2, r4, r1, r2
 800561a:	b94c      	cbnz	r4, 8005630 <_calloc_r+0x1c>
 800561c:	4611      	mov	r1, r2
 800561e:	9201      	str	r2, [sp, #4]
 8005620:	f7ff f994 	bl	800494c <_malloc_r>
 8005624:	9a01      	ldr	r2, [sp, #4]
 8005626:	4605      	mov	r5, r0
 8005628:	b930      	cbnz	r0, 8005638 <_calloc_r+0x24>
 800562a:	4628      	mov	r0, r5
 800562c:	b003      	add	sp, #12
 800562e:	bd30      	pop	{r4, r5, pc}
 8005630:	220c      	movs	r2, #12
 8005632:	6002      	str	r2, [r0, #0]
 8005634:	2500      	movs	r5, #0
 8005636:	e7f8      	b.n	800562a <_calloc_r+0x16>
 8005638:	4621      	mov	r1, r4
 800563a:	f7fe f9f1 	bl	8003a20 <memset>
 800563e:	e7f4      	b.n	800562a <_calloc_r+0x16>

08005640 <__ascii_mbtowc>:
 8005640:	b082      	sub	sp, #8
 8005642:	b901      	cbnz	r1, 8005646 <__ascii_mbtowc+0x6>
 8005644:	a901      	add	r1, sp, #4
 8005646:	b142      	cbz	r2, 800565a <__ascii_mbtowc+0x1a>
 8005648:	b14b      	cbz	r3, 800565e <__ascii_mbtowc+0x1e>
 800564a:	7813      	ldrb	r3, [r2, #0]
 800564c:	600b      	str	r3, [r1, #0]
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	1e10      	subs	r0, r2, #0
 8005652:	bf18      	it	ne
 8005654:	2001      	movne	r0, #1
 8005656:	b002      	add	sp, #8
 8005658:	4770      	bx	lr
 800565a:	4610      	mov	r0, r2
 800565c:	e7fb      	b.n	8005656 <__ascii_mbtowc+0x16>
 800565e:	f06f 0001 	mvn.w	r0, #1
 8005662:	e7f8      	b.n	8005656 <__ascii_mbtowc+0x16>

08005664 <_realloc_r>:
 8005664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005668:	4680      	mov	r8, r0
 800566a:	4614      	mov	r4, r2
 800566c:	460e      	mov	r6, r1
 800566e:	b921      	cbnz	r1, 800567a <_realloc_r+0x16>
 8005670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005674:	4611      	mov	r1, r2
 8005676:	f7ff b969 	b.w	800494c <_malloc_r>
 800567a:	b92a      	cbnz	r2, 8005688 <_realloc_r+0x24>
 800567c:	f7ff f8f2 	bl	8004864 <_free_r>
 8005680:	4625      	mov	r5, r4
 8005682:	4628      	mov	r0, r5
 8005684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005688:	f000 f841 	bl	800570e <_malloc_usable_size_r>
 800568c:	4284      	cmp	r4, r0
 800568e:	4607      	mov	r7, r0
 8005690:	d802      	bhi.n	8005698 <_realloc_r+0x34>
 8005692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005696:	d812      	bhi.n	80056be <_realloc_r+0x5a>
 8005698:	4621      	mov	r1, r4
 800569a:	4640      	mov	r0, r8
 800569c:	f7ff f956 	bl	800494c <_malloc_r>
 80056a0:	4605      	mov	r5, r0
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d0ed      	beq.n	8005682 <_realloc_r+0x1e>
 80056a6:	42bc      	cmp	r4, r7
 80056a8:	4622      	mov	r2, r4
 80056aa:	4631      	mov	r1, r6
 80056ac:	bf28      	it	cs
 80056ae:	463a      	movcs	r2, r7
 80056b0:	f7ff ff84 	bl	80055bc <memcpy>
 80056b4:	4631      	mov	r1, r6
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff f8d4 	bl	8004864 <_free_r>
 80056bc:	e7e1      	b.n	8005682 <_realloc_r+0x1e>
 80056be:	4635      	mov	r5, r6
 80056c0:	e7df      	b.n	8005682 <_realloc_r+0x1e>

080056c2 <__ascii_wctomb>:
 80056c2:	b149      	cbz	r1, 80056d8 <__ascii_wctomb+0x16>
 80056c4:	2aff      	cmp	r2, #255	; 0xff
 80056c6:	bf85      	ittet	hi
 80056c8:	238a      	movhi	r3, #138	; 0x8a
 80056ca:	6003      	strhi	r3, [r0, #0]
 80056cc:	700a      	strbls	r2, [r1, #0]
 80056ce:	f04f 30ff 	movhi.w	r0, #4294967295
 80056d2:	bf98      	it	ls
 80056d4:	2001      	movls	r0, #1
 80056d6:	4770      	bx	lr
 80056d8:	4608      	mov	r0, r1
 80056da:	4770      	bx	lr

080056dc <fiprintf>:
 80056dc:	b40e      	push	{r1, r2, r3}
 80056de:	b503      	push	{r0, r1, lr}
 80056e0:	4601      	mov	r1, r0
 80056e2:	ab03      	add	r3, sp, #12
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <fiprintf+0x20>)
 80056e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	f000 f83f 	bl	8005770 <_vfiprintf_r>
 80056f2:	b002      	add	sp, #8
 80056f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056f8:	b003      	add	sp, #12
 80056fa:	4770      	bx	lr
 80056fc:	20007d64 	.word	0x20007d64

08005700 <abort>:
 8005700:	b508      	push	{r3, lr}
 8005702:	2006      	movs	r0, #6
 8005704:	f000 fa0c 	bl	8005b20 <raise>
 8005708:	2001      	movs	r0, #1
 800570a:	f7fc fa9f 	bl	8001c4c <_exit>

0800570e <_malloc_usable_size_r>:
 800570e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005712:	1f18      	subs	r0, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfbc      	itt	lt
 8005718:	580b      	ldrlt	r3, [r1, r0]
 800571a:	18c0      	addlt	r0, r0, r3
 800571c:	4770      	bx	lr

0800571e <__sfputc_r>:
 800571e:	6893      	ldr	r3, [r2, #8]
 8005720:	3b01      	subs	r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	b410      	push	{r4}
 8005726:	6093      	str	r3, [r2, #8]
 8005728:	da08      	bge.n	800573c <__sfputc_r+0x1e>
 800572a:	6994      	ldr	r4, [r2, #24]
 800572c:	42a3      	cmp	r3, r4
 800572e:	db01      	blt.n	8005734 <__sfputc_r+0x16>
 8005730:	290a      	cmp	r1, #10
 8005732:	d103      	bne.n	800573c <__sfputc_r+0x1e>
 8005734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005738:	f000 b934 	b.w	80059a4 <__swbuf_r>
 800573c:	6813      	ldr	r3, [r2, #0]
 800573e:	1c58      	adds	r0, r3, #1
 8005740:	6010      	str	r0, [r2, #0]
 8005742:	7019      	strb	r1, [r3, #0]
 8005744:	4608      	mov	r0, r1
 8005746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800574a:	4770      	bx	lr

0800574c <__sfputs_r>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	4614      	mov	r4, r2
 8005754:	18d5      	adds	r5, r2, r3
 8005756:	42ac      	cmp	r4, r5
 8005758:	d101      	bne.n	800575e <__sfputs_r+0x12>
 800575a:	2000      	movs	r0, #0
 800575c:	e007      	b.n	800576e <__sfputs_r+0x22>
 800575e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005762:	463a      	mov	r2, r7
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff ffda 	bl	800571e <__sfputc_r>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	d1f3      	bne.n	8005756 <__sfputs_r+0xa>
 800576e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005770 <_vfiprintf_r>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	460d      	mov	r5, r1
 8005776:	b09d      	sub	sp, #116	; 0x74
 8005778:	4614      	mov	r4, r2
 800577a:	4698      	mov	r8, r3
 800577c:	4606      	mov	r6, r0
 800577e:	b118      	cbz	r0, 8005788 <_vfiprintf_r+0x18>
 8005780:	6a03      	ldr	r3, [r0, #32]
 8005782:	b90b      	cbnz	r3, 8005788 <_vfiprintf_r+0x18>
 8005784:	f7fe f8b2 	bl	80038ec <__sinit>
 8005788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800578a:	07d9      	lsls	r1, r3, #31
 800578c:	d405      	bmi.n	800579a <_vfiprintf_r+0x2a>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	059a      	lsls	r2, r3, #22
 8005792:	d402      	bmi.n	800579a <_vfiprintf_r+0x2a>
 8005794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005796:	f7fe f9e6 	bl	8003b66 <__retarget_lock_acquire_recursive>
 800579a:	89ab      	ldrh	r3, [r5, #12]
 800579c:	071b      	lsls	r3, r3, #28
 800579e:	d501      	bpl.n	80057a4 <_vfiprintf_r+0x34>
 80057a0:	692b      	ldr	r3, [r5, #16]
 80057a2:	b99b      	cbnz	r3, 80057cc <_vfiprintf_r+0x5c>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4630      	mov	r0, r6
 80057a8:	f000 f93a 	bl	8005a20 <__swsetup_r>
 80057ac:	b170      	cbz	r0, 80057cc <_vfiprintf_r+0x5c>
 80057ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b0:	07dc      	lsls	r4, r3, #31
 80057b2:	d504      	bpl.n	80057be <_vfiprintf_r+0x4e>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	b01d      	add	sp, #116	; 0x74
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	0598      	lsls	r0, r3, #22
 80057c2:	d4f7      	bmi.n	80057b4 <_vfiprintf_r+0x44>
 80057c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c6:	f7fe f9cf 	bl	8003b68 <__retarget_lock_release_recursive>
 80057ca:	e7f3      	b.n	80057b4 <_vfiprintf_r+0x44>
 80057cc:	2300      	movs	r3, #0
 80057ce:	9309      	str	r3, [sp, #36]	; 0x24
 80057d0:	2320      	movs	r3, #32
 80057d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80057da:	2330      	movs	r3, #48	; 0x30
 80057dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005990 <_vfiprintf_r+0x220>
 80057e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057e4:	f04f 0901 	mov.w	r9, #1
 80057e8:	4623      	mov	r3, r4
 80057ea:	469a      	mov	sl, r3
 80057ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f0:	b10a      	cbz	r2, 80057f6 <_vfiprintf_r+0x86>
 80057f2:	2a25      	cmp	r2, #37	; 0x25
 80057f4:	d1f9      	bne.n	80057ea <_vfiprintf_r+0x7a>
 80057f6:	ebba 0b04 	subs.w	fp, sl, r4
 80057fa:	d00b      	beq.n	8005814 <_vfiprintf_r+0xa4>
 80057fc:	465b      	mov	r3, fp
 80057fe:	4622      	mov	r2, r4
 8005800:	4629      	mov	r1, r5
 8005802:	4630      	mov	r0, r6
 8005804:	f7ff ffa2 	bl	800574c <__sfputs_r>
 8005808:	3001      	adds	r0, #1
 800580a:	f000 80a9 	beq.w	8005960 <_vfiprintf_r+0x1f0>
 800580e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005810:	445a      	add	r2, fp
 8005812:	9209      	str	r2, [sp, #36]	; 0x24
 8005814:	f89a 3000 	ldrb.w	r3, [sl]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80a1 	beq.w	8005960 <_vfiprintf_r+0x1f0>
 800581e:	2300      	movs	r3, #0
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005828:	f10a 0a01 	add.w	sl, sl, #1
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005834:	931a      	str	r3, [sp, #104]	; 0x68
 8005836:	4654      	mov	r4, sl
 8005838:	2205      	movs	r2, #5
 800583a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800583e:	4854      	ldr	r0, [pc, #336]	; (8005990 <_vfiprintf_r+0x220>)
 8005840:	f7fa fcd6 	bl	80001f0 <memchr>
 8005844:	9a04      	ldr	r2, [sp, #16]
 8005846:	b9d8      	cbnz	r0, 8005880 <_vfiprintf_r+0x110>
 8005848:	06d1      	lsls	r1, r2, #27
 800584a:	bf44      	itt	mi
 800584c:	2320      	movmi	r3, #32
 800584e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005852:	0713      	lsls	r3, r2, #28
 8005854:	bf44      	itt	mi
 8005856:	232b      	movmi	r3, #43	; 0x2b
 8005858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800585c:	f89a 3000 	ldrb.w	r3, [sl]
 8005860:	2b2a      	cmp	r3, #42	; 0x2a
 8005862:	d015      	beq.n	8005890 <_vfiprintf_r+0x120>
 8005864:	9a07      	ldr	r2, [sp, #28]
 8005866:	4654      	mov	r4, sl
 8005868:	2000      	movs	r0, #0
 800586a:	f04f 0c0a 	mov.w	ip, #10
 800586e:	4621      	mov	r1, r4
 8005870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005874:	3b30      	subs	r3, #48	; 0x30
 8005876:	2b09      	cmp	r3, #9
 8005878:	d94d      	bls.n	8005916 <_vfiprintf_r+0x1a6>
 800587a:	b1b0      	cbz	r0, 80058aa <_vfiprintf_r+0x13a>
 800587c:	9207      	str	r2, [sp, #28]
 800587e:	e014      	b.n	80058aa <_vfiprintf_r+0x13a>
 8005880:	eba0 0308 	sub.w	r3, r0, r8
 8005884:	fa09 f303 	lsl.w	r3, r9, r3
 8005888:	4313      	orrs	r3, r2
 800588a:	9304      	str	r3, [sp, #16]
 800588c:	46a2      	mov	sl, r4
 800588e:	e7d2      	b.n	8005836 <_vfiprintf_r+0xc6>
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	1d19      	adds	r1, r3, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	9103      	str	r1, [sp, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	bfbb      	ittet	lt
 800589c:	425b      	neglt	r3, r3
 800589e:	f042 0202 	orrlt.w	r2, r2, #2
 80058a2:	9307      	strge	r3, [sp, #28]
 80058a4:	9307      	strlt	r3, [sp, #28]
 80058a6:	bfb8      	it	lt
 80058a8:	9204      	strlt	r2, [sp, #16]
 80058aa:	7823      	ldrb	r3, [r4, #0]
 80058ac:	2b2e      	cmp	r3, #46	; 0x2e
 80058ae:	d10c      	bne.n	80058ca <_vfiprintf_r+0x15a>
 80058b0:	7863      	ldrb	r3, [r4, #1]
 80058b2:	2b2a      	cmp	r3, #42	; 0x2a
 80058b4:	d134      	bne.n	8005920 <_vfiprintf_r+0x1b0>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	1d1a      	adds	r2, r3, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	9203      	str	r2, [sp, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bfb8      	it	lt
 80058c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80058c6:	3402      	adds	r4, #2
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80059a0 <_vfiprintf_r+0x230>
 80058ce:	7821      	ldrb	r1, [r4, #0]
 80058d0:	2203      	movs	r2, #3
 80058d2:	4650      	mov	r0, sl
 80058d4:	f7fa fc8c 	bl	80001f0 <memchr>
 80058d8:	b138      	cbz	r0, 80058ea <_vfiprintf_r+0x17a>
 80058da:	9b04      	ldr	r3, [sp, #16]
 80058dc:	eba0 000a 	sub.w	r0, r0, sl
 80058e0:	2240      	movs	r2, #64	; 0x40
 80058e2:	4082      	lsls	r2, r0
 80058e4:	4313      	orrs	r3, r2
 80058e6:	3401      	adds	r4, #1
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ee:	4829      	ldr	r0, [pc, #164]	; (8005994 <_vfiprintf_r+0x224>)
 80058f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058f4:	2206      	movs	r2, #6
 80058f6:	f7fa fc7b 	bl	80001f0 <memchr>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d03f      	beq.n	800597e <_vfiprintf_r+0x20e>
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <_vfiprintf_r+0x228>)
 8005900:	bb1b      	cbnz	r3, 800594a <_vfiprintf_r+0x1da>
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	3307      	adds	r3, #7
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	3308      	adds	r3, #8
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005910:	443b      	add	r3, r7
 8005912:	9309      	str	r3, [sp, #36]	; 0x24
 8005914:	e768      	b.n	80057e8 <_vfiprintf_r+0x78>
 8005916:	fb0c 3202 	mla	r2, ip, r2, r3
 800591a:	460c      	mov	r4, r1
 800591c:	2001      	movs	r0, #1
 800591e:	e7a6      	b.n	800586e <_vfiprintf_r+0xfe>
 8005920:	2300      	movs	r3, #0
 8005922:	3401      	adds	r4, #1
 8005924:	9305      	str	r3, [sp, #20]
 8005926:	4619      	mov	r1, r3
 8005928:	f04f 0c0a 	mov.w	ip, #10
 800592c:	4620      	mov	r0, r4
 800592e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005932:	3a30      	subs	r2, #48	; 0x30
 8005934:	2a09      	cmp	r2, #9
 8005936:	d903      	bls.n	8005940 <_vfiprintf_r+0x1d0>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0c6      	beq.n	80058ca <_vfiprintf_r+0x15a>
 800593c:	9105      	str	r1, [sp, #20]
 800593e:	e7c4      	b.n	80058ca <_vfiprintf_r+0x15a>
 8005940:	fb0c 2101 	mla	r1, ip, r1, r2
 8005944:	4604      	mov	r4, r0
 8005946:	2301      	movs	r3, #1
 8005948:	e7f0      	b.n	800592c <_vfiprintf_r+0x1bc>
 800594a:	ab03      	add	r3, sp, #12
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	462a      	mov	r2, r5
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <_vfiprintf_r+0x22c>)
 8005952:	a904      	add	r1, sp, #16
 8005954:	4630      	mov	r0, r6
 8005956:	f7fd fb77 	bl	8003048 <_printf_float>
 800595a:	4607      	mov	r7, r0
 800595c:	1c78      	adds	r0, r7, #1
 800595e:	d1d6      	bne.n	800590e <_vfiprintf_r+0x19e>
 8005960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005962:	07d9      	lsls	r1, r3, #31
 8005964:	d405      	bmi.n	8005972 <_vfiprintf_r+0x202>
 8005966:	89ab      	ldrh	r3, [r5, #12]
 8005968:	059a      	lsls	r2, r3, #22
 800596a:	d402      	bmi.n	8005972 <_vfiprintf_r+0x202>
 800596c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800596e:	f7fe f8fb 	bl	8003b68 <__retarget_lock_release_recursive>
 8005972:	89ab      	ldrh	r3, [r5, #12]
 8005974:	065b      	lsls	r3, r3, #25
 8005976:	f53f af1d 	bmi.w	80057b4 <_vfiprintf_r+0x44>
 800597a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800597c:	e71c      	b.n	80057b8 <_vfiprintf_r+0x48>
 800597e:	ab03      	add	r3, sp, #12
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	462a      	mov	r2, r5
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <_vfiprintf_r+0x22c>)
 8005986:	a904      	add	r1, sp, #16
 8005988:	4630      	mov	r0, r6
 800598a:	f7fd fe01 	bl	8003590 <_printf_i>
 800598e:	e7e4      	b.n	800595a <_vfiprintf_r+0x1ea>
 8005990:	0800621d 	.word	0x0800621d
 8005994:	08006227 	.word	0x08006227
 8005998:	08003049 	.word	0x08003049
 800599c:	0800574d 	.word	0x0800574d
 80059a0:	08006223 	.word	0x08006223

080059a4 <__swbuf_r>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	460e      	mov	r6, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	4605      	mov	r5, r0
 80059ac:	b118      	cbz	r0, 80059b6 <__swbuf_r+0x12>
 80059ae:	6a03      	ldr	r3, [r0, #32]
 80059b0:	b90b      	cbnz	r3, 80059b6 <__swbuf_r+0x12>
 80059b2:	f7fd ff9b 	bl	80038ec <__sinit>
 80059b6:	69a3      	ldr	r3, [r4, #24]
 80059b8:	60a3      	str	r3, [r4, #8]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	071a      	lsls	r2, r3, #28
 80059be:	d525      	bpl.n	8005a0c <__swbuf_r+0x68>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	b31b      	cbz	r3, 8005a0c <__swbuf_r+0x68>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	6922      	ldr	r2, [r4, #16]
 80059c8:	1a98      	subs	r0, r3, r2
 80059ca:	6963      	ldr	r3, [r4, #20]
 80059cc:	b2f6      	uxtb	r6, r6
 80059ce:	4283      	cmp	r3, r0
 80059d0:	4637      	mov	r7, r6
 80059d2:	dc04      	bgt.n	80059de <__swbuf_r+0x3a>
 80059d4:	4621      	mov	r1, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	f7ff fd9e 	bl	8005518 <_fflush_r>
 80059dc:	b9e0      	cbnz	r0, 8005a18 <__swbuf_r+0x74>
 80059de:	68a3      	ldr	r3, [r4, #8]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	60a3      	str	r3, [r4, #8]
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	6022      	str	r2, [r4, #0]
 80059ea:	701e      	strb	r6, [r3, #0]
 80059ec:	6962      	ldr	r2, [r4, #20]
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d004      	beq.n	80059fe <__swbuf_r+0x5a>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	07db      	lsls	r3, r3, #31
 80059f8:	d506      	bpl.n	8005a08 <__swbuf_r+0x64>
 80059fa:	2e0a      	cmp	r6, #10
 80059fc:	d104      	bne.n	8005a08 <__swbuf_r+0x64>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f7ff fd89 	bl	8005518 <_fflush_r>
 8005a06:	b938      	cbnz	r0, 8005a18 <__swbuf_r+0x74>
 8005a08:	4638      	mov	r0, r7
 8005a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f806 	bl	8005a20 <__swsetup_r>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d0d5      	beq.n	80059c4 <__swbuf_r+0x20>
 8005a18:	f04f 37ff 	mov.w	r7, #4294967295
 8005a1c:	e7f4      	b.n	8005a08 <__swbuf_r+0x64>
	...

08005a20 <__swsetup_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <__swsetup_r+0xac>)
 8005a24:	4605      	mov	r5, r0
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	460c      	mov	r4, r1
 8005a2a:	b118      	cbz	r0, 8005a34 <__swsetup_r+0x14>
 8005a2c:	6a03      	ldr	r3, [r0, #32]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <__swsetup_r+0x14>
 8005a30:	f7fd ff5c 	bl	80038ec <__sinit>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a3a:	0718      	lsls	r0, r3, #28
 8005a3c:	d422      	bmi.n	8005a84 <__swsetup_r+0x64>
 8005a3e:	06d9      	lsls	r1, r3, #27
 8005a40:	d407      	bmi.n	8005a52 <__swsetup_r+0x32>
 8005a42:	2309      	movs	r3, #9
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a4a:	81a3      	strh	r3, [r4, #12]
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	e034      	b.n	8005abc <__swsetup_r+0x9c>
 8005a52:	0758      	lsls	r0, r3, #29
 8005a54:	d512      	bpl.n	8005a7c <__swsetup_r+0x5c>
 8005a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a58:	b141      	cbz	r1, 8005a6c <__swsetup_r+0x4c>
 8005a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	d002      	beq.n	8005a68 <__swsetup_r+0x48>
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7fe fefe 	bl	8004864 <_free_r>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6363      	str	r3, [r4, #52]	; 0x34
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a72:	81a3      	strh	r3, [r4, #12]
 8005a74:	2300      	movs	r3, #0
 8005a76:	6063      	str	r3, [r4, #4]
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	f043 0308 	orr.w	r3, r3, #8
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	b94b      	cbnz	r3, 8005a9c <__swsetup_r+0x7c>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a92:	d003      	beq.n	8005a9c <__swsetup_r+0x7c>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 f884 	bl	8005ba4 <__smakebuf_r>
 8005a9c:	89a0      	ldrh	r0, [r4, #12]
 8005a9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aa2:	f010 0301 	ands.w	r3, r0, #1
 8005aa6:	d00a      	beq.n	8005abe <__swsetup_r+0x9e>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60a3      	str	r3, [r4, #8]
 8005aac:	6963      	ldr	r3, [r4, #20]
 8005aae:	425b      	negs	r3, r3
 8005ab0:	61a3      	str	r3, [r4, #24]
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	b943      	cbnz	r3, 8005ac8 <__swsetup_r+0xa8>
 8005ab6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005aba:	d1c4      	bne.n	8005a46 <__swsetup_r+0x26>
 8005abc:	bd38      	pop	{r3, r4, r5, pc}
 8005abe:	0781      	lsls	r1, r0, #30
 8005ac0:	bf58      	it	pl
 8005ac2:	6963      	ldrpl	r3, [r4, #20]
 8005ac4:	60a3      	str	r3, [r4, #8]
 8005ac6:	e7f4      	b.n	8005ab2 <__swsetup_r+0x92>
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e7f7      	b.n	8005abc <__swsetup_r+0x9c>
 8005acc:	20007d64 	.word	0x20007d64

08005ad0 <_raise_r>:
 8005ad0:	291f      	cmp	r1, #31
 8005ad2:	b538      	push	{r3, r4, r5, lr}
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	460d      	mov	r5, r1
 8005ad8:	d904      	bls.n	8005ae4 <_raise_r+0x14>
 8005ada:	2316      	movs	r3, #22
 8005adc:	6003      	str	r3, [r0, #0]
 8005ade:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005ae6:	b112      	cbz	r2, 8005aee <_raise_r+0x1e>
 8005ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005aec:	b94b      	cbnz	r3, 8005b02 <_raise_r+0x32>
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 f830 	bl	8005b54 <_getpid_r>
 8005af4:	462a      	mov	r2, r5
 8005af6:	4601      	mov	r1, r0
 8005af8:	4620      	mov	r0, r4
 8005afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005afe:	f000 b817 	b.w	8005b30 <_kill_r>
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d00a      	beq.n	8005b1c <_raise_r+0x4c>
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	d103      	bne.n	8005b12 <_raise_r+0x42>
 8005b0a:	2316      	movs	r3, #22
 8005b0c:	6003      	str	r3, [r0, #0]
 8005b0e:	2001      	movs	r0, #1
 8005b10:	e7e7      	b.n	8005ae2 <_raise_r+0x12>
 8005b12:	2400      	movs	r4, #0
 8005b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b18:	4628      	mov	r0, r5
 8005b1a:	4798      	blx	r3
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e7e0      	b.n	8005ae2 <_raise_r+0x12>

08005b20 <raise>:
 8005b20:	4b02      	ldr	r3, [pc, #8]	; (8005b2c <raise+0xc>)
 8005b22:	4601      	mov	r1, r0
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	f7ff bfd3 	b.w	8005ad0 <_raise_r>
 8005b2a:	bf00      	nop
 8005b2c:	20007d64 	.word	0x20007d64

08005b30 <_kill_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d07      	ldr	r5, [pc, #28]	; (8005b50 <_kill_r+0x20>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	f7fc f875 	bl	8001c2c <_kill>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d102      	bne.n	8005b4c <_kill_r+0x1c>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	b103      	cbz	r3, 8005b4c <_kill_r+0x1c>
 8005b4a:	6023      	str	r3, [r4, #0]
 8005b4c:	bd38      	pop	{r3, r4, r5, pc}
 8005b4e:	bf00      	nop
 8005b50:	20008dfc 	.word	0x20008dfc

08005b54 <_getpid_r>:
 8005b54:	f7fc b862 	b.w	8001c1c <_getpid>

08005b58 <__swhatbuf_r>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b60:	2900      	cmp	r1, #0
 8005b62:	b096      	sub	sp, #88	; 0x58
 8005b64:	4615      	mov	r5, r2
 8005b66:	461e      	mov	r6, r3
 8005b68:	da0d      	bge.n	8005b86 <__swhatbuf_r+0x2e>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b7a:	2340      	movne	r3, #64	; 0x40
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	6031      	str	r1, [r6, #0]
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	b016      	add	sp, #88	; 0x58
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
 8005b86:	466a      	mov	r2, sp
 8005b88:	f000 f848 	bl	8005c1c <_fstat_r>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	dbec      	blt.n	8005b6a <__swhatbuf_r+0x12>
 8005b90:	9901      	ldr	r1, [sp, #4]
 8005b92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b9a:	4259      	negs	r1, r3
 8005b9c:	4159      	adcs	r1, r3
 8005b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ba2:	e7eb      	b.n	8005b7c <__swhatbuf_r+0x24>

08005ba4 <__smakebuf_r>:
 8005ba4:	898b      	ldrh	r3, [r1, #12]
 8005ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ba8:	079d      	lsls	r5, r3, #30
 8005baa:	4606      	mov	r6, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	d507      	bpl.n	8005bc0 <__smakebuf_r+0x1c>
 8005bb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	6123      	str	r3, [r4, #16]
 8005bb8:	2301      	movs	r3, #1
 8005bba:	6163      	str	r3, [r4, #20]
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	ab01      	add	r3, sp, #4
 8005bc2:	466a      	mov	r2, sp
 8005bc4:	f7ff ffc8 	bl	8005b58 <__swhatbuf_r>
 8005bc8:	9900      	ldr	r1, [sp, #0]
 8005bca:	4605      	mov	r5, r0
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7fe febd 	bl	800494c <_malloc_r>
 8005bd2:	b948      	cbnz	r0, 8005be8 <__smakebuf_r+0x44>
 8005bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd8:	059a      	lsls	r2, r3, #22
 8005bda:	d4ef      	bmi.n	8005bbc <__smakebuf_r+0x18>
 8005bdc:	f023 0303 	bic.w	r3, r3, #3
 8005be0:	f043 0302 	orr.w	r3, r3, #2
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	e7e3      	b.n	8005bb0 <__smakebuf_r+0xc>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	6020      	str	r0, [r4, #0]
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	9b00      	ldr	r3, [sp, #0]
 8005bf4:	6163      	str	r3, [r4, #20]
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	6120      	str	r0, [r4, #16]
 8005bfa:	b15b      	cbz	r3, 8005c14 <__smakebuf_r+0x70>
 8005bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 f81d 	bl	8005c40 <_isatty_r>
 8005c06:	b128      	cbz	r0, 8005c14 <__smakebuf_r+0x70>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	431d      	orrs	r5, r3
 8005c18:	81a5      	strh	r5, [r4, #12]
 8005c1a:	e7cf      	b.n	8005bbc <__smakebuf_r+0x18>

08005c1c <_fstat_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d07      	ldr	r5, [pc, #28]	; (8005c3c <_fstat_r+0x20>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	602b      	str	r3, [r5, #0]
 8005c2a:	f7fc f85e 	bl	8001cea <_fstat>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d102      	bne.n	8005c38 <_fstat_r+0x1c>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	b103      	cbz	r3, 8005c38 <_fstat_r+0x1c>
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20008dfc 	.word	0x20008dfc

08005c40 <_isatty_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_isatty_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fc f85d 	bl	8001d0a <_isatty>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_isatty_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_isatty_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	20008dfc 	.word	0x20008dfc

08005c60 <_init>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr

08005c6c <_fini>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr
